{
    "pipes": [],
    "interfaces": [
        {
            "name": "FreudMenuItem",
            "id": "interface-FreudMenuItem-af2b5b3e3f637b798bde09db072b1a1d141c94149bafb44d030ae4512a7c424e42996d1042c3cb983a22b777e2f5806454ede1aaa8c669c8b9c7c7c050184d67",
            "file": "projects/web-components/src/api/menu.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from \"primeng/api\";\r\n\r\nexport interface FreudMenuItem extends MenuItem {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "MenuItem"
        },
        {
            "name": "FreudMessage",
            "id": "interface-FreudMessage-39f22c4e3ab92d5072f09c690f05a20edb337f20d4ec0be4c139f577f06c4ff4c87a27a2082b45d2dfda1a455f290605be571ee0b7fdf66b15332dcd29c23eb1",
            "file": "projects/web-components/src/api/message.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from \"primeng/api\";\r\n\r\nexport interface FreudMessage extends Message {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Message"
        },
        {
            "name": "GalleryPhoto",
            "id": "interface-GalleryPhoto-fd4b9ba800f353390a721431e1748a4531533ef2c8297cf6e397d263a653ac21099594b472832c1c02b38f1d160f04214c12400d17912620983260b24f9e516b",
            "file": "projects/web-components/src/api/gallery-photo.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GalleryPhoto {\r\n  \"previewImageSrc\": string;\r\n  \"thumbnailImageSrc\": string;\r\n  \"alt\": string;\r\n  \"title\": string;\r\n}\r\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "previewImageSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "thumbnailImageSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StepMenu",
            "id": "interface-StepMenu-eecfadf3cb777efa3dcde334d52ad34e2fb23ac5677b858ea0b24d776b28fc512921e44d2c0dd13b0afe3ecca0ae0ba650e0ced6b0cc580fe9eb21cc932539cf",
            "file": "projects/web-components/src/components/feedback/steps/steps.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\nexport interface StepMenu extends FreudMenuItem {}\n\n@Component({\n  selector: 'freud-steps',\n  template: `\n    <p-steps\n      [model]=\"model\"\n      [activeIndex]=\"activeIndex\"\n      [readonly]=\"readonly\"\n      (activeIndexChange)=\"activeIndexChange.emit($event)\">\n    </p-steps>\n  `,\n  styleUrls: ['./steps.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-steps',\n    '[class.freud-steps-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudStepsComponent {\n\n  @Input() model!: StepMenu[];\n  @Input() readonly: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() activeIndex: number = 0;\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "FreudMenuItem"
        }
    ],
    "injectables": [
        {
            "name": "FreudConfirmationService",
            "id": "injectable-FreudConfirmationService-7cd67e39c79dd4feb98b305a0c41da51c88ff00ca087bd632773f11e3f8fed0e2a9e54a8f03b15d84df07feed233aa3cee2f392f74e6c3e4611757ff8acea15d",
            "file": "projects/web-components/src/services/confirmation.service.ts",
            "properties": [
                {
                    "name": "accept",
                    "defaultValue": "this.primeConfirmation['acceptConfirmationSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "requireConfirmation$",
                    "defaultValue": "this.primeConfirmation['requireConfirmationSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "confirmation",
                            "type": "Confirmation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmation",
                            "type": "Confirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAccept",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Confirmation, ConfirmationService } from 'primeng/api';\n\n@Injectable()\nexport class FreudConfirmationService {\n\n  constructor(private primeConfirmation: ConfirmationService) {}\n\n  requireConfirmation$ = this.primeConfirmation['requireConfirmationSource'].asObservable();\n  accept = this.primeConfirmation['acceptConfirmationSource'].asObservable();\n\n  confirm(confirmation: Confirmation) {\n    this.primeConfirmation['requireConfirmationSource'].next(confirmation);\n    return this;\n  }\n\n  close() {\n    this.primeConfirmation['requireConfirmationSource'].next(null);\n    return this;\n  }\n\n  onAccept() {\n    this.primeConfirmation['acceptConfirmationSource'].next(null);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primeConfirmation",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "primeConfirmation",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FreudMessageService",
            "id": "injectable-FreudMessageService-1c63889ad19d86b040c3f4531b88f9f03a64f82c1a6524cd8153968da362be1a4b225dee4cfca5abe779840561ff37ca138f72733e4733d2c9d7b45cf0b7d081",
            "file": "projects/web-components/src/services/message.service.ts",
            "properties": [
                {
                    "name": "clearObserver",
                    "defaultValue": "this.primeMessage['clearSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "messageObserver",
                    "defaultValue": "this.primeMessage['messageSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addAll",
                    "args": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Message, MessageService } from \"primeng/api\";\n\n@Injectable()\nexport class FreudMessageService {\n\n  constructor(private primeMessage: MessageService) { }\n\n  messageObserver = this.primeMessage['messageSource'].asObservable();\n  clearObserver = this.primeMessage['clearSource'].asObservable();\n\n  add(message: Message) {\n    if (message) {\n      this.primeMessage['messageSource'].next(message);\n    }\n  }\n\n  addAll(messages: Message[]) {\n    if (messages && messages.length) {\n      this.primeMessage['messageSource'].next(messages);\n    }\n  }\n\n  clear(key?: string) {\n    this.primeMessage['clearSource'].next(key || null);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primeMessage",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "primeMessage",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "FreudAccordionComponent",
            "id": "component-FreudAccordionComponent-67775bab767b88c65c06d9fb38cb0d4663b4494a1deaf761171f88d5dfaedc15c25bb6f3d6f679e2d703cc947311838ce914171412070104cfa28bd807f6d64c",
            "file": "projects/web-components/src/components/others/accordion/accordion.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "template": "<p-accordion\n  [activeIndex]=\"activeIndex\"\n  [multiple]=\"multiple\"\n  [tabindex]=\"tabindex\"\n  [expandIcon]=\"expandIcon\"\n  [collapseIcon]=\"collapseIcon\"\n  [style]=\"style\"\n  (onOpen)=\"onOpen.emit($event)\"\n  (onClose)=\"onClose.emit($event)\">\n</p-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "collapseIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "expandIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<any>",
                    "optional": false,
                    "description": "",
                    "line": 62,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudAccordionTabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-accordion-tab',\n  template: `\n    <p-accordionTab\n      [disabled]=\"disabled\"\n      [selected]=\"selected\"\n      [tabindex]=\"tabindex\"\n      [header]=\"header\"\n      [style]=\"style\">\n    </p-accordionTab>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion-tab',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionTabComponent {\n  @Input() disabled: boolean = false;\n  @Input() tabindex: number = 0;\n  @Input() selected: boolean = false;\n  @Input() header!: string;\n  @Input() style!: string;\n  @Input() bgColor: boolean = false;\n\n}\n\n@Component({\n  selector: 'freud-accordion',\n  template: `\n    <p-accordion\n      [activeIndex]=\"activeIndex\"\n      [multiple]=\"multiple\"\n      [tabindex]=\"tabindex\"\n      [expandIcon]=\"expandIcon\"\n      [collapseIcon]=\"collapseIcon\"\n      [style]=\"style\"\n      (onOpen)=\"onOpen.emit($event)\"\n      (onClose)=\"onClose.emit($event)\">\n    </p-accordion>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionComponent {\n  @Input() style!: string;\n  @Input() tabindex: number = 0;\n  @Input() multiple: boolean = false;\n  @Input() collapseIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() expandIcon: string = 'freud-icon freud-icon-chevron-right';\n  @Input() activeIndex!: number;\n  @Input() bgColor: boolean = false;\n  @ContentChildren(FreudAccordionTabComponent) templates!: QueryList<any>;\n  @Output() onClose: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onOpen: EventEmitter<any> = new EventEmitter<any>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-accordion.freud-bgcolor {\r\n\r\n}\r\n\r\n.freud-select-button:not(.freud-select-bgcolor) {\r\n\r\n}\r\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAccordionTabComponent",
            "id": "component-FreudAccordionTabComponent-67775bab767b88c65c06d9fb38cb0d4663b4494a1deaf761171f88d5dfaedc15c25bb6f3d6f679e2d703cc947311838ce914171412070104cfa28bd807f6d64c",
            "file": "projects/web-components/src/components/others/accordion/accordion.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-accordion-tab",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "template": "<p-accordionTab\n  [disabled]=\"disabled\"\n  [selected]=\"selected\"\n  [tabindex]=\"tabindex\"\n  [header]=\"header\"\n  [style]=\"style\">\n</p-accordionTab>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ContentChildren, EventEmitter, Input, Output, QueryList, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-accordion-tab',\n  template: `\n    <p-accordionTab\n      [disabled]=\"disabled\"\n      [selected]=\"selected\"\n      [tabindex]=\"tabindex\"\n      [header]=\"header\"\n      [style]=\"style\">\n    </p-accordionTab>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion-tab',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionTabComponent {\n  @Input() disabled: boolean = false;\n  @Input() tabindex: number = 0;\n  @Input() selected: boolean = false;\n  @Input() header!: string;\n  @Input() style!: string;\n  @Input() bgColor: boolean = false;\n\n}\n\n@Component({\n  selector: 'freud-accordion',\n  template: `\n    <p-accordion\n      [activeIndex]=\"activeIndex\"\n      [multiple]=\"multiple\"\n      [tabindex]=\"tabindex\"\n      [expandIcon]=\"expandIcon\"\n      [collapseIcon]=\"collapseIcon\"\n      [style]=\"style\"\n      (onOpen)=\"onOpen.emit($event)\"\n      (onClose)=\"onClose.emit($event)\">\n    </p-accordion>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionComponent {\n  @Input() style!: string;\n  @Input() tabindex: number = 0;\n  @Input() multiple: boolean = false;\n  @Input() collapseIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() expandIcon: string = 'freud-icon freud-icon-chevron-right';\n  @Input() activeIndex!: number;\n  @Input() bgColor: boolean = false;\n  @ContentChildren(FreudAccordionTabComponent) templates!: QueryList<any>;\n  @Output() onClose: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onOpen: EventEmitter<any> = new EventEmitter<any>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-accordion.freud-bgcolor {\r\n\r\n}\r\n\r\n.freud-select-button:not(.freud-select-bgcolor) {\r\n\r\n}\r\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudActionIconComponent",
            "id": "component-FreudActionIconComponent-37cc8a2c1bc87bf3c4995e92616f8f85c339874e70513c64d8beb251ee73b076d2a0460ebcfb7f5ed66b71d5a9a5437c9a49ba44565dc29579890b410c909a51",
            "file": "projects/web-components/src/components/others/action-icon/action-icon.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-action-icon",
            "styleUrls": [
                "./action-icon.component.scss"
            ],
            "styles": [],
            "template": "<button type=\"button\">\n  <span class=\"freud-icon freud-icon-chevron-left\"></span>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-action-icon',\n  template: `\n    <button type=\"button\">\n      <span class=\"freud-icon freud-icon-chevron-left\"></span>\n    </button>\n  `,\n  styleUrls: ['./action-icon.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-action-icon',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudActionIconComponent {\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-action-icon.freud-bgcolor {\r\n  button {\r\n    color: $neutral-color-white;\r\n  }\r\n  button:enabled:hover {\r\n    background: $brand-color-03;\r\n  }\r\n}\r\n\r\n.freud-action-icon {\r\n  button {\r\n    width: 28px;\r\n    height: 28px;\r\n    border: 0 none;\r\n    background: transparent;\r\n    border-radius: 50%;\r\n    transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;\r\n\r\n    .freud-icon {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n}\r\n\r\n.freud-action-icon:not(.freud-bgcolor) {\r\n  button {\r\n    color: $neutral-color-dark-02;\r\n  }\r\n  button:enabled:hover {\r\n    background: $neutral-color-light-02;\r\n  }\r\n}\r\n",
                    "styleUrl": "./action-icon.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAlertMessageComponent",
            "id": "component-FreudAlertMessageComponent-cab5caabdfd137a1385e22aa60a2f4c9e9cbc7bec1e1e8db716fd3b4a1c1d522f1d3b30f0bcf8a7139bfc664bacd83bb1ce66a714bdda00f550f0ea6da13a33f",
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-alert-message",
            "styleUrls": [
                "./alert-messages.component.scss"
            ],
            "styles": [],
            "template": "<p-message [severity]=\"severity\" [text]=\"text\"></p-message>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "severity",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "severities",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { Component, Input } from '@angular/core';\nimport { FreudMessage } from \"../../../api\";\n\ntype severities = 'success' | 'info' | 'warn' | 'error';\n\n@Component({\n  selector: 'freud-alert-messages',\n  template: `\n    <p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessagesComponent {\n  @Input() messages!: FreudMessage[];\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n  @Input() closable: boolean = true;\n\n}\n\n@Component({\n  selector: 'freud-alert-message',\n  template: `\n    <p-message [severity]=\"severity\" [text]=\"text\"></p-message>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessageComponent {\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-alert-messages {\r\n  .p-message, .p-inline-message {\r\n    border: unset;\r\n    border-radius: $border-radius-md;\r\n    color: $neutral-color-dark-04;\r\n\r\n    &.p-message-success, &.p-inline-message-success {\r\n      background-color: $feedback-color-positive-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-positive-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-info, &.p-inline-message-info {\r\n      background-color: $feedback-color-neutral-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-neutral-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-warn, &.p-inline-message-warn {\r\n      background-color: $feedback-color-warning-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-alert-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-error, &.p-inline-message-error {\r\n      background-color: $feedback-color-negative-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-negative-pure;\r\n      }\r\n    }\r\n\r\n    .freud-icon {\r\n      font-size: 31px;\r\n      margin-left: -5px;\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n\r\n  .p-inline-message {\r\n    padding: 11px;\r\n  }\r\n\r\n  .p-message .p-message-summary {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-message-detail {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .pi-info-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9ed\";\r\n  }\r\n\r\n  .pi-exclamation-triangle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e903\";\r\n  }\r\n\r\n  .pi-times-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9b9\";\r\n  }\r\n  .pi-check:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e973\";\r\n  }\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./alert-messages.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAlertMessagesComponent",
            "id": "component-FreudAlertMessagesComponent-cab5caabdfd137a1385e22aa60a2f4c9e9cbc7bec1e1e8db716fd3b4a1c1d522f1d3b30f0bcf8a7139bfc664bacd83bb1ce66a714bdda00f550f0ea6da13a33f",
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-alert-messages",
            "styleUrls": [
                "./alert-messages.component.scss"
            ],
            "styles": [],
            "template": "<p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FreudMessage[]",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "severities",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { Component, Input } from '@angular/core';\nimport { FreudMessage } from \"../../../api\";\n\ntype severities = 'success' | 'info' | 'warn' | 'error';\n\n@Component({\n  selector: 'freud-alert-messages',\n  template: `\n    <p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessagesComponent {\n  @Input() messages!: FreudMessage[];\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n  @Input() closable: boolean = true;\n\n}\n\n@Component({\n  selector: 'freud-alert-message',\n  template: `\n    <p-message [severity]=\"severity\" [text]=\"text\"></p-message>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessageComponent {\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-alert-messages {\r\n  .p-message, .p-inline-message {\r\n    border: unset;\r\n    border-radius: $border-radius-md;\r\n    color: $neutral-color-dark-04;\r\n\r\n    &.p-message-success, &.p-inline-message-success {\r\n      background-color: $feedback-color-positive-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-positive-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-info, &.p-inline-message-info {\r\n      background-color: $feedback-color-neutral-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-neutral-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-warn, &.p-inline-message-warn {\r\n      background-color: $feedback-color-warning-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-alert-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-error, &.p-inline-message-error {\r\n      background-color: $feedback-color-negative-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-negative-pure;\r\n      }\r\n    }\r\n\r\n    .freud-icon {\r\n      font-size: 31px;\r\n      margin-left: -5px;\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n\r\n  .p-inline-message {\r\n    padding: 11px;\r\n  }\r\n\r\n  .p-message .p-message-summary {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-message-detail {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .pi-info-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9ed\";\r\n  }\r\n\r\n  .pi-exclamation-triangle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e903\";\r\n  }\r\n\r\n  .pi-times-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9b9\";\r\n  }\r\n  .pi-check:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e973\";\r\n  }\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./alert-messages.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAutoCompleteComponent",
            "id": "component-FreudAutoCompleteComponent-e1806485fd1e1bce778dc0d9d7c98257d0d2956e7e4563f38b6131ff58a1c0a92c79460fa31e2b52d8902e383c80930d13773ff6e3bcc64066a156f457b8e350",
            "file": "projects/web-components/src/components/forms/auto-complete/auto-complete.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudAutoCompleteComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-auto-complete",
            "styleUrls": [
                "./auto-complete.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-autoComplete\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [dropdown]=\"dropdown\"\n    [dropdownMode]=\"dropdownMode\"\n    [field]=\"field\"\n    [multiple]=\"multiple\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [suggestions]=\"suggestions\"\n    [forceSelection]=\"forceSelection\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (completeMethod)=\"completeMethod.emit($event)\"\n    (onDropdownClick)=\"onDropdownClick.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n    (onHide)=\"onHide.emit($event)\"\n    (onClear)=\"onClear.emit($event)\"\n\n  ></p-autoComplete>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dropdownMode",
                    "defaultValue": "'blank'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "\"blank\" | \"current\"",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "forceSelection",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "suggestions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "completeMethod",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onDropdownClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 100,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 117
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 119
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-auto-complete',\r\n  styleUrls: ['./auto-complete.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-autoComplete\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [dropdownIcon]=\"dropdownIcon\"\r\n        [dropdown]=\"dropdown\"\r\n        [dropdownMode]=\"dropdownMode\"\r\n        [field]=\"field\"\r\n        [multiple]=\"multiple\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [itemSize]=\"itemSize\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [suggestions]=\"suggestions\"\r\n        [forceSelection]=\"forceSelection\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (completeMethod)=\"completeMethod.emit($event)\"\r\n        (onDropdownClick)=\"onDropdownClick.emit($event)\"\r\n        (onShow)=\"onShow.emit($event)\"\r\n        (onHide)=\"onHide.emit($event)\"\r\n        (onClear)=\"onClear.emit($event)\"\r\n\r\n      ></p-autoComplete>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-auto-complete',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudAutoCompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudAutoCompleteComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() suggestions!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() multiple: boolean = false;\r\n  @Input() dropdown: boolean = false;\r\n  @Input() forceSelection: boolean = false;\r\n  @Input() virtualScroll: boolean = false;\r\n  @Input() itemSize!: number;\r\n  @Input() field!: string;\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() dropdownMode: 'blank' | 'current' = 'blank';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() completeMethod: EventEmitter<any> = new EventEmitter();\r\n  @Output() onDropdownClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClear: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-auto-complete:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-auto-complete.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-auto-complete {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-button {\r\n    background: $neutral-color-white;\r\n    border: 1px solid $neutral-color-light-03;;\r\n    border-radius: $border-radius-md;\r\n    border-left: unset;\r\n  }\r\n\r\n  .p-button:hover {\r\n    background: $neutral-color-white;\r\n  }\r\n\r\n  .p-button:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n  }\r\n\r\n  .p-autocomplete-dd .p-inputtext {\r\n    border-right: unset;\r\n  }\r\n\r\n  .p-button-icon {\r\n    font-size: 14px;\r\n    color: $neutral-color-dark-02;\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-autocomplete {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-autocomplete:not(.p-disabled).p-focus,\r\n  .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-autocomplete:not(.p-disabled):hover,\r\n  .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n    .p-inputtext, .p-button {\r\n      border-color: $brand-color-pure;\r\n    }\r\n  }\r\n  .p-autocomplete .p-autocomplete-panel {\r\n    border-radius: $border-radius-md;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item {\r\n    padding: 12px 1rem;\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $brand-color-pure;\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  // Chip\r\n  .p-autocomplete .p-autocomplete-multiple-container .p-autocomplete-token {\r\n    padding: 0.25rem 0.5rem;\r\n    margin-right: 0.5rem;\r\n    @include typography($font-size-xxs, $font-weight-regular, 21px);\r\n    background: $brand-color-01;\r\n    color: $brand-color-pure;\r\n    border-radius: $border-radius-md;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./auto-complete.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 129,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 125
                    }
                }
            }
        },
        {
            "name": "FreudAutoCompleteExampleComponent",
            "id": "component-FreudAutoCompleteExampleComponent-7399d54787ded84859df593b061fea1ac0a1367c44442dfbf69686749158d8990022624817fb2d14a00ecdcb5ca8a0c537e888db20ae9be4464e92e259ea1935",
            "file": "stories/forms/auto-complete/auto-complete-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-auto-complete-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-auto-complete\n  [(ngModel)]=\"selectedItem\"\n  [suggestions]=\"items\"\n  [label]=\"'Label'\"\n  [disabled]=\"disabled\"\n  [invalid]=\"invalid\"\n  [bgColor]=\"bgColor\"\n  [multiple]=\"multiple\"\n  [dropdown]=\"dropdown\"\n  [placeholder]=\"'Placeholder'\"\n  (completeMethod)=\"filterItems($event)\">\n</freud-auto-complete>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allItems",
                    "defaultValue": "[\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "items",
                    "defaultValue": "[\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "filterItems",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-auto-complete-example',\n  template: `\n    <freud-auto-complete\n      [(ngModel)]=\"selectedItem\"\n      [suggestions]=\"items\"\n      [label]=\"'Label'\"\n      [disabled]=\"disabled\"\n      [invalid]=\"invalid\"\n      [bgColor]=\"bgColor\"\n      [multiple]=\"multiple\"\n      [dropdown]=\"dropdown\"\n      [placeholder]=\"'Placeholder'\"\n      (completeMethod)=\"filterItems($event)\">\n    </freud-auto-complete>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudAutoCompleteExampleComponent {\n\n  allItems = [\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ];\n  items = [\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ]\n  selectedItem: string = '';\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() dropdown = false;\n  @Input() multiple = false;\n\n  @Input() invalid: boolean = false;\n  constructor() {}\n\n  filterItems(event: any) {\n    //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n    let filtered : any[] = [];\n    let query = event.query;\n    for(let i = 0; i < this.allItems.length; i++) {\n      let item = this.allItems[i];\n      if (item.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n        filtered.push(item);\n      }\n    }\n\n    this.items = filtered;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 49
            }
        },
        {
            "name": "FreudAvatarComponent",
            "id": "component-FreudAvatarComponent-368a66939c964baa1c416d8f355c9c1bcb6aed0e2fd3794cd5a0269ff4e8737b056d95a84028f70b4244f67a355da4528cf60cbfe624d1cf9ee9ceefb3dc551e",
            "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "template": "<p-avatar\n  [label]=\"(image || withIcon) ? '' : label\"\n  [icon]=\"(withIcon || !label) ? 'freud-icon freud-icon-user' : ''\"\n  shape=\"circle\"\n  [image]=\"image\">\n  <freud-badge *ngIf=\"badge\" [value]=\"badge\" color=\"error\"></freud-badge>\n</p-avatar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badge",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "avatarSizes",
                    "decorators": []
                },
                {
                    "name": "withIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\ntype avatarSizes = 'sm' | 'md' | 'lg';\n@Component({\n  selector: 'freud-avatar',\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-avatar\n      [label]=\"(image || withIcon) ? '' : label\"\n      [icon]=\"(withIcon || !label) ? 'freud-icon freud-icon-user' : ''\"\n      shape=\"circle\"\n      [image]=\"image\">\n      <freud-badge *ngIf=\"badge\" [value]=\"badge\" color=\"error\"></freud-badge>\n    </p-avatar>\n  `,\n  styleUrls: ['./avatar.component.scss'],\n  host: {\n    class: 'freud-avatar',\n    '[class.freud-avatar-bgcolor]': `bgColor`,\n\n    '[class.freud-avatar-size-small]': `size === 'sm'`,\n    '[class.freud-avatar-size-medium]': `size === 'md'`,\n    '[class.freud-avatar-size-large]': `size === 'lg'`,\n  }\n})\nexport class FreudAvatarComponent {\n\n  @Input() size: avatarSizes = 'md';\n  @Input() label: string = '';\n  @Input() withIcon: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() badge: string = '';\n  @Input() image: string = '';\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-avatar .p-avatar {\r\n    font-family: $font-family-base;\r\n}\r\n.freud-avatar {\r\n    position: relative;\r\n    display: block;\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-small, .freud-avatar-size-small .p-avatar {\r\n    width: 28px;\r\n    height: 28px;\r\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-medium, .freud-avatar-size-medium .p-avatar {\r\n    width: 42px;\r\n    height: 42px;\r\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-large, .freud-avatar-size-large .p-avatar {\r\n    width: 56px;\r\n    height: 56px;\r\n    @include typography($font-size-md, $font-weight-semibold, 30px);\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-medium {\r\n  .freud-icon {\r\n    font-size: 24px;\r\n  }\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-large {\r\n  .freud-icon {\r\n    font-size: 30px;\r\n  }\r\n}\r\n\r\n\r\n.freud-avatar:not(.freud-avatar-bgcolor) .p-avatar {\r\n    background-color: $neutral-color-light-02;\r\n    color: $neutral-color-dark-03;\r\n}\r\n\r\n.freud-avatar.freud-avatar-bgcolor .p-avatar {\r\n    background-color: $brand-color-03;\r\n    color: $neutral-color-white;\r\n}\r\nfreud-badge {\r\n    position: absolute;\r\n    top: -12px;\r\n    right: -4px;\r\n}\r\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBadgeComponent",
            "id": "component-FreudBadgeComponent-3e56b19eb0afcc37a14dad00b1aa4b7be8192d04c9431ef1288126f4dad1e1bcf1ad5f6ade3003c18072d0383e7091ff5727b5be82205a7e0e0eaca755c386e5",
            "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "template": "<p-badge [value]=\"value!\" class=\"freud-color-{{color}}\"></p-badge>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "colors",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "sizes",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n\ntype sizes = 'default' | 'large';\ntype colors = 'primary' | 'success' | 'info' | 'warning' | 'error' | 'actived';\n\n@Component({\n  selector: 'freud-badge',\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-badge [value]=\"value!\" class=\"freud-color-{{color}}\"></p-badge>\n  `,\n  styleUrls: ['./badge.component.scss'],\n  host: {\n    class: 'freud-badge',\n    '[class.size-large]':  'size === \"large\"'\n  }\n})\nexport class FreudBadgeComponent {\n\n  @Input() value: string = '';\n  @Input() size: sizes = 'default';\n  @Input() color: colors = 'primary';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-badge span.p-badge {\r\n    background-color: $brand-color-pure;\r\n    font-weight: $font-weight-bold;\r\n    font-family: $font-family-base;\r\n    display: inline-block;\r\n}\r\n\r\n.freud-badge {\r\n  .freud-color-success span {\r\n    background-color: $feedback-color-positive-04;\r\n  }\r\n  .freud-color-info span {\r\n    background-color: $feedback-color-neutral-pure;\r\n  }\r\n  .freud-color-warning span {\r\n    background-color: $feedback-color-warning-pure;\r\n    color: $neutral-color-black;\r\n  }\r\n  .freud-color-error span {\r\n    background-color: $feedback-color-negative-04;\r\n  }\r\n  .freud-color-actived span {\r\n    background-color: $complementary-color-like-03;\r\n  }\r\n}\r\n\r\n.freud-badge:not(.size-large) span.p-badge {\r\n  border-radius: $border-radius-md;\r\n  min-width: 16px;\r\n  height: 16px;\r\n  line-height: $font-size-xs;\r\n  @include typography($font-size-xxxs, $font-weight-semibold, auto);\r\n}\r\n.freud-badge.size-large span.p-badge {\r\n  border-radius: 12px;\r\n  @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  display: inline-block;\r\n}\r\n",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBlockExampleComponent",
            "id": "component-FreudBlockExampleComponent-2e52ea16ab9a4e4774f4d5536002b78d49927e9be05192bd831a07d01648e1c8ecd819e7541e7b1048d08b56bc2bc32cf1be5b2175649a11ba73d8518ca27ca0",
            "file": "stories/others/block-ui/block-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-block-ui-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-button (click)=\"onClick()\">Clique aqui!</freud-button>\n\n<ng-container *ngIf=\"!withTarget\">\n  <freud-block-ui [blocked]=\"blocked\">\n  </freud-block-ui>\n</ng-container>\n\n<ng-container *ngIf=\"withTarget\">\n  <br>\n  <freud-card [header]=\"'Card Title'\" #cardElement>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n    ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n    laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n    voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </freud-card>\n  <freud-block-ui [blocked]=\"blocked\" [target]=\"cardElement\">\n  </freud-block-ui>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "withTarget",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-block-ui-example',\n  template: `\n    <freud-button (click)=\"onClick()\">Clique aqui!</freud-button>\n\n    <ng-container *ngIf=\"!withTarget\">\n      <freud-block-ui [blocked]=\"blocked\">\n      </freud-block-ui>\n    </ng-container>\n\n    <ng-container *ngIf=\"withTarget\">\n      <br>\n      <freud-card [header]=\"'Card Title'\" #cardElement>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n        ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n        laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n        voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n        non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n      </freud-card>\n      <freud-block-ui [blocked]=\"blocked\" [target]=\"cardElement\">\n      </freud-block-ui>\n    </ng-container>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudBlockExampleComponent {\n\n  public blocked: boolean = false;\n  @Input() withTarget: boolean = false;\n  onClick() {\n    this.blocked = true;\n    setTimeout(() => this.blocked = false, 5000);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBlockUIComponent",
            "id": "component-FreudBlockUIComponent-343db88218d97c2ee948a8940a4ee39ea4ce5de1b3c5979764c092c7e7c0c7c9c80e5f1db5295d97179f046e58c30681a6482b23b9a1f46e07e4949aeea19e25",
            "file": "projects/web-components/src/components/others/block-ui/block-ui.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-block-ui",
            "styleUrls": [
                "./block-ui.component.scss"
            ],
            "styles": [],
            "template": "<p-blockUI\n  [blocked]=\"blocked\"\n  [target]=\"target\">\n  <i class=\"freud-icon freud-icon-lock\" style=\"font-size: 24px\"></i>\n</p-blockUI>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "blocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-block-ui',\n  template: `\n    <p-blockUI\n      [blocked]=\"blocked\"\n      [target]=\"target\">\n      <i class=\"freud-icon freud-icon-lock\" style=\"font-size: 24px\"></i>\n    </p-blockUI>\n  `,\n  styleUrls: ['./block-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-block-ui',\n  }\n})\nexport class FreudBlockUIComponent {\n\n  @Input() blocked: boolean = false;\n  @Input() target!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n//.p-component-overlay.p-blockui {\r\n//  background-color: $neutral-color-dark-03;\r\n//}\r\n//\r\n//.p-component-overlay-enter {\r\n//  //animation: unset;\r\n//}\r\n",
                    "styleUrl": "./block-ui.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBreadcrumbComponent",
            "id": "component-FreudBreadcrumbComponent-8a79666a2ab106b1d80c342112d19a004b4ddcb94f50acc642cc53a45a0f92ef4b288392032603fc1f358f3c53ff20e00e94cf639f2b13bdb8961dc48fe57971",
            "file": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "template": "<p-breadcrumb\n  [model]=\"items\"\n  [home]=\"home\"\n  styleClass=\"freud-typography h6RegularAuto\"\n  (onItemClick)=\"onItemClick.emit($event)\"></p-breadcrumb>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "home",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FreudMenuItem",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\n\n@Component({\n  selector: 'freud-breadcrumb',\n  template: `\n    <p-breadcrumb\n      [model]=\"items\"\n      [home]=\"home\"\n      styleClass=\"freud-typography h6RegularAuto\"\n      (onItemClick)=\"onItemClick.emit($event)\"></p-breadcrumb>\n  `,\n  styleUrls: ['./breadcrumb.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-breadcrumb',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudBreadcrumbComponent {\n  @Input() items!: FreudMenuItem[];\n  @Input() home!: FreudMenuItem;\n  @Input() bgColor: boolean = false;\n  @Output() onItemClick: EventEmitter<any> = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-breadcrumb:not(.freud-bgcolor) {\r\n  .p-breadcrumb ul li.p-breadcrumb-chevron {\r\n    font-size: $font-size-xxxs;\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon, .p-breadcrumb ul li .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n}\r\n.freud-breadcrumb.freud-bgcolor {\r\n  .p-breadcrumb ul li.p-breadcrumb-chevron {\r\n    font-size: $font-size-xxxs;\r\n    color: $neutral-color-white;\r\n  }\r\n\r\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon, .p-breadcrumb ul li .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.p-breadcrumb {\r\n  background: transparent;\r\n  border: none;\r\n}\r\n\r\n.p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon {\r\n  font-size: $font-size-sm;\r\n  line-height: $font-size-md;\r\n}\r\n\r\n.p-breadcrumb ul li .p-menuitem-link:focus {\r\n  box-shadow: unset;\r\n}\r\n",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudButtonComponent",
            "id": "component-FreudButtonComponent-41f44151729f8cd17dd5b6908705b1e8438d917d06e493c3eae630ca9a310eed4e4299de9b471c33556875f5da51800a36cead775cfa0cb6dcb9d98463fd5876",
            "file": "projects/web-components/src/components/buttons/button/button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<p-button [disabled]=\"disabled\" [loading]=\"loading\" [icon]=\"icon\" [type]=\"type\">\n  <div class=\"button-content\"><ng-content></ng-content></div>\n</p-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "buttonColors",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "buttonSizes",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\ntype buttonSizes = 'sm' | 'md' | 'lg';\r\ntype buttonColors = 'primary' | 'secondary' | 'ghost';\r\n\r\n@Component({\r\n  selector: 'freud-button',\r\n  styleUrls: ['./button.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-button [disabled]=\"disabled\" [loading]=\"loading\" [icon]=\"icon\" [type]=\"type\">\r\n      <div class=\"button-content\"><ng-content></ng-content></div>\r\n    </p-button>\r\n  `,\r\n  host: {\r\n    class: 'freud-btn',\r\n    '[class.freud-btn-color-primary]': `!['secondary', 'ghost'].includes(color)`,\r\n    '[class.freud-btn-color-secondary]': `color === 'secondary'`,\r\n    '[class.freud-btn-color-ghost]': `color === 'ghost'`,\r\n\r\n    '[class.freud-btn-bgcolor]': `bgColor`,\r\n    '[class.freud-btn-loading]': `loading`,\r\n\r\n    '[class.freud-btn-size-small]': `size === 'sm'`,\r\n    '[class.freud-btn-size-medium]': `size === 'md'`,\r\n    '[class.freud-btn-size-large]': `size === 'lg'`,\r\n  }\r\n})\r\nexport class FreudButtonComponent {\r\n\r\n  @Input() size: buttonSizes = 'md';\r\n  @Input() color: buttonColors = 'primary';\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() type!: string;\r\n  @Input() loading = false;\r\n  @Input() icon!: string;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-btn:not(.freud-btn-bgcolor) {\r\n  &.freud-btn-color-primary {\r\n    .p-button {\r\n      background-color:  $brand-color-pure;\r\n      border-color: $brand-color-pure;\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-secondary {\r\n    $freud-btn-color: $brand-color-pure;\r\n    $freud-btn-border: $brand-color-pure;\r\n    .p-button {\r\n      background-color: transparent;\r\n      border-color: $freud-btn-border;\r\n      color: $freud-btn-color;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-ghost {\r\n    $freud-btn-background: transparent;\r\n    $freud-btn-color: $brand-color-pure;\r\n    $freud-btn-border: transparent;\r\n    .p-button {\r\n      background-color: $freud-btn-background;\r\n      border-color: $freud-btn-border;\r\n      color: $freud-btn-color;\r\n    }\r\n  }\r\n\r\n  .p-button:enabled:hover {\r\n    background: $brand-color-01;\r\n    border-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n.freud-btn.freud-btn-bgcolor {\r\n  &.freud-btn-color-primary {\r\n    .p-button {\r\n      background-color: $neutral-color-white;\r\n      border-color: $neutral-color-white;\r\n      color: $brand-color-pure;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-secondary {\r\n    .p-button {\r\n      background-color: transparent;\r\n      border-color: $neutral-color-white;\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-ghost {\r\n    .p-button {\r\n      background-color: transparent;\r\n      border-color: transparent;\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  .p-button[disabled] {\r\n    opacity: $opacity-level-5;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-button:enabled:hover {\r\n    background: $brand-color-03;\r\n    border-color: $brand-color-03;\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n\r\n.freud-btn .p-button {\r\n  font-family: $font-family-base;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: $border-radius-md;\r\n  @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  &[disabled] {\r\n    opacity: $opacity-level-5;\r\n  }\r\n  &:focus {\r\n    box-shadow: unset;\r\n  }\r\n  &.p-button-icon-only {\r\n    width: auto;\r\n  }\r\n}\r\n\r\n\r\n.freud-btn-size-small {\r\n  .p-button {\r\n    font-size: $font-size-xxs;\r\n    padding: 0 $spacing-size-nano;\r\n    height: 32px;\r\n  }\r\n}\r\n\r\n.freud-btn-size-medium {\r\n  .p-button {\r\n    padding: 0 $spacing-size-xxxs;\r\n    height: 40px;\r\n  }\r\n}\r\n\r\n.freud-btn-size-large {\r\n  .p-button {\r\n    padding: 0 $spacing-size-xxs;\r\n    height: 48px;\r\n  }\r\n}\r\n\r\n.button-content:not(:empty) + .p-button-icon {\r\n  margin-left: $spacing-size-xxxs;\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudCalendarComponent",
            "id": "component-FreudCalendarComponent-9da028dcd53f1df2c63fffeae03504b41a14ea66754572543abb6fb06f6960b3cba79e9fc095830113b63cb3239adebf5fd6bd9bc73e8ba386c1a68d0edd2f69",
            "file": "projects/web-components/src/components/others/calendar/calendar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "template": "<p-calendar\n  [id]=\"id\"\n  [selectionMode]=\"selectionMode\"\n  [(ngModel)]=\"value\"\n  [dateFormat]=\"dateFormat\"\n  [inline]=\"inline\"\n  [showOtherMonths]=\"showOtherMonths\"\n  [selectOtherMonths]=\"selectOtherMonths\"\n  [showWeek]=\"showWeek\"\n  [view]=\"view\"\n  [yearNavigator]=\"yearNavigator\"\n  [yearRange]=\"yearRange\"\n  [defaultDate]=\"defaultDate\"\n  [showTime]=\"showTime\"\n  [hourFormat]=\"hourFormat\"\n  [disabled]=\"disabled\"\n  [timeOnly]=\"timeOnly\"\n  [required]=\"required\"\n  [maxDate]=\"maxDate\"\n  [minDate]=\"minDate\"\n  (ngModelChange)=\"modelValueChange()\"\n  (onSelect)=\"onSelect.emit($event)\"\n  (onBlur)=\"onBlur.emit($event)\"\n  (onFocus)=\"onFocus.emit($event)\"\n  (onClose)=\"onClose.emit($event)\"\n  (onShow)=\"onShow.emit($event)\"\n  (onTodayClick)=\"onTodayClick.emit($event)\"\n  (onClearClick)=\"onClearClick.emit($event)\"\n>\n</p-calendar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dateFormat",
                    "defaultValue": "'dd/mm/yy'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hourFormat",
                    "defaultValue": "'24'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "\"12\" | \"24\"",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "\"single\" | \"multiple\" | \"range\"",
                    "decorators": []
                },
                {
                    "name": "selectOtherMonths",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showOtherMonths",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTime",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showWeek",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "timeOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "view",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"date\" | \"month\"",
                    "decorators": []
                },
                {
                    "name": "yearNavigator",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "yearRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClearClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onTodayClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 88
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 90
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 117,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-calendar',\n  template: `\n    <p-calendar\n      [id]=\"id\"\n      [selectionMode]=\"selectionMode\"\n      [(ngModel)]=\"value\"\n      [dateFormat]=\"dateFormat\"\n      [inline]=\"inline\"\n      [showOtherMonths]=\"showOtherMonths\"\n      [selectOtherMonths]=\"selectOtherMonths\"\n      [showWeek]=\"showWeek\"\n      [view]=\"view\"\n      [yearNavigator]=\"yearNavigator\"\n      [yearRange]=\"yearRange\"\n      [defaultDate]=\"defaultDate\"\n      [showTime]=\"showTime\"\n      [hourFormat]=\"hourFormat\"\n      [disabled]=\"disabled\"\n      [timeOnly]=\"timeOnly\"\n      [required]=\"required\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      (ngModelChange)=\"modelValueChange()\"\n      (onSelect)=\"onSelect.emit($event)\"\n      (onBlur)=\"onBlur.emit($event)\"\n      (onFocus)=\"onFocus.emit($event)\"\n      (onClose)=\"onClose.emit($event)\"\n      (onShow)=\"onShow.emit($event)\"\n      (onTodayClick)=\"onTodayClick.emit($event)\"\n      (onClearClick)=\"onClearClick.emit($event)\"\n    >\n    </p-calendar>\n  `,\n  styleUrls: ['./calendar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-calendar',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudCalendarComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudCalendarComponent implements ControlValueAccessor {\n  @Input() dateFormat: string = 'dd/mm/yy';\n  @Input() showTime: boolean = true\n  @Input() hourFormat: '12' | '24' = '24';\n  @Input() selectionMode: \"single\" | \"multiple\" | \"range\" = 'single';\n  @Input() view: 'date' | 'month' = 'date';\n  @Input() inline: boolean = true;\n  @Input() yearRange!: string;\n\n  @Input() yearNavigator: boolean = false;\n  @Input() timeOnly: boolean = false;\n  @Input() showOtherMonths: boolean = true;\n  @Input() selectOtherMonths: boolean = true;\n  @Input() showWeek: boolean = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n\n  @Input() minDate!: Date;\n  @Input() maxDate!: Date;\n  @Input() defaultDate!: Date;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onSelect: EventEmitter<any> = new EventEmitter();\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\n  @Output() onTodayClick: EventEmitter<any> = new EventEmitter();\n  @Output() onClearClick: EventEmitter<any> = new EventEmitter();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 96,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 92
                    }
                }
            }
        },
        {
            "name": "FreudCardComponent",
            "id": "component-FreudCardComponent-fa42908fc74c6248b755deca592648db1dcea2dc72b09b1b091ad5c0d0bf90ed8bead12e160a3ad7bed755eb775132879ffc6748d795db0e1a80436e9063ea8f",
            "file": "projects/web-components/src/components/others/card/card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "template": "<p-card\n  #cardElement\n  [header]=\"header\"\n  [subheader]=\"subheader\"\n  [style]=\"style\">\n  <ng-template pTemplate=\"header\">\n    <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n  </ng-template>\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"footer\">\n    <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n  </ng-template>\n</p-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subheader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cardElement'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getBlockableElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Card } from \"primeng/card\";\n\n@Component({\n  selector: 'freud-card',\n  template: `\n    <p-card\n      #cardElement\n      [header]=\"header\"\n      [subheader]=\"subheader\"\n      [style]=\"style\">\n      <ng-template pTemplate=\"header\">\n        <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n      </ng-template>\n      <ng-content></ng-content>\n      <ng-template pTemplate=\"footer\">\n        <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n      </ng-template>\n    </p-card>\n  `,\n  styleUrls: ['./card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-card',\n  }\n})\nexport class FreudCardComponent {\n\n  @Input() header!: string;\n  @Input() subheader!: string;\n  @Input() style!: string;\n  @ViewChild('cardElement') cardElement!: Card;\n\n  getBlockableElement() {\n    return this.cardElement.getBlockableElement();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-card {\r\n  .p-card {\r\n    color: $neutral-color-dark-03;\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n  .p-card .p-card-title {\r\n    @include typography($font-size-md, $font-weight-bold, 24px);\r\n  }\r\n\r\n  .p-card .p-card-content {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-card .p-card-subtitle {\r\n    color: $neutral-color-dark-02;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-card .p-card-footer {\r\n    padding: 0;\r\n  }\r\n\r\n  .p-card-header {\r\n    img {\r\n      border-top-left-radius: $border-radius-md;\r\n      border-top-right-radius: $border-radius-md;\r\n    }\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudCascadeSelectComponent",
            "id": "component-FreudCascadeSelectComponent-979dedd70cab2496350eb1ef66c6d6b9c231ad939f21ca16edd6262ba524419c31c51d6dc96cd5a1d7375d43e841beee9f6eb88186bbbb90992896ad2719ad9e",
            "file": "projects/web-components/src/components/forms/cascade-select/cascade-select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCascadeSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-cascade-select",
            "styleUrls": [
                "./cascade-select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-cascadeSelect\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [dataKey]=\"dataKey\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    (onGroupChange)=\"onGroupChange.emit($event)\"\n    (onBeforeShow)=\"onBeforeShow.emit($event)\"\n    (onBeforeHide)=\"onBeforeHide.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n\n  ></p-cascadeSelect>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBeforeHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onBeforeShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onGroupChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-cascade-select',\r\n  styleUrls: ['./cascade-select.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-cascadeSelect\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [dataKey]=\"dataKey\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [options]=\"options\"\r\n        (onGroupChange)=\"onGroupChange.emit($event)\"\r\n        (onBeforeShow)=\"onBeforeShow.emit($event)\"\r\n        (onBeforeHide)=\"onBeforeHide.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\"\r\n        (onShow)=\"onShow.emit($event)\"\r\n\r\n      ></p-cascadeSelect>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-cascade-select',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudCascadeSelectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudCascadeSelectComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() options!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() dataKey!: string;\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren!: string[];\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onGroupChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBeforeHide: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBeforeShow: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-cascade-select:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-cascade-select.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-cascade-select {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-cascadeselect {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-cascadeselect:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-cascadeselect:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-cascadeselect .p-cascadeselect-panel {\r\n    border-radius: $border-radius-md;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item {\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $brand-color-pure;\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item:focus,\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item .p-cascadeselect-item-content:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./cascade-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 115,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 111
                    }
                }
            }
        },
        {
            "name": "FreudCheckboxComponent",
            "id": "component-FreudCheckboxComponent-ecf67919a89a6a4bbf9dca756342e6dd89a79d1fa30819e87befd54815e1fe6d9efbb846a16195649bc311fd23b7da8506cd6c3f36cc7246b6f088bc3f1c757b",
            "file": "projects/web-components/src/components/forms/checkbox/checkbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCheckboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "template": "<p-checkbox\n  [id]=\"id\"\n  [class.ng-invalid]=\"invalid\"\n  [class.ng-dirty]=\"invalid\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  [trueValue]=\"trueValue\"\n  [falseValue]=\"falseValue\"\n  [name]=\"name\"\n  [binary]=\"binary\"\n  [label]=\"label\"\n  [checkboxIcon]=\"checkboxIcon\"\n  [inputId]=\"inputId\"\n  (onChange)=\"onChange.emit($event)\">\n</p-checkbox>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "binary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "checkboxIcon",
                    "defaultValue": "'freud-icon freud-icon-check'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-checkbox',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-checkbox\r\n      [id]=\"id\"\r\n      [class.ng-invalid]=\"invalid\"\r\n      [class.ng-dirty]=\"invalid\"\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [required]=\"required\"\r\n      [trueValue]=\"trueValue\"\r\n      [falseValue]=\"falseValue\"\r\n      [name]=\"name\"\r\n      [binary]=\"binary\"\r\n      [label]=\"label\"\r\n      [checkboxIcon]=\"checkboxIcon\"\r\n      [inputId]=\"inputId\"\r\n      (onChange)=\"onChange.emit($event)\">\r\n    </p-checkbox>\r\n  `,\r\n  host: {\r\n    class: 'freud-checkbox',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudCheckboxComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudCheckboxComponent implements ControlValueAccessor {\r\n  @Input() invalid: boolean = false;\r\n  @Input() binary: boolean = true;\r\n  @Input() disabled = false;\r\n  @Input() label!: string;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() name!: string;\r\n  @Input() falseValue: any = false;\r\n  @Input() trueValue: any = true;\r\n\r\n  @Input() checkboxIcon: string = 'freud-icon freud-icon-check';\r\n  @Input() inputId!: string;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: any;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-checkbox:not(.freud-bgcolor) {\r\n  .p-checkbox-label {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-checkbox.freud-bgcolor {\r\n  .p-checkbox-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-checkbox {\r\n  .p-checkbox .p-checkbox-box.p-highlight,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-focus {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-focus {\r\n    box-shadow: $shadow-focused-zen !important;\r\n  }\r\n  .p-checkbox-label {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    font-family: $font-family-base;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            }
        },
        {
            "name": "FreudConfirmationDialogExampleComponent",
            "id": "component-FreudConfirmationDialogExampleComponent-790f03a1cfbcce123102c9df67836ba3cc01f8e4da679ab4e65c694a40dce4af022357f19500caf94b15d0aa319001c272a80bfcdb11f17eb17dc802d1b734af",
            "file": "stories/modal-and-popover/modal-and-popover-examples/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-dialog-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-confirm-dialog></freud-confirm-dialog>\n<freud-button (click)=\"confirm()\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudConfirmationService } from \"../../../projects/web-components/src/services/confirmation.service\";\n\n@Component({\n  selector: 'freud-confirm-dialog-example',\n  template: `\n    <freud-confirm-dialog></freud-confirm-dialog>\n    <freud-button (click)=\"confirm()\">Clique aqui!</freud-button>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudConfirmationDialogExampleComponent {\n\n  constructor(private confirmationService: FreudConfirmationService) {}\n\n  confirm() {\n    this.confirmationService.confirm({\n      header: 'Confirme',\n      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      acceptLabel: 'Aceitar',\n      rejectLabel: 'Rejeitar',\n\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudConfirmDialogComponent",
            "id": "component-FreudConfirmDialogComponent-ded65c589a40b410704d19e84bd914bb254f45f5c2a95b329699644d2f1133e0e1097360c8c819111b102786c6bccdfd5c1f7728278fde8792796fe7c6d7b0ff",
            "file": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "template": "<p-confirmDialog #cd\n  icon=\"freud-icon freud-icon-exclamation-triangle\">\n  <ng-template pTemplate=\"footer\">\n    <freud-button [color]=\"'secondary'\" (click)=\"cd.reject()\">{{cd.rejectButtonLabel}}</freud-button>\n    <freud-button (click)=\"cd.accept()\">{{cd.acceptButtonLabel}}</freud-button>\n  </ng-template>\n</p-confirmDialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-confirm-dialog',\n  template: `\n    <p-confirmDialog #cd\n      icon=\"freud-icon freud-icon-exclamation-triangle\">\n      <ng-template pTemplate=\"footer\">\n        <freud-button [color]=\"'secondary'\" (click)=\"cd.reject()\">{{cd.rejectButtonLabel}}</freud-button>\n        <freud-button (click)=\"cd.accept()\">{{cd.acceptButtonLabel}}</freud-button>\n      </ng-template>\n    </p-confirmDialog>\n  `,\n  styleUrls: ['./confirm-dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-confirm-dialog'\n  }\n})\nexport class FreudConfirmDialogComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-confirm-dialog {\r\n  .p-dialog.p-confirm-dialog {\r\n    max-width: 700px;\r\n    border-radius: 8px;\r\n  }\r\n  .p-dialog-footer {\r\n    display: flex;\r\n    place-content: flex-end;\r\n  }\r\n\r\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-icon {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-message {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dialog .p-dialog-header .p-dialog-title, .p-dialog .p-dialog-header {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\r\n    border-top-right-radius: 8px;\r\n    border-top-left-radius: 8px;\r\n  }\r\n  .p-dialog .p-dialog-footer {\r\n    border-bottom-right-radius: 8px;\r\n    border-bottom-left-radius: 8px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmPopupComponent",
            "id": "component-FreudConfirmPopupComponent-f751279afdca862af3c929947822d8eb469520de5b6a1ad9c7c8fb1ed12512ea86cb06ce3b125924393db9d3380f25134a65a8663a8677fd69a31211b5314f24",
            "file": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-popup",
            "styleUrls": [
                "./confirm-popup.component.scss"
            ],
            "styles": [],
            "template": "<p-confirmPopup></p-confirmPopup>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-confirm-popup',\n  template: `\n    <p-confirmPopup></p-confirmPopup>\n  `,\n  styleUrls: ['./confirm-popup.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-confirm-popup'\n  }\n})\nexport class FreudConfirmPopupComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-confirm-dialog {\r\n  .p-dialog.p-confirm-dialog {\r\n    max-width: 700px;\r\n    border-radius: 8px;\r\n  }\r\n  .p-dialog-footer {\r\n    display: flex;\r\n    place-content: flex-end;\r\n  }\r\n\r\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-icon {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-message {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dialog .p-dialog-header .p-dialog-title, .p-dialog .p-dialog-header {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\r\n    border-top-right-radius: 8px;\r\n    border-top-left-radius: 8px;\r\n  }\r\n  .p-dialog .p-dialog-footer {\r\n    border-bottom-right-radius: 8px;\r\n    border-bottom-left-radius: 8px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./confirm-popup.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmPopupExampleComponent",
            "id": "component-FreudConfirmPopupExampleComponent-d19e59005925b9019f29cb7125faecd52c0d875c2a9a3a6a605d007e25b8248e603c5fb0a6cae318ce4494605d7bd6771039319bd18255d7412c5085afe94b13",
            "file": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-popup-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-confirm-popup></freud-confirm-popup>\n<freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudConfirmationService } from \"../../../../projects/web-components/src/services/confirmation.service\";\n\n@Component({\n  selector: 'freud-confirm-popup-example',\n  template: `\n    <freud-confirm-popup></freud-confirm-popup>\n    <freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudConfirmPopupExampleComponent {\n\n  constructor(private confirmationService: FreudConfirmationService) {}\n\n  confirm(event: any) {\n    this.confirmationService.confirm({\n      target: event.target,\n      header: 'Confirme',\n      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      acceptLabel: 'Aceitar',\n      rejectLabel: 'Rejeitar',\n\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudDividerComponent",
            "id": "component-FreudDividerComponent-881befdc199dcca2fecb22c76acec3b98d251db47e8950d5519069b050c052a3cf2433ceef07e84d591beacb6f840332ba2e0e3c396e490c7e401b8da9f06564",
            "file": "projects/web-components/src/components/others/divider/divider.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-divider",
            "styleUrls": [
                "./divider.component.scss"
            ],
            "styles": [],
            "template": "<p-divider\n  [type]=\"type\"\n  [layout]=\"layout\"\n  [align]=\"align\"\n  [style]=\"style\">\n  <ng-content></ng-content>\n</p-divider>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "\"left\" | \"center\" | \"right\" | \"top\" | \"bottom\"",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'solid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"dashed\" | \"dotted\" | \"solid\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-divider',\n  template: `\n    <p-divider\n      [type]=\"type\"\n      [layout]=\"layout\"\n      [align]=\"align\"\n      [style]=\"style\">\n      <ng-content></ng-content>\n    </p-divider>\n  `,\n  styleUrls: ['./divider.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-divider',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudDividerComponent {\n\n  @Input() type: \"dashed\" | \"dotted\" | 'solid' = 'solid';\n  @Input() bgColor: boolean = false;\n  @Input() style!: string;\n  @Input() layout: 'horizontal' | 'vertical' = 'horizontal';\n  @Input() align!: \"left\" | \"center\" | \"right\" | \"top\" | \"bottom\";\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-divider {\r\n  .p-divider.p-divider-horizontal .p-divider-content,\r\n  .p-divider.p-divider-vertical .p-divider-content {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n}\r\n\r\n.freud-divider:not(.freud-bgcolor) {\r\n  .p-divider.p-divider-vertical .p-divider-content,\r\n  .p-divider.p-divider-horizontal .p-divider-content {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n  .p-divider.p-divider-horizontal:before {\r\n    border-top-color: $neutral-color-light-03;\r\n  }\r\n}\r\n\r\n.freud-divider.freud-bgcolor {\r\n  .p-divider.p-divider-vertical .p-divider-content,\r\n  .p-divider.p-divider-horizontal .p-divider-content {\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-divider.p-divider-horizontal:before {\r\n    border-top-color: $neutral-color-light-02;\r\n  }\r\n\r\n  .p-divider.p-divider-vertical .p-divider-content,\r\n  .p-divider.p-divider-horizontal .p-divider-content {\r\n    background-color: $brand-color-06;\r\n  }\r\n}\r\n",
                    "styleUrl": "./divider.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudFileUploadComponent",
            "id": "component-FreudFileUploadComponent-68c2e1d7ef880f98af21633012fb0e688c9e7f684077c834a78fa6329b782df677de51e0d82b7226a29f1b47fed9f1a4e2409c1867d2754872a21f50189adb75",
            "file": "projects/web-components/src/components/media/fille-upload/file-upload.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "template": "<p-fileUpload [name]=\"name\"\n              [url]=\"url\"\n              [auto]=\"auto\"\n              [accept]=\"accept\"\n              [multiple]=\"multiple\"\n              [method]=\"method\"\n              [fileLimit]=\"fileLimit\"\n              [chooseLabel]=\"chooseLabel\"\n              [uploadLabel]=\"uploadLabel\"\n              [cancelLabel]=\"cancelLabel\"\n              [chooseIcon]=\"chooseIcon\"\n              [uploadIcon]=\"uploadIcon\"\n              [cancelIcon]=\"cancelIcon\"\n              [withCredentials]=\"withCredentials\"\n              [mode]=\"mode\"\n              [customUpload]=\"customUpload\"\n              [showUploadButton]=\"showUploadButton\"\n              [showCancelButton]=\"showCancelButton\"\n              [headers]=\"headers\"\n              [invalidFileSizeMessageSummary]=\"invalidFileSizeMessageSummary\"\n              [invalidFileSizeMessageDetail]=\"invalidFileSizeMessageDetail\"\n              [invalidFileTypeMessageSummary]=\"invalidFileTypeMessageSummary\"\n              [invalidFileLimitMessageDetail]=\"invalidFileLimitMessageDetail\"\n              [invalidFileLimitMessageSummary]=\"invalidFileLimitMessageSummary\"\n              [invalidFileTypeMessageDetail]=\"invalidFileTypeMessageDetail\"\n              (onBeforeUpload)=\"onBeforeUpload.emit($event)\"\n              (onSend)=\"onSend.emit($event)\"\n              (onError)=\"onError.emit($event)\"\n              (onRemove)=\"onRemove.emit($event)\"\n              (onSelect)=\"onSelect.emit($event)\"\n              (onProgress)=\"onProgress.emit($event)\"\n              (uploadHandler)=\"uploadHandler.emit($event)\"\n              (onUpload)=\"onUpload.emit($event)\">\n</p-fileUpload>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "auto",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cancelIcon",
                    "defaultValue": "'freud-icon freud-icon-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cancelLabel",
                    "defaultValue": "'Cancelar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseLabel",
                    "defaultValue": "'Escolha'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customUpload",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fileLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "HttpHeaders",
                    "decorators": []
                },
                {
                    "name": "invalidFileLimitMessageDetail",
                    "defaultValue": "'limite é de {0} no máximo.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileLimitMessageSummary",
                    "defaultValue": "'Número máximo de arquivos excedido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileSizeMessageDetail",
                    "defaultValue": "'o tamanho máximo de upload é {0}.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileSizeMessageSummary",
                    "defaultValue": "'{0}: Tamanho do arquivo inválido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileTypeMessageDetail",
                    "defaultValue": "'tipos de arquivo permitidos: {0}.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileTypeMessageSummary",
                    "defaultValue": "'{0}: tipo de arquivo inválido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "method",
                    "defaultValue": "'post'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"post\" | \"put\"",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'advanced'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"advanced\" | \"basic\"",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'file[]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCancelButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showUploadButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "uploadIcon",
                    "defaultValue": "'freud-icon freud-icon-upload'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uploadLabel",
                    "defaultValue": "'Enviar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "withCredentials",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBeforeUpload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter"
                },
                {
                    "name": "onError",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "onProgress",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSend",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onUpload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "uploadHandler",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, EventEmitter, Output } from '@angular/core';\nimport { HttpHeaders } from \"@angular/common/http\";\n\n\n@Component({\n  selector: 'freud-file-upload',\n  template: `\n    <p-fileUpload [name]=\"name\"\n                  [url]=\"url\"\n                  [auto]=\"auto\"\n                  [accept]=\"accept\"\n                  [multiple]=\"multiple\"\n                  [method]=\"method\"\n                  [fileLimit]=\"fileLimit\"\n                  [chooseLabel]=\"chooseLabel\"\n                  [uploadLabel]=\"uploadLabel\"\n                  [cancelLabel]=\"cancelLabel\"\n                  [chooseIcon]=\"chooseIcon\"\n                  [uploadIcon]=\"uploadIcon\"\n                  [cancelIcon]=\"cancelIcon\"\n                  [withCredentials]=\"withCredentials\"\n                  [mode]=\"mode\"\n                  [customUpload]=\"customUpload\"\n                  [showUploadButton]=\"showUploadButton\"\n                  [showCancelButton]=\"showCancelButton\"\n                  [headers]=\"headers\"\n                  [invalidFileSizeMessageSummary]=\"invalidFileSizeMessageSummary\"\n                  [invalidFileSizeMessageDetail]=\"invalidFileSizeMessageDetail\"\n                  [invalidFileTypeMessageSummary]=\"invalidFileTypeMessageSummary\"\n                  [invalidFileLimitMessageDetail]=\"invalidFileLimitMessageDetail\"\n                  [invalidFileLimitMessageSummary]=\"invalidFileLimitMessageSummary\"\n                  [invalidFileTypeMessageDetail]=\"invalidFileTypeMessageDetail\"\n                  (onBeforeUpload)=\"onBeforeUpload.emit($event)\"\n                  (onSend)=\"onSend.emit($event)\"\n                  (onError)=\"onError.emit($event)\"\n                  (onRemove)=\"onRemove.emit($event)\"\n                  (onSelect)=\"onSelect.emit($event)\"\n                  (onProgress)=\"onProgress.emit($event)\"\n                  (uploadHandler)=\"uploadHandler.emit($event)\"\n                  (onUpload)=\"onUpload.emit($event)\">\n    </p-fileUpload>\n  `,\n  styleUrls: ['./file-upload.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-file-upload',\n  }\n})\nexport class FreudFileUploadComponent {\n  @Input() name: string = 'file[]';\n  @Input() url!: string;\n  @Input() accept!: string;\n  @Input() auto: boolean = false;\n  @Input() multiple: boolean = false;\n  @Input() withCredentials: boolean = false;\n  @Input() method: 'post' | 'put' = 'post';\n  @Input() mode: 'advanced' | 'basic' = 'advanced';\n  @Input() fileLimit!: number;\n  @Input() customUpload: boolean = false;\n  @Input() showUploadButton: boolean = true;\n  @Input() showCancelButton: boolean = true;\n  @Input() headers!: HttpHeaders;\n  @Input() chooseIcon: string = 'freud-icon freud-icon-plus';\n  @Input() uploadIcon: string = 'freud-icon freud-icon-upload';\n  @Input() cancelIcon: string = 'freud-icon freud-icon-times';\n  @Input() chooseLabel: string = 'Escolha';\n  @Input() uploadLabel: string = 'Enviar';\n  @Input() cancelLabel: string = 'Cancelar';\n  @Input() invalidFileSizeMessageSummary: string = '{0}: Tamanho do arquivo inválido, ';\n  @Input() invalidFileSizeMessageDetail: string = 'o tamanho máximo de upload é {0}.';\n  @Input() invalidFileTypeMessageSummary: string = '{0}: tipo de arquivo inválido, ';\n  @Input() invalidFileLimitMessageDetail: string = 'limite é de {0} no máximo.';\n  @Input() invalidFileLimitMessageSummary: string = 'Número máximo de arquivos excedido, ';\n  @Input() invalidFileTypeMessageDetail: string = 'tipos de arquivo permitidos: {0}.';\n  @Output() onUpload = new EventEmitter();\n  @Output() uploadHandler = new EventEmitter();\n  @Output() onBeforeUpload = new EventEmitter();\n  @Output() onSend = new EventEmitter();\n  @Output() onError = new EventEmitter();\n  @Output() onRemove = new EventEmitter();\n  @Output() onSelect = new EventEmitter();\n  @Output() onProgress = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-file-upload {\r\n  .p-fileupload .p-fileupload-buttonbar {\r\n    border: 1px solid $neutral-color-light-03;\r\n    background-color: 1px solid $neutral-color-light-03;\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n  .p-fileupload .p-fileupload-content {\r\n    border: 1px solid $neutral-color-light-03;\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n  .p-button {\r\n    background-color:  $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n    padding: 0 $spacing-size-xxxs;\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n    &[disabled] {\r\n      opacity: $opacity-level-5;\r\n    }\r\n    &:focus {\r\n      box-shadow: unset;\r\n    }\r\n  }\r\n\r\n  .p-button:enabled:hover, .p-fileupload-choose:not(.p-disabled):hover {\r\n    background: $brand-color-01;\r\n    border-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n}\r\n",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudGalleryComponent",
            "id": "component-FreudGalleryComponent-4e39a53dc2dcbe9d62dac336ab6995a97f6833f372e18121dc84ae87450d37f391852c810acc1f92e9f995216ccb05a55056cd2e7b4bfd71b878467ea44f8297",
            "file": "projects/web-components/src/components/media/gallery/gallery.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-gallery",
            "styleUrls": [
                "./gallery.component.scss"
            ],
            "styles": [],
            "template": "<p-galleria [value]=\"images\" [numVisible]=\"10\" [responsiveOptions]=\"responsiveOptions\" [showThumbnails]=\"showThumbnails\" [showIndicators]=\"!showThumbnails\">\n  <ng-template pTemplate=\"item\" let-item>\n    <img [src]=\"item.previewImageSrc\" style=\"width: 100%;\" />\n  </ng-template>\n  <ng-template pTemplate=\"thumbnail\" let-item>\n    <div class=\"p-grid p-nogutter p-justify-center\">\n      <img [src]=\"item.thumbnailImageSrc\" style=\"width: 80px;height: 60px\"/>\n    </div>\n  </ng-template>\n</p-galleria>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "GalleryPhoto[]",
                    "decorators": []
                },
                {
                    "name": "responsiveOptions",
                    "defaultValue": "[\n    {\n      breakpoint: '1366px',\n      numVisible: 9\n    },\n    {\n      breakpoint: '1024px',\n      numVisible: 8\n    },\n    {\n      breakpoint: '960px',\n      numVisible: 5\n    },\n    {\n      breakpoint: '768px',\n      numVisible: 4\n    },\n    {\n      breakpoint: '560px',\n      numVisible: 2\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "showThumbnails",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { GalleryPhoto } from \"../../../api/gallery-photo.interface\";\n\n@Component({\n  selector: 'freud-gallery',\n  template: `\n    <p-galleria [value]=\"images\" [numVisible]=\"10\" [responsiveOptions]=\"responsiveOptions\" [showThumbnails]=\"showThumbnails\" [showIndicators]=\"!showThumbnails\">\n      <ng-template pTemplate=\"item\" let-item>\n        <img [src]=\"item.previewImageSrc\" style=\"width: 100%;\" />\n      </ng-template>\n      <ng-template pTemplate=\"thumbnail\" let-item>\n        <div class=\"p-grid p-nogutter p-justify-center\">\n          <img [src]=\"item.thumbnailImageSrc\" style=\"width: 80px;height: 60px\"/>\n        </div>\n      </ng-template>\n    </p-galleria>\n  `,\n  styleUrls: ['./gallery.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-gallery',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudGalleryComponent {\n  @Input() images: GalleryPhoto[] = [];\n  @Input() bgColor: boolean = false;\n  @Input() showThumbnails: boolean = true;\n\n  @Input() responsiveOptions = [\n    {\n      breakpoint: '1366px',\n      numVisible: 9\n    },\n    {\n      breakpoint: '1024px',\n      numVisible: 8\n    },\n    {\n      breakpoint: '960px',\n      numVisible: 5\n    },\n    {\n      breakpoint: '768px',\n      numVisible: 4\n    },\n    {\n      breakpoint: '560px',\n      numVisible: 2\n    }\n  ];\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-gallery:not(.freud-bgcolor) {\r\n\r\n}\r\n.freud-gallery.freud-bgcolor {\r\n}\r\n\r\n.freud-gallery {\r\n  .p-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n  .p-galleria .p-galleria-indicators .p-galleria-indicator.p-highlight button {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-galleria .p-galleria-indicators .p-galleria-indicator button {\r\n    background-color: $neutral-color-light-03;\r\n  }\r\n  .p-galleria .p-galleria-thumbnail-container .p-galleria-thumbnail-item-content:focus {\r\n    box-shadow: 0 0 0 0.2rem $brand-color-pure;\r\n  }\r\n}\r\n",
                    "styleUrl": "./gallery.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudHeaderComponent",
            "id": "component-FreudHeaderComponent-9b7bfa49224a9e8c7e600ed32c9713e6aad67aa3da17694f47d0728a4e620326aeac2bcdb09ee372e57d3f1474480ac5f3f9e787401776aeb0091be87ec0c263",
            "file": "stories/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"header\">\n  <div class=\"container\">\n    <h2 class=\"title\">{{title}}</h2>\n    <p>{{description}}</p>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-header',\n  template: `\n    <div class=\"header\">\n      <div class=\"container\">\n        <h2 class=\"title\">{{title}}</h2>\n        <p>{{description}}</p>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./header.component.scss']\n})\nexport class FreudHeaderComponent {\n\n  @Input() title!: string;\n  @Input() description!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// TODO: Verificar o import\r\n@import '../../../tokens/dist/style/scss/_variables.scss';\r\n\r\ndiv.header {\r\n  font-family: $font-family-base;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  margin-bottom: 32px;\r\n  background: url(./bg.png) center no-repeat;\r\n  background-size: 100% 300px;\r\n  z-index: 0;\r\n\r\n  & > div {\r\n    width: 100%;\r\n    z-index: 1;\r\n  }\r\n}\r\n\r\n.container {\r\n  margin: 0 auto;\r\n  max-width: 87%;\r\n  padding-bottom: 90px;\r\n}\r\n\r\nh2.title {\r\n  align-items: center;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: 40px;\r\n  font-weight: 700;\r\n  letter-spacing: -1px;\r\n  line-height: 60px;\r\n  margin: 0 0 30px 0;\r\n  padding: 90px 0 0 0;\r\n  text-align: left;\r\n}\r\n\r\np {\r\n  color: white;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudImageComponent",
            "id": "component-FreudImageComponent-8785e43ed31f52dff59c77e889b1dba90ab76a97cf81d52b74cba1afde78ea106ae2dbcc7f649f3e4670cb8098c5ff754da4b5f3d43eefe2a57622807cf6eee0",
            "file": "projects/web-components/src/components/media/image/image.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-image",
            "styleUrls": [
                "./image.component.scss"
            ],
            "styles": [],
            "template": "<p-image\n  [width]=\"width\"\n  [height]=\"height\"\n  [src]=\"src\"\n  [alt]=\"alt\"\n  [preview]=\"preview\"\n  (onShow)=\"onShow.emit($event)\"\n  (onHide)=\"onHide.emit($event)\"></p-image>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'100px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preview",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-image',\n  template: `\n    <p-image\n      [width]=\"width\"\n      [height]=\"height\"\n      [src]=\"src\"\n      [alt]=\"alt\"\n      [preview]=\"preview\"\n      (onShow)=\"onShow.emit($event)\"\n      (onHide)=\"onHide.emit($event)\"></p-image>\n  `,\n  styleUrls: ['./image.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-image'\n  }\n})\nexport class FreudImageComponent {\n  @Input() width: string = '100%';\n  @Input() height: string = '100px';\n  @Input() alt!: string;\n  @Input() src!: string;\n  @Input() preview: boolean = false;\n  @Output() onShow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onHide: EventEmitter<void> = new EventEmitter<void>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-image {\r\n  .p-image-toolbar {\r\n    z-index: 100000;\r\n  }\r\n  .p-link:focus {\r\n    box-shadow: 0 0 0 0.2rem $brand-color-pure;\r\n  }\r\n  .p-image-preview-container:hover > .p-image-preview-indicator {\r\n    background-color: rgba(0, 0, 0, 0.64);\r\n  }\r\n  .p-image-preview-icon {\r\n    color: $neutral-color-light-01;\r\n  }\r\n  .p-image-preview {\r\n    max-height: calc(100vh - 115px);\r\n  }\r\n}\r\n",
                    "styleUrl": "./image.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudInputMaskComponent",
            "id": "component-FreudInputMaskComponent-ad18f9bde72060ff5eed2ae51571671d2b65477ba449b96a5ccaac8fd65c1aff9ae94d6229014fa5c3330c79235e0bb2c1da92657c90bf033274913b9fb56e4a",
            "file": "projects/web-components/src/components/forms/input-mask/input-mask.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputMaskComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-mask",
            "styleUrls": [
                "./input-mask.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-inputMask\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [mask]=\"mask\"\n    [unmask]=\"unmask\"\n    [slotChar]=\"slotChar\"\n    [characterPattern]=\"characterPattern\"\n    [placeholder]=\"placeholder || ''\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [autoClear]=\"false\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onInput)=\"onInput.emit($event)\"\n    (onComplete)=\"onComplete.emit($event)\"\n    (onKeydown)=\"onKeydown.emit($event)\"\n  ></p-inputMask>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mask",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "slotChar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "unmask",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onComplete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 79,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 96
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 98
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-mask',\r\n  styleUrls: ['./input-mask.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-inputMask\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [mask]=\"mask\"\r\n        [unmask]=\"unmask\"\r\n        [slotChar]=\"slotChar\"\r\n        [characterPattern]=\"characterPattern\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [autoClear]=\"false\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (onInput)=\"onInput.emit($event)\"\r\n        (onComplete)=\"onComplete.emit($event)\"\r\n        (onKeydown)=\"onKeydown.emit($event)\"\r\n      ></p-inputMask>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-mask',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputMaskComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputMaskComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() mask: string = '';\r\n  @Input() unmask: boolean = false;\r\n  @Input() slotChar: string = '';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n  @Output() onComplete: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-mask:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-mask.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-mask {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-mask.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 108,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 104
                    }
                }
            }
        },
        {
            "name": "FreudInputNumberComponent",
            "id": "component-FreudInputNumberComponent-f4f759037717e177486429e65a40cc676ab0b1c8f4424c64ee64e73fd4145d8f8b07acdc120f4ec012a44ffbb34ebe0719e68cd8c9e63d192512a1a4f7f23310",
            "file": "projects/web-components/src/components/forms/input-number/input-number.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputNumberComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-number",
            "styleUrls": [
                "./input-number.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-inputNumber\n        [id]=\"id\"\n        [inputId]=\"id\"\n        type=\"text\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n\n        [format]=\"format\"\n        [buttonLayout]=\"buttonLayout\"\n        [incrementButtonIcon]=\"incrementButtonIcon\"\n        [decrementButtonIcon]=\"decrementButtonIcon\"\n        [showButtons]=\"showButtons\"\n        [locale]=\"locale\"\n        [localeMatcher]=\"localeMatcher\"\n        [mode]=\"mode\"\n\n        [prefix]=\"prefix\"\n        [useGrouping]=\"useGrouping\"\n        [suffix]=\"suffix\"\n        [currency]=\"currency\"\n        [currencyDisplay]=\"currencyDisplay\"\n\n        [minFractionDigits]=\"minFractionDigits\"\n        [maxFractionDigits]=\"maxFractionDigits\"\n\n        [min]=\"min\"\n        [max]=\"max\"\n\n        [step]=\"step\"\n        [allowEmpty]=\"allowEmpty\"\n\n        (ngModelChange)=\"modelValueChange()\"\n        (focus)=\"onFocus.emit($event)\"\n        (blur)=\"onBlur.emit($event)\"\n        (input)=\"onInput.emit($event)\"\n        (keydown)=\"onKeydown.emit($event)\"\n      ></p-inputNumber>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowEmpty",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonLayout",
                    "defaultValue": "'stacked'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "\"stacked\" | \"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currencyDisplay",
                    "defaultValue": "\"symbol\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "decrementButtonIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "format",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "incrementButtonIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "localeMatcher",
                    "defaultValue": "'best fit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"lookup\" | \"best fit\"",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxFractionDigits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minFractionDigits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "\"decimal\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "\"decimal\" | \"currency\"",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "prefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showButtons",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "suffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useGrouping",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 134,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 142,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-number',\r\n  styleUrls: ['./input-number.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n          <p-inputNumber\r\n            [id]=\"id\"\r\n            [inputId]=\"id\"\r\n            type=\"text\"\r\n            [class.ng-invalid]=\"invalid\"\r\n            [class.ng-dirty]=\"invalid\"\r\n            [(ngModel)]=\"value\"\r\n            [placeholder]=\"placeholder || ''\"\r\n            [disabled]=\"disabled\"\r\n            [required]=\"required\"\r\n\r\n            [format]=\"format\"\r\n            [buttonLayout]=\"buttonLayout\"\r\n            [incrementButtonIcon]=\"incrementButtonIcon\"\r\n            [decrementButtonIcon]=\"decrementButtonIcon\"\r\n            [showButtons]=\"showButtons\"\r\n            [locale]=\"locale\"\r\n            [localeMatcher]=\"localeMatcher\"\r\n            [mode]=\"mode\"\r\n\r\n            [prefix]=\"prefix\"\r\n            [useGrouping]=\"useGrouping\"\r\n            [suffix]=\"suffix\"\r\n            [currency]=\"currency\"\r\n            [currencyDisplay]=\"currencyDisplay\"\r\n\r\n            [minFractionDigits]=\"minFractionDigits\"\r\n            [maxFractionDigits]=\"maxFractionDigits\"\r\n\r\n            [min]=\"min\"\r\n            [max]=\"max\"\r\n\r\n            [step]=\"step\"\r\n            [allowEmpty]=\"allowEmpty\"\r\n\r\n            (ngModelChange)=\"modelValueChange()\"\r\n            (focus)=\"onFocus.emit($event)\"\r\n            (blur)=\"onBlur.emit($event)\"\r\n            (input)=\"onInput.emit($event)\"\r\n            (keydown)=\"onKeydown.emit($event)\"\r\n          ></p-inputNumber>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-number',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputNumberComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\n\r\nexport class FreudInputNumberComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() format: boolean = true;\r\n  @Input() allowEmpty: boolean = true;\r\n  @Input() useGrouping: boolean = true;\r\n  @Input() showButtons: boolean = false;\r\n  @Input() buttonLayout: 'stacked' | 'horizontal' | 'vertical' = 'stacked';\r\n  @Input() incrementButtonIcon: string = 'freud-icon freud-icon-chevron-up';\r\n  @Input() decrementButtonIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() locale!: string;\r\n  @Input() localeMatcher: \"lookup\" | \"best fit\" = 'best fit';\r\n  @Input() mode: \"decimal\" | \"currency\" = \"decimal\";\r\n  @Input() currencyDisplay: string = \"symbol\";\r\n  @Input() currency!: string;\r\n  @Input() prefix!: string;\r\n  @Input() suffix!: string;\r\n  @Input() minFractionDigits!: number;\r\n  @Input() maxFractionDigits!: number;\r\n  @Input() min!: number;\r\n  @Input() max!: number;\r\n  @Input() step: number = 1;\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-number:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-number.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-number {\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputnumber:not(.p-inputnumber-buttons-vertical) {\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputnumber-button-group .p-inputnumber-button .freud-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .p-inputnumber-buttons-horizontal .p-inputnumber-input {\r\n    text-align: center;\r\n  }\r\n\r\n  .p-button.p-button-icon-only {\r\n    padding: 7px 0;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-button:hover {\r\n    background: $brand-color-03;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $brand-color-03;\r\n  }\r\n  .p-button {\r\n    border-radius: $border-radius-md;\r\n    background-color: $brand-color-pure;\r\n    border: 1px solid $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-number.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 124,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                }
            }
        },
        {
            "name": "FreudInputPasswordComponent",
            "id": "component-FreudInputPasswordComponent-3de3961a719c66f5984d9a37ea9a445c9acc3ab7bf8e64b1e165e44813d0c9f184e69fa45741d48cc161f9dbd8493ea6567a8f920ab7f15c5fccc60299d5f7ce",
            "file": "projects/web-components/src/components/forms/input-password/input-password.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputPasswordComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-password",
            "styleUrls": [
                "./input-password.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <p-password\n      [id]=\"id\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder || ''\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      [toggleMask]=\"toggleMask\"\n      [feedback]=\"feedback\"\n\n      [promptLabel]=\"promptLabel\"\n      [mediumRegex]=\"mediumRegex\"\n      [strongRegex]=\"strongRegex\"\n      [weakLabel]=\"weakLabel\"\n      [mediumLabel]=\"mediumLabel\"\n      [strongLabel]=\"strongLabel\"\n\n      (ngModelChange)=\"modelValueChange()\"\n      (focus)=\"onFocus.emit($event)\"\n      (blur)=\"onBlur.emit($event)\"\n      (input)=\"onInput.emit($event)\"\n      (keydown)=\"onKeydown.emit($event)\">\n        <ng-template pTemplate=\"header\">\n          <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n        </ng-template>\n        <ng-template pTemplate=\"footer\">\n          <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n        </ng-template>\n    </p-password>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "feedback",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headerLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumRegex",
                    "defaultValue": "'^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "strongRegex",
                    "defaultValue": "'^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "toggleMask",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 95
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-password',\r\n  styleUrls: ['./input-password.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n        <p-password\r\n          [id]=\"id\"\r\n          [class.ng-invalid]=\"invalid\"\r\n          [class.ng-dirty]=\"invalid\"\r\n          [(ngModel)]=\"value\"\r\n          [placeholder]=\"placeholder || ''\"\r\n          [disabled]=\"disabled\"\r\n          [required]=\"required\"\r\n          [toggleMask]=\"toggleMask\"\r\n          [feedback]=\"feedback\"\r\n\r\n          [promptLabel]=\"promptLabel\"\r\n          [mediumRegex]=\"mediumRegex\"\r\n          [strongRegex]=\"strongRegex\"\r\n          [weakLabel]=\"weakLabel\"\r\n          [mediumLabel]=\"mediumLabel\"\r\n          [strongLabel]=\"strongLabel\"\r\n\r\n          (ngModelChange)=\"modelValueChange()\"\r\n          (focus)=\"onFocus.emit($event)\"\r\n          (blur)=\"onBlur.emit($event)\"\r\n          (input)=\"onInput.emit($event)\"\r\n          (keydown)=\"onKeydown.emit($event)\">\r\n            <ng-template pTemplate=\"header\">\r\n              <ng-content select=\"[freudTemplateHeader]\"></ng-content>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"footer\">\r\n              <ng-content select=\"[freudTemplatefooter]\"></ng-content>\r\n            </ng-template>\r\n        </p-password>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-password',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputPasswordComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputPasswordComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() promptLabel!: string;\r\n  @Input() mediumRegex: string = '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).';\r\n  @Input() strongRegex: string = '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})';\r\n  @Input() weakLabel!: string;\r\n  @Input() mediumLabel!: string;\r\n  @Input() strongLabel!: string;\r\n  @Input() headerLabel!: string;\r\n  @Input() invalid: boolean = false;\r\n  @Input() toggleMask: boolean = true;\r\n  @Input() feedback: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-password:not(.freud-bgcolor) {\r\n  .freud-label {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-password.freud-bgcolor {\r\n  .freud-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-password {\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-password {\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-password-panel {\r\n    border-radius: $border-radius-md;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    color: $neutral-color-dark-03;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n\r\n  .p-password-panel .p-password-meter {\r\n    margin-bottom: 0.5rem;\r\n    background: $neutral-color-light-03;\r\n  }\r\n  .p-password-panel .p-password-meter .p-password-strength.weak {\r\n    background: $feedback-color-negative-03;\r\n  }\r\n  .p-password-panel .p-password-meter .p-password-strength.medium {\r\n    background: $feedback-color-warning-03;\r\n  }\r\n  .p-password-panel .p-password-meter .p-password-strength.strong {\r\n    background: $feedback-color-positive-03;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-password.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                }
            }
        },
        {
            "name": "FreudInputTextAreaComponent",
            "id": "component-FreudInputTextAreaComponent-83bce1ae8ee3810a3c4348da7c61956f04d0fa2fb97fe0e001c52e9a34e2760c5cc7b9f8ff6213f92cba5517df6dd7fd95cb7a49168e85cec6e628ea73b4149d",
            "file": "projects/web-components/src/components/forms/input-textarea/input-textarea.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputTextAreaComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-textarea",
            "styleUrls": [
                "./input-textarea.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <textarea\n      [id]=\"id\"\n      type=\"text\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      aria-describedby=\"{{id}}-help\"\n      [(ngModel)]=\"value\"\n      [rows]=\"rows\"\n      [cols]=\"cols\"\n      [autoResize]=\"autoResize\"\n      pInputTextarea\n      [placeholder]=\"placeholder || ''\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      (focus)=\"onFocus.emit($event)\"\n      (blur)=\"onBlur.emit($event)\"\n      (input)=\"onInput.emit($event)\"\n      (keydown)=\"onKeydown.emit($event)\"\n    ></textarea>\n  <small id=\"{{id}}-help\"\n         [class.disabled]=\"disabled\"\n         class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoResize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 104
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-textarea',\r\n  styleUrls: ['./input-textarea.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n        <textarea\r\n          [id]=\"id\"\r\n          type=\"text\"\r\n          [class.ng-invalid]=\"invalid\"\r\n          [class.ng-dirty]=\"invalid\"\r\n          aria-describedby=\"{{id}}-help\"\r\n          [(ngModel)]=\"value\"\r\n          [rows]=\"rows\"\r\n          [cols]=\"cols\"\r\n          [autoResize]=\"autoResize\"\r\n          pInputTextarea\r\n          [placeholder]=\"placeholder || ''\"\r\n          [disabled]=\"disabled\"\r\n          [required]=\"required\"\r\n          (focus)=\"onFocus.emit($event)\"\r\n          (blur)=\"onBlur.emit($event)\"\r\n          (input)=\"onInput.emit($event)\"\r\n          (keydown)=\"onKeydown.emit($event)\"\r\n        ></textarea>\r\n      <small id=\"{{id}}-help\"\r\n             [class.disabled]=\"disabled\"\r\n             class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-textarea',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputTextAreaComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputTextAreaComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() cols!: number;\r\n  @Input() rows!: number;\r\n  @Input() invalid: boolean = false;\r\n  @Input() autoResize: boolean = false;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onChange(this._value);\r\n    this.onTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onChange: any = () => { };\r\n\r\n  onTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-textarea:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-textarea.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-textarea {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-textarea.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                }
            }
        },
        {
            "name": "FreudInputTextComponent",
            "id": "component-FreudInputTextComponent-8e2480b1a971f5e73e420b0c8e194e4f85c68e028366d06fed2ab036735e629639a4be2f1f95848b1c444cc576ca22ce7b963fb1ddacfe00b9c8d72cf8b1ffae",
            "file": "projects/web-components/src/components/forms/input-text/input-text.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputTextComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-text",
            "styleUrls": [
                "./input-text.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <span [class.p-input-icon-right]=\"rightIcon\">\n      <i class=\"{{rightIcon}}\" *ngIf=\"rightIcon\"></i>\n      <input\n        [id]=\"id\"\n        type=\"text\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        pInputText\n        [(ngModel)]=\"value\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        (ngModelChange)=\"modelValueChange()\"\n        (focus)=\"onFocus.emit($event)\"\n        (blur)=\"onBlur.emit($event)\"\n        (input)=\"onInput.emit($event)\"\n        (keydown)=\"onKeydown.emit($event)\"\n      />\n    </span>\n  <small [class.disabled]=\"disabled\"\n         class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rightIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-text',\r\n  styleUrls: ['./input-text.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n        <span [class.p-input-icon-right]=\"rightIcon\">\r\n          <i class=\"{{rightIcon}}\" *ngIf=\"rightIcon\"></i>\r\n          <input\r\n            [id]=\"id\"\r\n            type=\"text\"\r\n            [class.ng-invalid]=\"invalid\"\r\n            [class.ng-dirty]=\"invalid\"\r\n            pInputText\r\n            [(ngModel)]=\"value\"\r\n            [placeholder]=\"placeholder || ''\"\r\n            [disabled]=\"disabled\"\r\n            [required]=\"required\"\r\n            (ngModelChange)=\"modelValueChange()\"\r\n            (focus)=\"onFocus.emit($event)\"\r\n            (blur)=\"onBlur.emit($event)\"\r\n            (input)=\"onInput.emit($event)\"\r\n            (keydown)=\"onKeydown.emit($event)\"\r\n          />\r\n        </span>\r\n      <small [class.disabled]=\"disabled\"\r\n             class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-text',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputTextComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputTextComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() rightIcon!: string;\r\n  @Input() invalid: boolean = false;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-text:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-text.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-text {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .p-input-icon-left>i, .p-input-icon-right>i {\r\n    margin-top: -10px;\r\n    font-size: 24px;\r\n  }\r\n\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-text.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                }
            }
        },
        {
            "name": "FreudKnobComponent",
            "id": "component-FreudKnobComponent-281034318bf89d00ad5ef943ac6d0206340afdce4a02ef1aa5affeac146781f8b279d3ac2e828e940bad73af9f37e87119bc2ff8c579cc6241841cb837664e73",
            "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-knob",
            "styleUrls": [
                "./knob.component.scss"
            ],
            "styles": [],
            "template": "<p-knob\n  [(ngModel)]=\"value\"\n  (onChange)=\"onChangeValue($event)\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [size]=\"size === 'large' ? 200 : 100\"\n  [step]=\"step\"\n  [valueColor]=\"bgColor ? 'white' : '#6732D1'\"\n  [rangeColor]=\"bgColor ? '#5127A4' : '#F0F2F5'\"\n  [textColor]=\"bgColor ? 'white' : '#6B7280'\"\n  [disabled]=\"disabled\"></p-knob>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "sizes",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChangeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';\n\ntype sizes = 'default' | 'large';\n@Component({\n  selector: 'freud-knob',\n  template: `\n    <p-knob\n      [(ngModel)]=\"value\"\n      (onChange)=\"onChangeValue($event)\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [size]=\"size === 'large' ? 200 : 100\"\n      [step]=\"step\"\n      [valueColor]=\"bgColor ? 'white' : '#6732D1'\"\n      [rangeColor]=\"bgColor ? '#5127A4' : '#F0F2F5'\"\n      [textColor]=\"bgColor ? 'white' : '#6B7280'\"\n      [disabled]=\"disabled\"></p-knob>\n  `,\n  styleUrls: ['./knob.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-knob freud-typography',\n    '[class.freud-knob-bgcolor]': `bgColor`,\n    '[class.h1Regular1-2]': `size === 'large'`,\n    '[class.h5Regular1-2]': `size === 'default'`,\n  }\n})\nexport class FreudKnobComponent {\n\n  @Input() value: number = 0;\n  @Input() max: number = 100;\n  @Input() min: number = 0;\n  @Input() step: number = 1;\n  @Input() size: sizes = 'default';\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Output() valueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  onChangeValue(value: number) {\n    this.value = value;\n    this.valueChange.emit(this.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/typography';\r\n\r\n",
                    "styleUrl": "./knob.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudListboxComponent",
            "id": "component-FreudListboxComponent-880ceaeafbfc24d5cb392147ec5d69cd71cdb92178c82ebda17bf2ac6758562c8c1d3c4ace0fe05f4a25b8404677ad3585148714a3c51afd67c8f818c6af5320",
            "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudListboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-listbox",
            "styleUrls": [
                "./listbox.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <p-listbox\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [checkbox]=\"checkbox\"\n    [filter]=\"filter\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [group]=\"group\"\n    [multiple]=\"multiple\"\n    [emptyFilterMessage]=\"emptyFilterMessage\"\n    [emptyMessage]=\"emptyMessage\"\n    [showToggleAll]=\"showToggleAll\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    [filterPlaceHolder]=\"filterPlaceHolder\"\n    (onDblClick)=\"onDblClick.emit($event)\"\n    (onClick)=\"onClick.emit($event)\"\n    (onChange)=\"onChange.emit($event)\">\n  </p-listbox>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "checkbox",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "emptyFilterMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterMatchMode",
                    "defaultValue": "'contains'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "listboxFilterMatchModes",
                    "decorators": []
                },
                {
                    "name": "filterPlaceHolder",
                    "defaultValue": "'Filtrar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showToggleAll",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onDblClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 86,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filterValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 84
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\nexport type listboxFilterMatchModes = \"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\";\r\n\r\n@Component({\r\n  selector: 'freud-listbox',\r\n  styleUrls: ['./listbox.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <p-listbox\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [checkbox]=\"checkbox\"\r\n        [filter]=\"filter\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [group]=\"group\"\r\n        [multiple]=\"multiple\"\r\n        [emptyFilterMessage]=\"emptyFilterMessage\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [showToggleAll]=\"showToggleAll\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [options]=\"options\"\r\n        [filterPlaceHolder]=\"filterPlaceHolder\"\r\n        (onDblClick)=\"onDblClick.emit($event)\"\r\n        (onClick)=\"onClick.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\">\r\n      </p-listbox>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-listbox',\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudListboxComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudListboxComponent implements ControlValueAccessor {\r\n  @Input() checkbox: boolean = false;\r\n  @Input() options!: any[];\r\n  @Input() showToggleAll: boolean = true;\r\n  @Input() group!: boolean;\r\n  @Input() filterPlaceHolder: string = 'Filtrar';\r\n  @Input() filter: boolean = false;\r\n  @Input() invalid: boolean = false;\r\n  @Input() multiple: boolean = false;\r\n  @Input() emptyFilterMessage: string = 'Sem resultados';\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() filterMatchMode: listboxFilterMatchModes = 'contains';\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() optionDisabled: string = 'disabled';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onDblClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  filterValue = '';\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-listbox {\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-listbox {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n\r\n  .p-listbox:not(.p-disabled) .p-listbox-item:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $neutral-color-dark-03;\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n\r\n  .p-listbox .p-listbox-list .p-listbox-item {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n  .p-listbox .p-listbox-list .p-listbox-item:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-listbox .p-listbox-list .p-listbox-item.p-highlight {\r\n    color: $brand-color-pure;\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  // Input\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-listbox .p-listbox-header {\r\n    background-color: $neutral-color-light-01;\r\n  }\r\n\r\n  // Checkbox\r\n  .p-checkbox .p-checkbox-box.p-highlight,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n}\r\n\r\n",
                    "styleUrl": "./listbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 115,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 111
                    }
                }
            }
        },
        {
            "name": "FreudMenubarComponent",
            "id": "component-FreudMenubarComponent-257fa9edf32c414be65be4c74043a05db959b6c0a276cff10cd3129abc1535c8412cce63e8601ccc2b65e936de38060bac255e1ee2fd8f482d087e5743a949f7",
            "file": "projects/web-components/src/components/structure/menubar/menubar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-menubar",
            "styleUrls": [
                "./menubar.component.scss"
            ],
            "styles": [],
            "template": "<p-menubar [model]=\"items\" [autoDisplay]=\"autoDisplay\">\n  <ng-template pTemplate=\"start\">\n    <a class=\"menubar-home-logo\" [href]=\"startImgHref\">\n      <img [src]=\"startImgSrc\" height=\"32\" class=\"mr-2\" [alt]=\"startImgAlt\">\n    </a>\n  </ng-template>\n</p-menubar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoDisplay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "startImgAlt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "startImgHref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "startImgSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\n\n@Component({\n  selector: 'freud-menubar',\n  template: `\n    <p-menubar [model]=\"items\" [autoDisplay]=\"autoDisplay\">\n      <ng-template pTemplate=\"start\">\n        <a class=\"menubar-home-logo\" [href]=\"startImgHref\">\n          <img [src]=\"startImgSrc\" height=\"32\" class=\"mr-2\" [alt]=\"startImgAlt\">\n        </a>\n      </ng-template>\n    </p-menubar>\n  `,\n  styleUrls: ['./menubar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-menubar',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudMenubarComponent {\n  @Input() items!: FreudMenuItem[];\n  @Input() startImgSrc!: string;\n  @Input() startImgAlt!: string;\n  @Input() startImgHref!: string;\n  @Input() bgColor: boolean = false;\n  @Input() autoDisplay: boolean = false;\n  @Output() onItemClick: EventEmitter<any> = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-menubar:not(.freud-bgcolor) {\r\n  .p-menubar {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-submenu-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-icon {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover{\r\n    @media screen and (min-width: 961px) {\r\n      background-color: $neutral-color-light-02;\r\n    }\r\n  }\r\n\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-submenu-icon {\r\n    @media screen and (min-width: 961px) {\r\n      color: $brand-color-pure !important;\r\n    }\r\n  }\r\n}\r\n.freud-menubar.freud-bgcolor {\r\n  .p-menubar {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-submenu-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-submenu-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-submenu-icon {\r\n    @media screen and (min-width: 961px) {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover{\r\n    @media screen and (min-width: 961px) {\r\n      background-color: $brand-color-04;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    .p-menubar .p-menubar-button {\r\n      color: $neutral-color-white;\r\n    }\r\n    .p-menubar .p-menubar-button:focus {\r\n      box-shadow: unset;\r\n    }\r\n  }\r\n}\r\n.p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:focus {\r\n  box-shadow: unset;\r\n}\r\n\r\n.freud-menubar {\r\n  .p-menubar {\r\n    border: unset;\r\n    height: 60px;\r\n    padding: 0 $spacing-size-xxs;\r\n    border-radius: 0;\r\n  }\r\n  .menubar-home-logo {\r\n    text-align: center;\r\n    display: flex;\r\n  }\r\n\r\n  p-menubarsub {\r\n    width: 100%;\r\n    ul {\r\n      float: right;\r\n    }\r\n  }\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link {\r\n    height: 60px;\r\n    border-radius: 0;\r\n    @include typography($font-size-xxs, $font-weight-regular, auto);\r\n  }\r\n}\r\n\r\n@media screen and (max-width: 960px) {\r\n  .menubar-home-logo {\r\n    display: none !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./menubar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudMenuComponent",
            "id": "component-FreudMenuComponent-e2818a3077359aa255431a3b3d0d0e08608a11f075d964abd9d10295d1d968bd700e8431e826b5c4d2f78172a5ce75c5839b33125c3622b9920b140544b4b3cc",
            "file": "projects/web-components/src/components/structure/menu/menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "template": "<p-menu\n  #pMenu\n  [model]=\"items\"\n  [appendTo]=\"appendTo\"\n  [popup]=\"popup\"\n  (onHide)=\"onHide.emit($event)\"\n  (onShow)=\"onShow.emit($event)\"\n></p-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "popup",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "reference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pMenu'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\n\n@Component({\n  selector: 'freud-menu',\n  template: `\n    <p-menu\n      #pMenu\n      [model]=\"items\"\n      [appendTo]=\"appendTo\"\n      [popup]=\"popup\"\n      (onHide)=\"onHide.emit($event)\"\n      (onShow)=\"onShow.emit($event)\"\n    ></p-menu>\n  `,\n  styleUrls: ['./menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-menu',\n  }\n})\nexport class FreudMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @Input() popup: boolean = false;\n  @Input() appendTo!: string;\n\n  @Output() onShow: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onHide: EventEmitter<any> = new EventEmitter<any>();\n  @ViewChild('pMenu') reference!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-menu {\r\n  .p-menu .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 16px);\r\n  }\r\n\r\n  .p-menu .p-submenu-header {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover {\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon {\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-menu .p-menuitem-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-menu {\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudMultiSelectComponent",
            "id": "component-FreudMultiSelectComponent-e20b3faedb946c99116a1ad3da2dfb99624059ece5d822615f3aa998c5c070a8b2aa701ea5349c0dcc2123661247ebf3b0b0b18cf559176bc93657fd50b39df2",
            "file": "projects/web-components/src/components/forms/multi-select/multi-select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudMultiSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-multi-select",
            "styleUrls": [
                "./multi-select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-multiSelect\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [display]=\"display\"\n    [options]=\"options\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onFilter)=\"onFilter.emit($event)\"\n    (onPanelShow)=\"onPanelShow.emit($event)\"\n    (onPanelHide)=\"onPanelHide.emit($event)\"\n  ></p-multiSelect>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "display",
                    "defaultValue": "'comma'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "\"comma\" | \"chip\"",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPanelHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPanelShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 94,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 111
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 113
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-multi-select',\r\n  styleUrls: ['./multi-select.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-multiSelect\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [dropdownIcon]=\"dropdownIcon\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [itemSize]=\"itemSize\"\r\n        [disabled]=\"disabled\"\r\n        [display]=\"display\"\r\n        [options]=\"options\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\"\r\n        (onFilter)=\"onFilter.emit($event)\"\r\n        (onPanelShow)=\"onPanelShow.emit($event)\"\r\n        (onPanelHide)=\"onPanelHide.emit($event)\"\r\n      ></p-multiSelect>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-multi-select',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudMultiSelectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudMultiSelectComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() options!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() virtualScroll: boolean = false;\r\n  @Input() itemSize!: number;\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() optionDisabled: string = 'disabled';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() characterPattern: string = '';\r\n  @Input() display: 'comma' | 'chip' = 'comma';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n  @Output() onPanelShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onPanelHide: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-multi-select:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-multi-select.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-multi-select {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-multiselect {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-multiselect:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-multiselect:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-multiselect .p-multiselect-panel {\r\n    border-radius: $border-radius-md;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item {\r\n    padding: 12px 1rem;\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $neutral-color-dark-03;\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-header {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox .p-checkbox-box.p-highlight,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  // Input\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-multiselect-panel .p-multiselect-header {\r\n    background-color: $neutral-color-light-01;\r\n    border-bottom: 1px solid $neutral-color-light-03;\r\n  }\r\n\r\n  // Chip\r\n  .p-multiselect.p-multiselect-chip .p-multiselect-token {\r\n    padding: 0.25rem 0.5rem;\r\n    margin-right: 0.5rem;\r\n    @include typography($font-size-xxs, $font-weight-regular, 21px);\r\n    background: $brand-color-01;\r\n    color: $brand-color-pure;\r\n    border-radius: $border-radius-md;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./multi-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 123,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 119
                    }
                }
            }
        },
        {
            "name": "FreudPanelMenuComponent",
            "id": "component-FreudPanelMenuComponent-3cee5854c63bb6de368cfb183c9120511d5ccf0fe2cbc3ef3449fa407ef17b1d8d48bc150e7406763366c9960875dfc2b869ed94adf1606ddb06ce14d847fe83",
            "file": "projects/web-components/src/components/structure/panel-menu/panel-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-panel-menu",
            "styleUrls": [
                "./panel-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-panelMenu\n  [model]=\"items\"\n  [style]=\"styleParams\">\n</p-panelMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "styleParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\n\n@Component({\n  selector: 'freud-panel-menu',\n  template: `\n    <p-panelMenu\n      [model]=\"items\"\n      [style]=\"styleParams\">\n    </p-panelMenu>\n  `,\n  styleUrls: ['./panel-menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-panel-menu'\n  }\n})\nexport class FreudPanelMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @Input() styleParams!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-panel-menu {\r\n\r\n  .p-panelmenu .p-panelmenu-panel {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-panel:first-child .p-panelmenu-header > a, {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-panel:last-child .p-panelmenu-header:not(.p-highlight) > a {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header:not(.p-highlight):not(.p-disabled) > a:hover {\r\n    background-color: $neutral-color-light-01;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header:not(.p-highlight) > a {\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header.p-highlight > a {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-panel .p-panelmenu-content {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header > a {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, 16px);\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header > a:focus,\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./panel-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudProgressBarComponent",
            "id": "component-FreudProgressBarComponent-e578c8ca162299910bd59dbd1863758d22e3074c3bfffdac92f8f9ad714019a566ba2a467b1b29affecb52ae802b94c6bcd894528cde4d36ea4c65e60360bf27",
            "file": "projects/web-components/src/components/feedback/progress-bar/progress-bar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "template": "<p-progressBar\n  [value]=\"value\"\n  [showValue]=\"showValue\"\n  [unit]=\"unit\"\n  [mode]=\"mode\">\n</p-progressBar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'determinate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"determinate\" | \"indeterminate\"",
                    "decorators": []
                },
                {
                    "name": "showValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "unit",
                    "defaultValue": "'%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n  selector: 'freud-progress-bar',\n  template: `\n    <p-progressBar\n      [value]=\"value\"\n      [showValue]=\"showValue\"\n      [unit]=\"unit\"\n      [mode]=\"mode\">\n    </p-progressBar>\n  `,\n  styleUrls: ['./progress-bar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-progress-bar',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudProgressBarComponent {\n  @Input() value: number = 0;\n  @Input() showValue:\tboolean\t= true;\n  @Input() mode: 'determinate' | 'indeterminate' = 'determinate';\n  @Input() unit: string = '%';\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-progress-bar:not(.freud-bgcolor) {\r\n  .p-progressbar {\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n  .p-progressbar-value {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-progressbar-determinate .p-progressbar-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n.freud-progress-bar.freud-bgcolor {\r\n  .p-progressbar {\r\n    background-color: $brand-color-04;\r\n  }\r\n  .p-progressbar-value {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-progressbar-determinate .p-progressbar-label {\r\n    color: $brand-color-05;\r\n  }\r\n}\r\n\r\n.freud-progress-bar {\r\n  .p-progressbar {\r\n    border-radius: $border-radius-md;\r\n  }\r\n  .p-progressbar-determinate .p-progressbar-label {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n  .p-progressbar-determinate {\r\n    height: 21px;\r\n  }\r\n  .p-progressbar-indeterminate {\r\n    height: 6px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudProgressSpinnerComponent",
            "id": "component-FreudProgressSpinnerComponent-db31596600bbde38e11d6435fe62bf062b3d97f2ae3459c1eccd64ed8bc33d61d03c6fc05a86dfc0eeb16537c20fb6137e9e00f67aeceaf8f0b7f09ff0cd15e9",
            "file": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-progress-spinner",
            "styleUrls": [
                "./progress-spinner.component.scss"
            ],
            "styles": [],
            "template": "<p-progressSpinner animationDuration=\"1s\"></p-progressSpinner>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n  selector: 'freud-progress-spinner',\n  template: `\n    <p-progressSpinner animationDuration=\"1s\"></p-progressSpinner>\n  `,\n  styleUrls: ['./progress-spinner.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-progress-spinner',\n    '[class.freud-progress-spinner-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudProgressSpinnerComponent {\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n@keyframes freud-progress-spinner-color {\r\n  100%,\r\n  0% {\r\n    stroke: $feedback-color-negative-03;\r\n  }\r\n  33% {\r\n    stroke: $feedback-color-warning-03;\r\n  }\r\n  66% {\r\n    stroke: $feedback-color-positive-03;\r\n  }\r\n}\r\n\r\n.freud-progress-spinner .p-progress-spinner-circle {\r\n  animation: p-progress-spinner-dash 1.5s ease-in-out infinite, freud-progress-spinner-color 6s ease-in-out infinite;\r\n\r\n}\r\n",
                    "styleUrl": "./progress-spinner.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudRadioButtonComponent",
            "id": "component-FreudRadioButtonComponent-f551c68459e77fe7c0a59a6ecba87bd73dbbad078b0ecd21a9d4fd0bad71e5171cacb7d3ed9cc5ab3fdb9a35e4a700fed65cef81ddb6a4b10aa2c8dcdc0d872a",
            "file": "projects/web-components/src/components/forms/radio-button/radio-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudRadioButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "template": "<p-radioButton\n  [id]=\"id\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [name]=\"name\"\n  [value]=\"radioValue\"\n  [label]=\"label\"\n  [inputId]=\"inputId\"\n\n  (focus)=\"onFocus.emit($event)\"\n  (blur)=\"onBlur.emit($event)\">\n</p-radioButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radioValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-radio-button',\r\n  styleUrls: ['./radio-button.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-radioButton\r\n      [id]=\"id\"\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [name]=\"name\"\r\n      [value]=\"radioValue\"\r\n      [label]=\"label\"\r\n      [inputId]=\"inputId\"\r\n\r\n      (focus)=\"onFocus.emit($event)\"\r\n      (blur)=\"onBlur.emit($event)\">\r\n    </p-radioButton>\r\n  `,\r\n  host: {\r\n    class: 'freud-radio-button',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudRadioButtonComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudRadioButtonComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() bgColor: boolean = false;\r\n  @Input() inputId!: string;\r\n  @Input() name!: string;\r\n  @Input() disabled = false;\r\n  @Input() radioValue!: any;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: any;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-radio-button:not(.freud-bgcolor) {\r\n  .p-radiobutton-label {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-radio-button.freud-bgcolor {\r\n  .p-radiobutton-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-radio-button {\r\n  .p-radiobutton .p-radiobutton-box.p-highlight,\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-radiobutton .p-radiobutton-box {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n  .p-radiobutton .p-radiobutton-box .p-radiobutton-icon {\r\n    width: 8px;\r\n    height: 8px\r\n  }\r\n\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box:hover,\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-focus {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-focus {\r\n    box-shadow: $shadow-focused-zen !important;\r\n  }\r\n  .p-radiobutton-label {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    font-family: $font-family-base;\r\n  }\r\n}\r\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            }
        },
        {
            "name": "FreudRadioButtonExampleComponent",
            "id": "component-FreudRadioButtonExampleComponent-8687cae6064707699923813a9d03659274f20c76caf7cff122c668c25ebd6635d6ee929e19d3b5a6be4806a9ac68a2be221a7563497de6113983b095a098693c",
            "file": "stories/forms/radio-button/radio-button-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-radio-button-example",
            "styleUrls": [],
            "styles": [],
            "template": "<freud-radio-button\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [label]=\"label ? (label + ' 1'): ''\"\n  [name]=\"'label'\"\n  [radioValue]=\"'item2'\"\n  [bgColor]=\"bgColor\">\n</freud-radio-button>\n<br><br>\n<freud-radio-button\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [label]=\"label ? (label + ' 2'): ''\"\n  [name]=\"'label'\"\n  [radioValue]=\"'item1'\"\n  [bgColor]=\"bgColor\">\n</freud-radio-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedItem",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-radio-button-example',\n  template: `\n    <freud-radio-button\n      [(ngModel)]=\"value\"\n      [disabled]=\"disabled\"\n      [label]=\"label ? (label + ' 1'): ''\"\n      [name]=\"'label'\"\n      [radioValue]=\"'item2'\"\n      [bgColor]=\"bgColor\">\n    </freud-radio-button>\n    <br><br>\n    <freud-radio-button\n      [(ngModel)]=\"value\"\n      [disabled]=\"disabled\"\n      [label]=\"label ? (label + ' 2'): ''\"\n      [name]=\"'label'\"\n      [radioValue]=\"'item1'\"\n      [bgColor]=\"bgColor\">\n    </freud-radio-button>\n  `\n})\nexport class FreudRadioButtonExampleComponent {\n\n  selectedItem: string = '';\n  @Input() value!: any;\n  @Input() label!: string;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "FreudRatingComponent",
            "id": "component-FreudRatingComponent-1410af4fb5fb78a9fd98c8d785a918f7c03014c1b2e24b5dc2e0c409a9d8a19a407ab5020b56a3eb5023d5ca77fac50bd880cab4d3b76fb5687517fbcabb7595",
            "file": "projects/web-components/src/components/feedback/rating/rating.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-rating",
            "styleUrls": [
                "./rating.component.scss"
            ],
            "styles": [],
            "template": "<p-rating\n  [(ngModel)]=\"value\"\n  [stars]=\"stars\"\n  [disabled]=\"disabled\"\n  [iconOnClass]=\"iconOnClass\"\n  [iconOffClass]=\"iconOffClass\"\n  [cancel]=\"false\"\n  (onRate)=\"onRateChange($event)\">\n</p-rating>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconOffClass",
                    "defaultValue": "'freud-icon freud-icon-star'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconOnClass",
                    "defaultValue": "'freud-icon freud-icon-star-fill'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "stars",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onRate",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onRateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-rating',\n  template: `\n    <p-rating\n      [(ngModel)]=\"value\"\n      [stars]=\"stars\"\n      [disabled]=\"disabled\"\n      [iconOnClass]=\"iconOnClass\"\n      [iconOffClass]=\"iconOffClass\"\n      [cancel]=\"false\"\n      (onRate)=\"onRateChange($event)\">\n    </p-rating>\n  `,\n  styleUrls: ['./rating.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-rating',\n    '[class.freud-rating-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudRatingComponent {\n\n  @Input() value: number = 0;\n  @Input() stars: number = 5;\n  @Input() disabled: boolean = false;\n  @Input() iconOnClass: string = 'freud-icon freud-icon-star-fill';\n  @Input() iconOffClass: string = 'freud-icon freud-icon-star';\n  @Input() bgColor: boolean = false;\n  @Output() onRate: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onCancel: EventEmitter<any> = new EventEmitter<any>();\n\n  onRateChange(event: any) {\n    this.onRate.emit(event);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-rating {\r\n  .p-rating:not(.p-disabled):not(.p-readonly) .p-rating-icon:hover,\r\n  .p-rating .p-rating-icon.freud-icon-star-fill {\r\n    color: $feedback-color-warning-pure;\r\n  }\r\n  .p-rating .p-rating-icon:not(.freud-icon-star-fill) {\r\n    color: $neutral-color-dark-01;\r\n  }\r\n\r\n  .p-rating .p-rating-icon {\r\n    font-size: 16px;\r\n  }\r\n}\r\n.freud-rating.freud-rating-bgcolor {\r\n  .p-rating .p-rating-icon:not(.freud-icon-star-fill) {\r\n    color: $neutral-color-dark-01;\r\n  }\r\n}\r\n\r\n.freud-rating .p-rating .p-rating-icon:focus {\r\n  box-shadow: unset;\r\n}\r\n",
                    "styleUrl": "./rating.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudReactiveFormExampleComponent",
            "id": "component-FreudReactiveFormExampleComponent-c9c5a3684b1ddaa20d1f0042d16a3abb9ccb3be13a873aea9675fcaf95820c966a16cb8b0caaa14efb6bb33aea6e00d51a188f2879f39c80dbbd15e38b6bcf89",
            "file": "stories/forms/reactive-form-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-reactive-form-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<form [formGroup]=\"formParams\" (ngSubmit)=\"onSubmit()\">\n  <freud-input-text label=\"Name\" formControlName=\"name\"></freud-input-text>\n  <freud-input-text label=\"email\" formControlName=\"email\"></freud-input-text>\n  <button type=\"submit\">Enviar</button>\n  <div>\n    <p>FormValid: {{formParams.valid}}</p>\n    <p>FormParams: {{formParams.value | json}}</p>\n  </div>\n</form>\n<freud-input-text label=\"ngModel\" [(ngModel)]=\"nameNgModel\"></freud-input-text>\n<p>Value NgModel {{nameNgModel}}</p>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nameNgModel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-reactive-form-example',\n  template: `\n    <form [formGroup]=\"formParams\" (ngSubmit)=\"onSubmit()\">\n      <freud-input-text label=\"Name\" formControlName=\"name\"></freud-input-text>\n      <freud-input-text label=\"email\" formControlName=\"email\"></freud-input-text>\n      <button type=\"submit\">Enviar</button>\n      <div>\n        <p>FormValid: {{formParams.valid}}</p>\n        <p>FormParams: {{formParams.value | json}}</p>\n      </div>\n    </form>\n    <freud-input-text label=\"ngModel\" [(ngModel)]=\"nameNgModel\"></freud-input-text>\n    <p>Value NgModel {{nameNgModel}}</p>\n\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudReactiveFormExampleComponent implements OnInit {\n\n  formParams!: FormGroup;\n  nameNgModel: string = '';\n  constructor() {}\n\n  ngOnInit() {\n    this.formParams = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(2)]),\n      email: new FormControl('', [Validators.email])\n    })\n  }\n\n  onSubmit() {\n    this.formParams.markAsUntouched();\n    console.log('formParams', this.formParams);\n    console.log('formParams >>> Value', this.formParams.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "FreudScrollPanelComponent",
            "id": "component-FreudScrollPanelComponent-ac33355ed1b11e05c680998a0ade352461dfb94ad7eabc8e33bb8eccd72c73a2b35952f50a96bdade16dcf082e94a83ea8607b8da06066345ac58413fb0c092d",
            "file": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-panel",
            "styleUrls": [
                "./scroll-panel.component.scss"
            ],
            "styles": [],
            "template": "<p-scrollPanel [style]=\"style\">\n  <ng-content></ng-content>\n</p-scrollPanel>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-scroll-panel',\n  template: `\n      <p-scrollPanel [style]=\"style\">\n        <ng-content></ng-content>\n      </p-scrollPanel>\n  `,\n  styleUrls: ['./scroll-panel.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-scroll-panel',\n  }\n})\nexport class FreudScrollPanelComponent {\n\n  @Input() style!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-scroll-panel {\r\n\r\n  .p-scrollpanel, p-scrollpanel-bar {\r\n    background-color: $neutral-color-white;\r\n    padding: 14px 14px 14px 14px;\r\n    border-radius: $border-radius-md;\r\n  }\r\n  .p-scrollpanel .p-scrollpanel-bar {\r\n    margin-left: -20px;\r\n    background-color: $neutral-color-dark-01;\r\n  }\r\n  .p-scrollpanel-content {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./scroll-panel.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudScrollTopComponent",
            "id": "component-FreudScrollTopComponent-71db91ba597d1851186b22179777b7491ae2c8d370d4db58ee4d1bde09431df9d5fe39f953f05fe52d80b8916ed7fa57047dd227d220118b75e26fe280df2f52",
            "file": "projects/web-components/src/components/others/scroll-top/scroll-top.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-top",
            "styleUrls": [
                "./scroll-top.component.scss"
            ],
            "styles": [],
            "template": "<p-scrollTop #element [threshold]=\"threshold\"\n             [target]=\"target\"\n             [icon]=\"icon\"\n             styleClass=\"freud-scrolltop\"\n             [behavior]=\"behavior\"></p-scrollTop>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "behavior",
                    "defaultValue": "'smooth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"smooth\" | \"auto\"",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "defaultValue": "'window'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"window\" | \"parent\"",
                    "decorators": []
                },
                {
                    "name": "threshold",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollTop",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'element'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "bindParentScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindParentScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ScrollTop } from \"primeng/scrolltop\";\n\n@Component({\n  selector: 'freud-scroll-top',\n  template: `\n    <p-scrollTop #element [threshold]=\"threshold\"\n                 [target]=\"target\"\n                 [icon]=\"icon\"\n                 styleClass=\"freud-scrolltop\"\n                 [behavior]=\"behavior\"></p-scrollTop>\n  `,\n  styleUrls: ['./scroll-top.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-scroll-top',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudScrollTopComponent implements AfterViewInit {\n  @Input() threshold: number = 400;\n  @Input() target: 'window' | 'parent' = 'window';\n  @Input() behavior: 'smooth' | 'auto' = 'smooth';\n  @Input() bgColor: boolean = false;\n  @Input() icon: string = 'freud-icon freud-icon-chevron-up';\n  @ViewChild('element') element!: ScrollTop;\n\n  ngAfterViewInit() {\n    if (this.target === 'parent') {\n      this.element.bindParentScrollListener = this.bindParentScrollListener.bind(this);\n      this.element.unbindParentScrollListener = this.unbindParentScrollListener.bind(this);\n      this.element.onClick = this.onClick.bind(this);\n      this.element.bindParentScrollListener();\n    }\n  }\n\n  bindParentScrollListener() {\n    this.element.scrollListener = () => {\n      this.element.checkVisibility(this.element.el.nativeElement.parentElement.parentElement.scrollTop);\n    };\n\n    this.element.el.nativeElement.parentElement.parentElement.addEventListener('scroll', this.element.scrollListener);\n  }\n\n  onClick() {\n    let scrollElement = this.target === 'window' ? window : this.element.el.nativeElement.parentElement.parentElement;\n    scrollElement.scroll({\n      top: 0,\n      behavior: this.behavior\n    });\n  }\n\n  unbindParentScrollListener() {\n    if (this.element.scrollListener) {\n      this.element.el.nativeElement.parentElement.parentElement.removeEventListener('scroll', this.element.scrollListener);\n      this.element.scrollListener = null;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-scroll-top {\r\n  .p-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n.freud-scroll-top.freud-bgcolor {\r\n  .p-scrolltop.p-link {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-scrolltop .p-scrolltop-icon {\r\n    color: $brand-color-pure;\r\n  }\r\n  .p-scrolltop.p-link:hover {\r\n    background-color: $brand-color-04;\r\n    .p-scrolltop-icon {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n}\r\n\r\n.freud-scroll-top:not(.freud-bgcolor) {\r\n  .p-scrolltop.p-link {\r\n    background-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-scrolltop .p-scrolltop-icon {\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-scrolltop.p-link:hover {\r\n    background-color: $brand-color-04;\r\n    .p-scrolltop-icon {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./scroll-top.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "FreudScrollTopComponent",
            "id": "component-FreudScrollTopComponent-5e0a3bc4a2aca1d8a80ee563edf6f602f44bde5fc3daf3b251478d34a423e12d5375dc7c3bfbb0d96893c45995da018d240e341aa278548c5b46ebcb751afe76-1",
            "file": "projects/web-components/src/components/others/timeline/timeline.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-top",
            "styleUrls": [
                "./timeline.component.scss"
            ],
            "styles": [],
            "template": "<p-timeline [threshold]=\"threshold\" [target]=\"target\" [behavior]=\"behavior\"></p-timeline>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "behavior",
                    "defaultValue": "'smooth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"smooth\" | \"auto\"",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "defaultValue": "'window'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"window\" | \"parent\"",
                    "decorators": []
                },
                {
                    "name": "threshold",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-scroll-top',\n  template: `\n    <p-timeline [threshold]=\"threshold\" [target]=\"target\" [behavior]=\"behavior\"></p-timeline>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-scroll-top',\n  }\n})\nexport class FreudScrollTopComponent {\n\n  @Input() threshold: number = 400;\n  @Input() target: 'window' | 'parent' = 'window';\n  @Input() behavior: 'smooth' | 'auto' = 'smooth';\n  @Input() icon: string = 'freud-icon freud-icon-chevron-up';\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n",
                    "styleUrl": "./timeline.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FreudScrollTopComponent-1"
        },
        {
            "name": "FreudSelectButtonComponent",
            "id": "component-FreudSelectButtonComponent-d4617edf80e2a393e0337314e221713d30cf42de420d4bc1dbb2aec4c42933178f68b5453385607a234629321a2819e693dcd88fdd35c134148581becd27e4d3",
            "file": "projects/web-components/src/components/others/select-button/select-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSelectButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-select-button",
            "styleUrls": [
                "./select-button.component.scss"
            ],
            "styles": [],
            "template": "<p-selectButton\n  [options]=\"options\"\n  [(ngModel)]=\"selectedOption\"\n  [multiple]=\"multiple\"\n  [tabindex]=\"tabindex\"\n  [optionDisabled]=\"optionDisabled\"\n  [optionLabel]=\"optionLabel\"\n  [disabled]=\"disabled\"\n  (onChange)=\"selectedOptionChange.emit($event)\">\n</p-selectButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-select-button',\n  template: `\n    <p-selectButton\n      [options]=\"options\"\n      [(ngModel)]=\"selectedOption\"\n      [multiple]=\"multiple\"\n      [tabindex]=\"tabindex\"\n      [optionDisabled]=\"optionDisabled\"\n      [optionLabel]=\"optionLabel\"\n      [disabled]=\"disabled\"\n      (onChange)=\"selectedOptionChange.emit($event)\">\n    </p-selectButton>\n  `,\n  styleUrls: ['./select-button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-select-button',\n    '[class.freud-select-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudSelectButtonComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudSelectButtonComponent implements ControlValueAccessor {\n\n  @Input() options!: any[];\n  @Input() optionLabel!: string;\n  @Input() selectedOption!: any;\n  @Input() multiple: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() optionDisabled!: string;\n  @Input() tabindex: number = 0;\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() selectedOptionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-select-button.freud-select-bgcolor {\r\n  .p-selectbutton .p-button.p-highlight {\r\n    color: $brand-color-04;\r\n    background: $neutral-color-white;\r\n    border: 1px solid $neutral-color-white;\r\n  }\r\n  .p-selectbutton .p-button {\r\n    border: 1px solid $brand-color-05;\r\n    background: $brand-color-04;\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-select-button {\r\n  .p-selectbutton .p-button {\r\n    @include typography($font-size-xxs, $font-weight-bold, $font-size-xxs);\r\n    border-radius: $border-radius-md;\r\n  }\r\n}\r\n\r\n.p-button:focus {\r\n  box-shadow: 0 0 0 1px $brand-color-pure;\r\n}\r\n\r\n\r\n.freud-select-button:not(.freud-select-bgcolor) {\r\n  .p-selectbutton .p-button.p-highlight {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-selectbutton .p-button {\r\n    border: 1px solid $neutral-color-light-04;\r\n    color: $neutral-color-dark-03;\r\n  }\r\n}\r\n",
                    "styleUrl": "./select-button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            }
        },
        {
            "name": "FreudSelectComponent",
            "id": "component-FreudSelectComponent-c7a6bbfb6be29a466a048c96141cdd2ef21caae3cc9839fb930b3e13b057a584a19e03cf48443f5551e1485f03644c5430d72285e9b3cf781b2cef5e072317ed",
            "file": "projects/web-components/src/components/forms/select/select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-dropdown\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onFilter)=\"onFilter.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n    (onHide)=\"onHide.emit($event)\"\n    (onClear)=\"onClear.emit($event)\"\n\n  ></p-dropdown>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 97,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 114
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 116
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-select',\r\n  styleUrls: ['./select.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-dropdown\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [dropdownIcon]=\"dropdownIcon\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [itemSize]=\"itemSize\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [options]=\"options\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\"\r\n        (onFilter)=\"onFilter.emit($event)\"\r\n        (onShow)=\"onShow.emit($event)\"\r\n        (onHide)=\"onHide.emit($event)\"\r\n        (onClear)=\"onClear.emit($event)\"\r\n\r\n      ></p-dropdown>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-select',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudSelectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudSelectComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() options!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() virtualScroll: boolean = false;\r\n  @Input() itemSize!: number;\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() optionDisabled: string = 'disabled';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClear: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  private _value!: string;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-select:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-select.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-select {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dropdown {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dropdown:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-dropdown:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-dropdown .p-dropdown-panel {\r\n    border-radius: $border-radius-md;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item {\r\n    padding: 12px 1rem;\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $neutral-color-dark-03;\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n\r\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 126,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 122
                    }
                }
            }
        },
        {
            "name": "FreudSkeletonComponent",
            "id": "component-FreudSkeletonComponent-c93669ce5126df2e9cf53b500f9e6f6cf185717940e437b34d58ab4c811600e9dc815f3c7b85ca3f6a7016da8d9bf461c2a8dd45077bbb9781a7404ba5123bb5",
            "file": "projects/web-components/src/components/feedback/skeleton/skeleton.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-skeleton",
            "styleUrls": [
                "./skeleton.component.scss"
            ],
            "styles": [],
            "template": "<p-skeleton\n  [width]=\"width\"\n  [height]=\"height\"\n></p-skeleton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'100px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-skeleton',\n  template: `\n    <p-skeleton\n      [width]=\"width\"\n      [height]=\"height\"\n    ></p-skeleton>\n  `,\n  styleUrls: ['./skeleton.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-skeleton',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudSkeletonComponent {\n  @Input() width: string = '100%';\n  @Input() height: string = '100px';\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-skeleton:not(.freud-bgcolor) {\r\n  .p-skeleton {\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n}\r\n.freud-skeleton.freud-bgcolor {\r\n  .p-skeleton {\r\n    background-color: $brand-color-06;\r\n  }\r\n  .p-skeleton:after {\r\n    background: linear-gradient(\r\n        90deg, rgba(255, 255, 255, 0),\r\n        rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));\r\n  }\r\n}\r\n",
                    "styleUrl": "./skeleton.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSlideMenuComponent",
            "id": "component-FreudSlideMenuComponent-4f78045695cef27f605a903bdf31c59585456ca07d755609de138b9c613ab92cf144b50a93b76feac1af286bc2825442aadb59fb6a03a3ea7be9002647b256ab",
            "file": "projects/web-components/src/components/structure/slide-menu/slide-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-slide-menu",
            "styleUrls": [
                "./slide-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-slideMenu #slideMenu [model]=\"items\"></p-slideMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "slide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SlideMenu",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slideMenu'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\nimport { SlideMenu } from \"primeng/slidemenu\";\n\n@Component({\n  selector: 'freud-slide-menu',\n  template: `\n    <p-slideMenu #slideMenu [model]=\"items\"></p-slideMenu>\n  `,\n  styleUrls: ['./slide-menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-slide-menu',\n  }\n})\nexport class FreudSlideMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @ViewChild('slideMenu') slide!: SlideMenu;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-slide-menu {\r\n  .p-slidemenu .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 16px);\r\n  }\r\n  .p-slidemenu {\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-1;\r\n  }\r\n  .p-slidemenu .p-slidemenu-wrapper, .p-slidemenu .p-slidemenu-rootlist {\r\n    width: 100% !important;\r\n  }\r\n  .p-slidemenu .p-menuitem-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n",
                    "styleUrl": "./slide-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSliderComponent",
            "id": "component-FreudSliderComponent-f4a223d01d9bafdf780eabad56349faa477ac8dbe6c161470693886c80b2361daabbb084b5f3f7537ccfa4613a7042b68c2d10a32bd797490e7011aa77aefc1a",
            "file": "projects/web-components/src/components/others/slider/slider.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSliderComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "template": "<p-slider\n  [(ngModel)]=\"value\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [step]=\"step\"\n  [range]=\"range\"\n  [orientation]=\"orientation\"\n  [tabindex]=\"tabindex\"\n  [disabled]=\"disabled\"\n  (ngModelChange)=\"modelValueChange()\"\n  (onChange)=\"selectedOptionChange.emit($event)\">\n</p-slider>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "range",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-slider',\n  template: `\n    <p-slider\n      [(ngModel)]=\"value\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [step]=\"step\"\n      [range]=\"range\"\n      [orientation]=\"orientation\"\n      [tabindex]=\"tabindex\"\n      [disabled]=\"disabled\"\n      (ngModelChange)=\"modelValueChange()\"\n      (onChange)=\"selectedOptionChange.emit($event)\">\n    </p-slider>\n  `,\n  styleUrls: ['./slider.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-slider',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudSliderComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudSliderComponent implements ControlValueAccessor {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() step: number = 1;\n  @Input() range: boolean = false;\n  @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() tabindex: number = 0;\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() selectedOptionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-slider:not(.freud-bgcolor) {\r\n  .p-slider .p-slider-range {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-slider .p-slider-handle {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-slider {\r\n    background: $neutral-color-light-02;\r\n  }\r\n}\r\n\r\n.freud-slider.freud-bgcolor {\r\n  .p-slider .p-slider-range {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-slider .p-slider-handle {\r\n    background-color: $neutral-color-white;\r\n    border-color: $neutral-color-white;\r\n  }\r\n  .p-slider {\r\n    background: $brand-color-04;\r\n  }\r\n}\r\n.freud-slider {\r\n  .p-slider .p-slider-handle {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n  .p-slider.p-slider-vertical .p-slider-handle {\r\n    margin-left: -8px;\r\n    margin-bottom: -8px;\r\n  }\r\n\r\n  .p-slider .p-slider-range {\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-slider .p-slider-handle:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "FreudSpeedDialComponent",
            "id": "component-FreudSpeedDialComponent-c7c93200ace4e69a7d488b3565deb2232dfe5c910f98b779580c091c57116235c7ea359d451e80b7469d4fd7f7ea94ea2f5d289015947a0c6b9bb2f05d30d44c",
            "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-speed-dial",
            "styleUrls": [
                "./speed-dial.component.scss"
            ],
            "styles": [],
            "template": "<p-speedDial\n  [id]=\"id\"\n  [visible]=\"visible\"\n  [mask]=\"mask\"\n  [disabled]=\"disabled\"\n  [showIcon]=\"showIcon\"\n  [hideIcon]=\"hideIcon\"\n  [type]=\"type\"\n  [direction]=\"direction\"\n  [model]=\"items\"\n  (onShow)=\"onShow.emit()\"\n  (onHide)=\"onHide.emit()\"\n  (onVisibleChange)=\"onVisibleChange.emit()\">\n</p-speedDial>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "defaultValue": "'up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "directions",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "mask",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'linear'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "types",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onVisibleChange",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\n\ntype directions = 'up' | 'down' | 'left' | 'right' | 'up-left' | 'up-right' | 'down-left' | 'down-right';\ntype types = 'linear' | 'circle' | 'semi-circle' | 'quarter-circle';\n@Component({\n  selector: 'freud-speed-dial',\n  template: `\n    <p-speedDial\n      [id]=\"id\"\n      [visible]=\"visible\"\n      [mask]=\"mask\"\n      [disabled]=\"disabled\"\n      [showIcon]=\"showIcon\"\n      [hideIcon]=\"hideIcon\"\n      [type]=\"type\"\n      [direction]=\"direction\"\n      [model]=\"items\"\n      (onShow)=\"onShow.emit()\"\n      (onHide)=\"onHide.emit()\"\n      (onVisibleChange)=\"onVisibleChange.emit()\">\n    </p-speedDial>\n  `,\n  styleUrls: ['./speed-dial.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-speed-dial',\n    '[class.freud-speed-dial-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudSpeedDialComponent {\n\n  @Input() id: string = '';\n  @Input() visible: boolean = false;\n  @Input() mask: boolean = false;\n  @Input() items!: FreudMenuItem[];\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() showIcon: string = 'freud-icon freud-icon-plus';\n  @Input() hideIcon: string = '';\n  @Input() type: types = 'linear';\n  @Input() direction: directions = 'up';\n  @Output() onVisibleChange: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onShow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onHide: EventEmitter<void> = new EventEmitter<void>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-speed-dial:not(.freud-speed-dial-bgcolor) {\r\n  .p-button, .p-button:hover {\r\n    background: $brand-color-pure;\r\n    border: 1px solid $brand-color-pure;\r\n    box-shadow: 0 0 0 2px $brand-color-pure;\r\n  }\r\n  .p-speeddial-action {\r\n    background-color: $brand-color-05;\r\n    width: 42px;\r\n    height: 42px;\r\n  }\r\n}\r\n\r\n.freud-speed-dial {\r\n  .p-speeddial-button.p-button.p-button-icon-only {\r\n    width: 56px;\r\n    height: 56px;\r\n  }\r\n  .p-speeddial-button.p-button.p-button-icon-only .p-button-icon {\r\n    font-size: $font-size-lg;\r\n  }\r\n  .p-speeddial-action-icon {\r\n    font-size: $font-size-md;\r\n  }\r\n}\r\n\r\n.freud-speed-dial.freud-speed-dial-bgcolor {\r\n  .p-button, .p-button:hover {\r\n    background: $neutral-color-white;\r\n    border: 1px solid $neutral-color-white;\r\n    box-shadow: 0 0 0 2px $neutral-color-white;\r\n    color: $brand-color-pure;\r\n  }\r\n  .p-speeddial-action {\r\n    background-color: $brand-color-02;\r\n    color: $brand-color-pure;\r\n    width: 42px;\r\n    height: 42px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./speed-dial.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSplitButtonComponent",
            "id": "component-FreudSplitButtonComponent-1d89bc73d7bdc18d7d9d2455be6d0ac3ea9f24a531c0688b7af8cb7f70633a4466eca65899ebb19fbed83b89ef9cd26d1062e06a312d941303e7246c36d9ad20",
            "file": "projects/web-components/src/components/buttons/split-button/split-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-split-button",
            "styleUrls": [
                "./split-button.component.scss"
            ],
            "styles": [],
            "template": "<p-splitButton\n  [label]=\"label\"\n  [disabled]=\"disabled\"\n  [model]=\"items\"\n  (onDropdownClick)=\"onDropdownClick.emit($event)\"\n  (onClick)=\"onClick.emit($event)\">\n</p-splitButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onDropdownClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\n\n@Component({\n  selector: 'freud-split-button',\n  template: `\n    <p-splitButton\n      [label]=\"label\"\n      [disabled]=\"disabled\"\n      [model]=\"items\"\n      (onDropdownClick)=\"onDropdownClick.emit($event)\"\n      (onClick)=\"onClick.emit($event)\">\n    </p-splitButton>\n  `,\n  styleUrls: ['./split-button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-split-button',\n    '[class.freud-split-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudSplitButtonComponent {\n\n  @Input() label!: string;\n  @Input() disabled: boolean = false;\n  @Input() items!: FreudMenuItem[];\n  @Input() bgColor: boolean = false;\n  @Output() onClick: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onDropdownClick: EventEmitter<any> = new EventEmitter<any>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// TODO: Verificar o import\r\n@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-split-button:not(.freud-split-bgcolor) {\r\n  .p-button {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n    font-weight: $font-weight-bold;\r\n  }\r\n  .p-button:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n.freud-split-button.freud-split-bgcolor {\r\n  .p-button {\r\n    background-color: $neutral-color-white;\r\n    border-color: $neutral-color-white;\r\n    font-weight: $font-weight-bold;\r\n    color: $brand-color-pure;\r\n  }\r\n  .p-button:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n.freud-split-button {\r\n  .p-menu .p-menuitem-link:hover {\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n  .p-splitbutton-defaultbutton {\r\n    border-radius: $border-radius-md 0 0 $border-radius-md;\r\n  }\r\n  .p-splitbutton-menubutton {\r\n    border-radius: 0 $border-radius-md $border-radius-md 0;\r\n  }\r\n\r\n  .p-menu a.p-menuitem-link .p-menuitem-text,\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\r\n  .p-menu .p-menuitem-link .p-menuitem-icon {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n  .p-menuitem-link:focus {\r\n    box-shadow: 0 0 0 1px $brand-color-01;\r\n    background-color: $brand-color-01;\r\n  }\r\n  .p-menu-overlay {\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n}\r\n",
                    "styleUrl": "./split-button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSplitterComponent",
            "id": "component-FreudSplitterComponent-2d505413c551986864f50e102e99211a856e689d93185b4affe26e40f9624055d5e7e8878d51b6603721f4fc837a57fa607df93bf63e5c1cf52c0edad3134330",
            "file": "projects/web-components/src/components/structure/splitter/splitter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-splitter",
            "styleUrls": [
                "./splitter.component.scss"
            ],
            "styles": [],
            "template": "<p-splitter\n  [panelSizes]=\"panelSizes\"\n  [style]=\"style\"\n  [layout]=\"layout || 'horizontal'\"\n  [minSizes]=\"minSizes\"\n  [panelStyleClass]=\"panelStyleClass\"\n  [panelStyle]=\"panelStyle\"\n  (onResizeEnd)=\"onResizeEnd.emit($event)\"\n  (onResizeStart)=\"onResizeStart.emit($event)\">\n  <ng-template ngFor let-panel let-i=\"index\" [ngForOf]=\"panels\">\n    <ng-template pTemplate>\n      <ng-container *ngTemplateOutlet=\"panel\"></ng-container>\n    </ng-template>\n  </ng-template>\n</p-splitter>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "gutterSize",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "minSizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "panelSizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "panelStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "Object",
                    "decorators": []
                },
                {
                    "name": "panelStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onResizeEnd",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onResizeStart",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "panels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "PrimeTemplate"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit,\n  Component,\n  ContentChildren, EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport { PrimeTemplate } from \"primeng/api\";\n\n@Component({\n  selector: 'freud-splitter',\n  template: `\n    <p-splitter\n      [panelSizes]=\"panelSizes\"\n      [style]=\"style\"\n      [layout]=\"layout || 'horizontal'\"\n      [minSizes]=\"minSizes\"\n      [panelStyleClass]=\"panelStyleClass\"\n      [panelStyle]=\"panelStyle\"\n      (onResizeEnd)=\"onResizeEnd.emit($event)\"\n      (onResizeStart)=\"onResizeStart.emit($event)\">\n      <ng-template ngFor let-panel let-i=\"index\" [ngForOf]=\"panels\">\n        <ng-template pTemplate>\n          <ng-container *ngTemplateOutlet=\"panel\"></ng-container>\n        </ng-template>\n      </ng-template>\n    </p-splitter>\n  `,\n  styleUrls: ['./splitter.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-splitter',\n  }\n})\nexport class FreudSplitterComponent implements AfterContentInit {\n\n  @Input() panelSizes!: number[];\n  @Input() minSizes!: number[];\n  @Input() layout: \"horizontal\" | \"vertical\" = 'horizontal';\n  @Input() panelStyleClass!: string;\n  @Input() gutterSize: number = 4;\n  @Input() panelStyle!: Object;\n  @Input() style!: any;\n  panels: any[] = [];\n  @ContentChildren(PrimeTemplate) templates!: QueryList<any>;\n  @Output() onResizeStart: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onResizeEnd: EventEmitter<any> = new EventEmitter<any>();\n\n  ngAfterContentInit() {\n    this.templates.forEach((item) => {\n      this.panels.push(item.template);\n    });\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-splitter {\r\n  .p-splitter {\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./splitter.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "FreudStepsComponent",
            "id": "component-FreudStepsComponent-eecfadf3cb777efa3dcde334d52ad34e2fb23ac5677b858ea0b24d776b28fc512921e44d2c0dd13b0afe3ecca0ae0ba650e0ced6b0cc580fe9eb21cc932539cf",
            "file": "projects/web-components/src/components/feedback/steps/steps.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-steps",
            "styleUrls": [
                "./steps.component.scss"
            ],
            "styles": [],
            "template": "<p-steps\n  [model]=\"model\"\n  [activeIndex]=\"activeIndex\"\n  [readonly]=\"readonly\"\n  (activeIndexChange)=\"activeIndexChange.emit($event)\">\n</p-steps>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "StepMenu[]",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\nexport interface StepMenu extends FreudMenuItem {}\n\n@Component({\n  selector: 'freud-steps',\n  template: `\n    <p-steps\n      [model]=\"model\"\n      [activeIndex]=\"activeIndex\"\n      [readonly]=\"readonly\"\n      (activeIndexChange)=\"activeIndexChange.emit($event)\">\n    </p-steps>\n  `,\n  styleUrls: ['./steps.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-steps',\n    '[class.freud-steps-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudStepsComponent {\n\n  @Input() model!: StepMenu[];\n  @Input() readonly: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() activeIndex: number = 0;\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables.scss';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-steps {\r\n  .p-steps .p-steps-item:before {\r\n    border-top: 1px solid $neutral-color-light-03;\r\n  }\r\n\r\n  .p-steps-item {\r\n    opacity: 1 !important;\r\n    font-weight: $font-weight-bold;\r\n  }\r\n  .p-steps .p-steps-item:not(.p-highlight) .p-menuitem-link .p-steps-number {\r\n    color: $neutral-color-dark-01;\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n  .p-steps .p-steps-item.p-highlight .p-steps-number {\r\n    background-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n    border: $brand-color-pure;\r\n  }\r\n\r\n  &:not(.freud-steps-bgcolor) {\r\n    .p-steps .p-steps-item .p-menuitem-link .p-steps-title {\r\n      color: $neutral-color-dark-03;\r\n    }\r\n  }\r\n\r\n  .p-steps .p-steps-item .p-menuitem-link .p-steps-title,\r\n  .p-steps .p-steps-item.p-highlight .p-steps-number {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n\r\n  &.freud-steps-bgcolor {\r\n    .p-steps .p-steps-item .p-menuitem-link {\r\n      background-color: transparent;\r\n    }\r\n    .p-steps .p-steps-item .p-menuitem-link .p-steps-title {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./steps.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSwitchComponent",
            "id": "component-FreudSwitchComponent-234a0d10192a858a371f83dbfaa41fd25549f895498641e7254846d759971fa0e6cc4853dcb1d23d0d7bf5d39ec37487b8299060079f795445c7695bdc6763a3",
            "file": "projects/web-components/src/components/forms/switch/switch.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSwitchComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-switch",
            "styleUrls": [
                "./switch.component.scss"
            ],
            "styles": [],
            "template": "<p-inputSwitch\n  [id]=\"id\"\n  [class.ng-invalid]=\"invalid\"\n  [class.ng-dirty]=\"invalid\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  [trueValue]=\"trueValue\"\n  [falseValue]=\"falseValue\"\n  [name]=\"name\"\n  (onChange)=\"onChange.emit($event)\">\n</p-inputSwitch>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-switch',\r\n  styleUrls: ['./switch.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-inputSwitch\r\n      [id]=\"id\"\r\n      [class.ng-invalid]=\"invalid\"\r\n      [class.ng-dirty]=\"invalid\"\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [required]=\"required\"\r\n      [trueValue]=\"trueValue\"\r\n      [falseValue]=\"falseValue\"\r\n      [name]=\"name\"\r\n      (onChange)=\"onChange.emit($event)\">\r\n    </p-inputSwitch>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-switch',\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudSwitchComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudSwitchComponent implements ControlValueAccessor {\r\n  @Input() invalid: boolean = false;\r\n  @Input() disabled = false;\r\n  @Input() name: string = '';\r\n  @Input() falseValue: any = false;\r\n  @Input() trueValue: any = true;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: boolean;\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onChange.emit(v);\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: boolean){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-input-switch {\r\n  .p-inputswitch .p-inputswitch-slider {\r\n    background-color: $neutral-color-dark-01;\r\n  }\r\n  .p-inputswitch:not(.p-disabled):hover .p-inputswitch-slider {\r\n    background-color: $neutral-color-dark-02;\r\n  }\r\n\r\n  .p-inputswitch.p-inputswitch-checked .p-inputswitch-slider {\r\n    background-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputswitch.p-inputswitch-checked:not(.p-disabled):hover .p-inputswitch-slider {\r\n    background-color: $brand-color-04;\r\n  }\r\n\r\n  .p-inputswitch.p-focus .p-inputswitch-slider {\r\n    box-shadow: $shadow-focused-zen;\r\n  }\r\n}\r\n",
                    "styleUrl": "./switch.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            }
        },
        {
            "name": "FreudTabMenuComponent",
            "id": "component-FreudTabMenuComponent-478233c4000f3c613edefc0e06ad5c32e1d180871e1409e675ae052c7b2428f486f160302cb0cfe570f6b45c73b715130d574c0b67dffb80e1c2ee2330b801f6",
            "file": "projects/web-components/src/components/structure/tab-menu/tab-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-menu",
            "styleUrls": [
                "./tab-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-tabMenu\n  [model]=\"items\"\n  [styleClass]=\"'freud-typography bodyBoldAuto'\"\n  [activeItem]=\"activeItem\"></p-tabMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FreudMenuItem",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api\";\n\n@Component({\n  selector: 'freud-tab-menu',\n  template: `\n    <p-tabMenu\n      [model]=\"items\"\n      [styleClass]=\"'freud-typography bodyBoldAuto'\"\n      [activeItem]=\"activeItem\"></p-tabMenu>\n  `,\n  styleUrls: ['./tab-menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-menu',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @Input() activeItem!: FreudMenuItem;\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-tab-menu {\r\n\r\n  &:not(.freud-bgcolor) {\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\r\n      color: $neutral-color-dark-02;\r\n    }\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link {\r\n      border-color: $brand-color-pure;\r\n      color: $brand-color-pure;\r\n    }\r\n\r\n    .p-tabmenu .p-tabmenu-nav {\r\n      border-color: $neutral-color-light-03;\r\n      border-width: 0 0 2px 0;\r\n    }\r\n  }\r\n\r\n  &.freud-bgcolor {\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\r\n      color: $brand-color-03;\r\n      border-color: $brand-color-03;\r\n      border-width: 0 0 2px 0;\r\n    }\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link,\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):not(.p-disabled):hover .p-menuitem-link {\r\n      background-color: transparent;\r\n      border-color: $brand-color-01;\r\n      color: $brand-color-01;\r\n    }\r\n\r\n    .p-tabmenu .p-tabmenu-nav {\r\n      border-color: $brand-color-03;\r\n      border-width: 0 0 2px 0;\r\n      background: transparent;\r\n    }\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\r\n      background-color: transparent;\r\n    }\r\n  }\r\n\r\n  .p-menuitem-text {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n\r\n  .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link:not(.p-disabled):focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tab-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTabPanelComponent",
            "id": "component-FreudTabPanelComponent-542b5833f03c8915da064b9dc3107e85685ae818a3d4fbfe2f78f45aa336a1232ab652193d02128bfd0f110ac5539a530f1ac889bb8476f37a2c603d62c1236d",
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-panel",
            "styleUrls": [
                "./tab-view.component.scss"
            ],
            "styles": [],
            "template": "<p-tabPanel #ref [id]=\"id\" [leftIcon]=\"leftIcon\" [rightIcon]=\"\" [disabled]=\"disabled\" [header]=\"header\" [selected]=\"selected\" [closable]=\"closable\">\n    <ng-content></ng-content>\n</p-tabPanel>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "leftIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rightIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TabPanel",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ref'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit, AfterViewChecked, ChangeDetectorRef,\n  Component,\n  ContentChildren, ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from \"rxjs\";\nimport { BlockableUI } from \"primeng/api\";\nimport { DomHandler } from \"primeng/dom\";\nimport { TabPanel } from \"primeng/tabview\";\n\n@Component({\n  selector: 'freud-tab-panel',\n  template: `\n    <p-tabPanel #ref [id]=\"id\" [leftIcon]=\"leftIcon\" [rightIcon]=\"\" [disabled]=\"disabled\" [header]=\"header\" [selected]=\"selected\" [closable]=\"closable\">\n        <ng-content></ng-content>\n    </p-tabPanel>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-panel',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabPanelComponent {\n\n  @Input() header!: string;\n  @Input() id!: string;\n  @Input() leftIcon!: string;\n  @Input() rightIcon!: string;\n  @Input() disabled: boolean = false;\n  @Input() closable: boolean = false;\n  @Input() selected: boolean = false;\n\n  @Input() bgColor: boolean = false;\n\n  @ViewChild('ref') ref!: TabPanel;\n\n}\n\n@Component({\n  selector: 'freud-tab-view',\n  template: `\n    <div [ngClass]=\"{ 'p-tabview p-component': true, 'p-tabview-scrollable': scrollable }\" [ngStyle]=\"style\" [class]=\"styleClass\">\n      <div class=\"p-tabview-nav-container\">\n        <button *ngIf=\"scrollable && !backwardIsDisabled\" #prevBtn class=\"p-tabview-nav-prev p-tabview-nav-btn p-link\" (click)=\"navBackward()\" type=\"button\" pRipple>\n          <span class=\"pi pi-chevron-left\"></span>\n        </button>\n        <div #content class=\"p-tabview-nav-content\" (scroll)=\"onScroll($event)\">\n          <ul #navbar class=\"p-tabview-nav\" role=\"tablist\">\n            <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n              <li role=\"presentation\" [ngClass]=\"{ 'p-highlight': tab.selected, 'p-disabled': tab.disabled }\" [ngStyle]=\"tab.headerStyle\" [class]=\"tab.headerStyleClass\" *ngIf=\"!tab.closed\">\n                <a\n                  role=\"tab\"\n                  class=\"p-tabview-nav-link\"\n                  [attr.id]=\"tab.id + '-label'\"\n                  [attr.aria-selected]=\"tab.selected\"\n                  [attr.aria-controls]=\"tab.id\"\n                  (click)=\"open($event, tab)\"\n                  (keydown.enter)=\"open($event, tab)\"\n                  pRipple\n                  [attr.tabindex]=\"tab.disabled ? null : '0'\"\n                >\n                  <span class=\"p-tabview-left-icon\" [ngClass]=\"tab.leftIcon\" *ngIf=\"tab.leftIcon\"></span>\n                  <span class=\"p-tabview-title\">{{ tab.header }}</span>\n                  <span class=\"p-tabview-right-icon\" [ngClass]=\"tab.rightIcon\" *ngIf=\"tab.rightIcon\"></span>\n<!--                  <ng-container *ngTemplateOutlet=\"tab.headerTemplate\"></ng-container>-->\n                  <span *ngIf=\"tab.closable\" class=\"p-tabview-close pi pi-times\" (click)=\"close($event, tab)\"></span>\n                </a>\n              </li>\n            </ng-template>\n            <li #inkbar class=\"p-tabview-ink-bar\"></li>\n          </ul>\n        </div>\n        <button *ngIf=\"scrollable && !forwardIsDisabled\" #nextBtn class=\"p-tabview-nav-next p-tabview-nav-btn p-link\" (click)=\"navForward()\" type=\"button\" pRipple>\n          <span class=\"pi pi-chevron-right\"></span>\n        </button>\n      </div>\n      <div class=\"p-tabview-panels\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-view p-element',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabViewComponent implements AfterContentInit, AfterViewChecked, OnDestroy, BlockableUI {\n  @Input() orientation: string = 'top';\n\n  @Input() style: any;\n\n  @Input() styleClass!: string;\n\n  @Input() controlClose!: boolean;\n  @Input() bgColor: boolean = false;\n\n  @Input() scrollable!: boolean;\n\n  @ViewChild('content') content!: ElementRef;\n\n  @ViewChild('navbar') navbar!: ElementRef;\n\n  @ViewChild('prevBtn') prevBtn!: ElementRef;\n\n  @ViewChild('nextBtn') nextBtn!: ElementRef;\n\n  @ViewChild('inkbar') inkbar!: ElementRef;\n\n  @ContentChildren(FreudTabPanelComponent) tabPanels!: QueryList<FreudTabPanelComponent>;\n\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\n\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter();\n\n  initialized!: boolean;\n\n  tabs!: FreudTabPanelComponent[];\n\n  _activeIndex!: number;\n\n  preventActiveIndexPropagation!: boolean;\n\n  tabChanged!: boolean;\n\n  backwardIsDisabled: boolean = true;\n\n  forwardIsDisabled: boolean = false;\n\n  private tabChangesSubscription!: Subscription;\n\n  constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n  ngAfterContentInit() {\n    this.initTabs();\n\n    this.tabChangesSubscription = this.tabPanels.changes.subscribe((_) => {\n      this.initTabs();\n    });\n  }\n\n  ngAfterViewChecked() {\n    if (this.tabChanged) {\n      this.updateInkBar();\n      this.tabChanged = false;\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.tabChangesSubscription) {\n      this.tabChangesSubscription.unsubscribe();\n    }\n  }\n\n  initTabs(): void {\n    this.tabs = this.tabPanels.toArray();\n    let selectedTab: FreudTabPanelComponent = this.findSelectedTab()!;\n    if (!selectedTab && this.tabs.length) {\n      if (this.activeIndex != null && this.tabs.length > this.activeIndex) this.tabs[this.activeIndex].selected = true;\n      else this.tabs[0].selected = true;\n\n      this.tabChanged = true;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  open(event: Event, tab: FreudTabPanelComponent) {\n    if (tab.disabled) {\n      if (event) {\n        event.preventDefault();\n      }\n      return;\n    }\n\n    if (!tab.selected) {\n      let selectedTab: FreudTabPanelComponent = this.findSelectedTab()!;\n      if (selectedTab) {\n        selectedTab.selected = false;\n      }\n\n      this.tabChanged = true;\n      tab.selected = true;\n      let selectedTabIndex = this.findTabIndex(tab);\n      this.preventActiveIndexPropagation = true;\n      this.activeIndexChange.emit(selectedTabIndex);\n      this.onChange.emit({ originalEvent: event, index: selectedTabIndex });\n\n      this.updateScrollBar(selectedTabIndex);\n    }\n\n    if (event) {\n      event.preventDefault();\n    }\n  }\n\n  close(event: Event, tab: FreudTabPanelComponent) {\n    if (this.controlClose) {\n      this.onClose.emit({\n        originalEvent: event,\n        index: this.findTabIndex(tab),\n        close: () => {\n          this.closeTab(tab);\n        }\n      });\n    } else {\n      this.closeTab(tab);\n      this.onClose.emit({\n        originalEvent: event,\n        index: this.findTabIndex(tab)\n      });\n    }\n\n    event.stopPropagation();\n  }\n\n  closeTab(tab: FreudTabPanelComponent) {\n    if (tab.disabled) {\n      return;\n    }\n    if (tab.selected) {\n      this.tabChanged = true;\n      tab.selected = false;\n      for (let i = 0; i < this.tabs.length; i++) {\n        let tabPanel = this.tabs[i];\n        if (!tabPanel.ref.closed && !tab.disabled) {\n          tabPanel.selected = true;\n          break;\n        }\n      }\n    }\n\n    tab.ref.closed = true;\n  }\n\n  findSelectedTab() {\n    for (let i = 0; i < this.tabs.length; i++) {\n      if (this.tabs[i].selected) {\n        return this.tabs[i];\n      }\n    }\n    return null;\n  }\n\n  findTabIndex(tab: FreudTabPanelComponent) {\n    let index = -1;\n    for (let i = 0; i < this.tabs.length; i++) {\n      if (this.tabs[i] == tab) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  getBlockableElement(): HTMLElement {\n    return this.el.nativeElement.children[0];\n  }\n\n  @Input() get activeIndex(): number {\n    return this._activeIndex;\n  }\n\n  set activeIndex(val: number) {\n    this._activeIndex = val;\n    if (this.preventActiveIndexPropagation) {\n      this.preventActiveIndexPropagation = false;\n      return;\n    }\n\n    if (this.tabs && this.tabs.length && this._activeIndex != null && this.tabs.length > this._activeIndex) {\n      this.findSelectedTab()!.selected = false;\n      this.tabs[this._activeIndex].selected = true;\n      this.tabChanged = true;\n\n      this.updateScrollBar(val);\n    }\n  }\n\n  updateInkBar() {\n    if (this.navbar) {\n      const tabHeader: HTMLElement | null = DomHandler.findSingle(this.navbar.nativeElement, 'li.p-highlight');\n\n      if (!tabHeader) {\n        return;\n      }\n\n      this.inkbar.nativeElement.style.width = DomHandler.getWidth(tabHeader) + 'px';\n      this.inkbar.nativeElement.style.left = DomHandler.getOffset(tabHeader).left - DomHandler.getOffset(this.navbar.nativeElement).left + 'px';\n    }\n  }\n\n  updateScrollBar(index: number) {\n    let tabHeader = this.navbar.nativeElement.children[index];\n    tabHeader.scrollIntoView({ block: 'nearest' });\n  }\n\n  updateButtonState() {\n    const content = this.content.nativeElement;\n    const { scrollLeft, scrollWidth } = content;\n    const width = DomHandler.getWidth(content);\n\n    this.backwardIsDisabled = scrollLeft === 0;\n    this.forwardIsDisabled = parseInt(scrollLeft) === scrollWidth - width;\n  }\n\n  onScroll(event: any) {\n    this.scrollable && this.updateButtonState();\n\n    event.preventDefault();\n  }\n\n  getVisibleButtonWidths() {\n    return [this.prevBtn?.nativeElement, this.nextBtn?.nativeElement].reduce((acc, el) => (el ? acc + DomHandler.getWidth(el) : acc), 0);\n  }\n\n  navBackward() {\n    const content = this.content.nativeElement;\n    const width = DomHandler.getWidth(content) - this.getVisibleButtonWidths();\n    const pos = content.scrollLeft - width;\n    content.scrollLeft = pos <= 0 ? 0 : pos;\n  }\n\n  navForward() {\n    const content = this.content.nativeElement;\n    const width = DomHandler.getWidth(content) - this.getVisibleButtonWidths();\n    const pos = content.scrollLeft + width;\n    const lastPos = content.scrollWidth - width;\n\n    content.scrollLeft = pos >= lastPos ? lastPos : pos;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-tab-view {\r\n\r\n  &:not(.freud-bgcolor) {\r\n  }\r\n\r\n  &.freud-bgcolor {\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./tab-view.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTabViewComponent",
            "id": "component-FreudTabViewComponent-542b5833f03c8915da064b9dc3107e85685ae818a3d4fbfe2f78f45aa336a1232ab652193d02128bfd0f110ac5539a530f1ac889bb8476f37a2c603d62c1236d",
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-view",
            "styleUrls": [
                "./tab-view.component.scss"
            ],
            "styles": [],
            "template": "    <div [ngClass]=\"{ 'p-tabview p-component': true, 'p-tabview-scrollable': scrollable }\" [ngStyle]=\"style\" [class]=\"styleClass\">\n      <div class=\"p-tabview-nav-container\">\n        <button *ngIf=\"scrollable && !backwardIsDisabled\" #prevBtn class=\"p-tabview-nav-prev p-tabview-nav-btn p-link\" (click)=\"navBackward()\" type=\"button\" pRipple>\n          <span class=\"pi pi-chevron-left\"></span>\n        </button>\n        <div #content class=\"p-tabview-nav-content\" (scroll)=\"onScroll($event)\">\n          <ul #navbar class=\"p-tabview-nav\" role=\"tablist\">\n            <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n              <li role=\"presentation\" [ngClass]=\"{ 'p-highlight': tab.selected, 'p-disabled': tab.disabled }\" [ngStyle]=\"tab.headerStyle\" [class]=\"tab.headerStyleClass\" *ngIf=\"!tab.closed\">\n                <a\n                  role=\"tab\"\n                  class=\"p-tabview-nav-link\"\n                  [attr.id]=\"tab.id + '-label'\"\n                  [attr.aria-selected]=\"tab.selected\"\n                  [attr.aria-controls]=\"tab.id\"\n                  (click)=\"open($event, tab)\"\n                  (keydown.enter)=\"open($event, tab)\"\n                  pRipple\n                  [attr.tabindex]=\"tab.disabled ? null : '0'\"\n                >\n                  <span class=\"p-tabview-left-icon\" [ngClass]=\"tab.leftIcon\" *ngIf=\"tab.leftIcon\"></span>\n                  <span class=\"p-tabview-title\">{{ tab.header }}</span>\n                  <span class=\"p-tabview-right-icon\" [ngClass]=\"tab.rightIcon\" *ngIf=\"tab.rightIcon\"></span>\n<!--                  <ng-container *ngTemplateOutlet=\"tab.headerTemplate\"></ng-container>-->\n                  <span *ngIf=\"tab.closable\" class=\"p-tabview-close pi pi-times\" (click)=\"close($event, tab)\"></span>\n                </a>\n              </li>\n            </ng-template>\n            <li #inkbar class=\"p-tabview-ink-bar\"></li>\n          </ul>\n        </div>\n        <button *ngIf=\"scrollable && !forwardIsDisabled\" #nextBtn class=\"p-tabview-nav-next p-tabview-nav-btn p-link\" (click)=\"navForward()\" type=\"button\" pRipple>\n          <span class=\"pi pi-chevron-right\"></span>\n        </button>\n      </div>\n      <div class=\"p-tabview-panels\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 271,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "controlClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "scrollable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 107,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 102,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeIndexChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 125,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 121,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 123,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 131
                },
                {
                    "name": "backwardIsDisabled",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 137
                },
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 109,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'content'"
                        }
                    ]
                },
                {
                    "name": "el",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 143,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "forwardIsDisabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 139
                },
                {
                    "name": "initialized",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 127
                },
                {
                    "name": "inkbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 117,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'inkbar'"
                        }
                    ]
                },
                {
                    "name": "navbar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 111,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'navbar'"
                        }
                    ]
                },
                {
                    "name": "nextBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 115,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'nextBtn'"
                        }
                    ]
                },
                {
                    "name": "prevBtn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "optional": false,
                    "description": "",
                    "line": 113,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'prevBtn'"
                        }
                    ]
                },
                {
                    "name": "preventActiveIndexPropagation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 133
                },
                {
                    "name": "tabChanged",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 135
                },
                {
                    "name": "tabChangesSubscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 141,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "tabPanels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FreudTabPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 119,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudTabPanelComponent"
                        }
                    ]
                },
                {
                    "name": "tabs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudTabPanelComponent[]",
                    "optional": false,
                    "description": "",
                    "line": 129
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 208,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "closeTab",
                    "args": [
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 228,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "findSelectedTab",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 247,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "findTabIndex",
                    "args": [
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 256,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBlockableElement",
                    "args": [],
                    "optional": false,
                    "returnType": "HTMLElement",
                    "typeParameters": [],
                    "line": 267,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getVisibleButtonWidths",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 324,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initTabs",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 166,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navBackward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 328,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navForward",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 335,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewChecked",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 153,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onScroll",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 318,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 179,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "tab",
                            "type": "FreudTabPanelComponent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateButtonState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 309,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateInkBar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 291,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateScrollBar",
                    "args": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 304,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "index",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit, AfterViewChecked, ChangeDetectorRef,\n  Component,\n  ContentChildren, ElementRef,\n  EventEmitter,\n  Input,\n  OnDestroy,\n  Output,\n  QueryList, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { Subscription } from \"rxjs\";\nimport { BlockableUI } from \"primeng/api\";\nimport { DomHandler } from \"primeng/dom\";\nimport { TabPanel } from \"primeng/tabview\";\n\n@Component({\n  selector: 'freud-tab-panel',\n  template: `\n    <p-tabPanel #ref [id]=\"id\" [leftIcon]=\"leftIcon\" [rightIcon]=\"\" [disabled]=\"disabled\" [header]=\"header\" [selected]=\"selected\" [closable]=\"closable\">\n        <ng-content></ng-content>\n    </p-tabPanel>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-panel',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabPanelComponent {\n\n  @Input() header!: string;\n  @Input() id!: string;\n  @Input() leftIcon!: string;\n  @Input() rightIcon!: string;\n  @Input() disabled: boolean = false;\n  @Input() closable: boolean = false;\n  @Input() selected: boolean = false;\n\n  @Input() bgColor: boolean = false;\n\n  @ViewChild('ref') ref!: TabPanel;\n\n}\n\n@Component({\n  selector: 'freud-tab-view',\n  template: `\n    <div [ngClass]=\"{ 'p-tabview p-component': true, 'p-tabview-scrollable': scrollable }\" [ngStyle]=\"style\" [class]=\"styleClass\">\n      <div class=\"p-tabview-nav-container\">\n        <button *ngIf=\"scrollable && !backwardIsDisabled\" #prevBtn class=\"p-tabview-nav-prev p-tabview-nav-btn p-link\" (click)=\"navBackward()\" type=\"button\" pRipple>\n          <span class=\"pi pi-chevron-left\"></span>\n        </button>\n        <div #content class=\"p-tabview-nav-content\" (scroll)=\"onScroll($event)\">\n          <ul #navbar class=\"p-tabview-nav\" role=\"tablist\">\n            <ng-template ngFor let-tab [ngForOf]=\"tabs\">\n              <li role=\"presentation\" [ngClass]=\"{ 'p-highlight': tab.selected, 'p-disabled': tab.disabled }\" [ngStyle]=\"tab.headerStyle\" [class]=\"tab.headerStyleClass\" *ngIf=\"!tab.closed\">\n                <a\n                  role=\"tab\"\n                  class=\"p-tabview-nav-link\"\n                  [attr.id]=\"tab.id + '-label'\"\n                  [attr.aria-selected]=\"tab.selected\"\n                  [attr.aria-controls]=\"tab.id\"\n                  (click)=\"open($event, tab)\"\n                  (keydown.enter)=\"open($event, tab)\"\n                  pRipple\n                  [attr.tabindex]=\"tab.disabled ? null : '0'\"\n                >\n                  <span class=\"p-tabview-left-icon\" [ngClass]=\"tab.leftIcon\" *ngIf=\"tab.leftIcon\"></span>\n                  <span class=\"p-tabview-title\">{{ tab.header }}</span>\n                  <span class=\"p-tabview-right-icon\" [ngClass]=\"tab.rightIcon\" *ngIf=\"tab.rightIcon\"></span>\n<!--                  <ng-container *ngTemplateOutlet=\"tab.headerTemplate\"></ng-container>-->\n                  <span *ngIf=\"tab.closable\" class=\"p-tabview-close pi pi-times\" (click)=\"close($event, tab)\"></span>\n                </a>\n              </li>\n            </ng-template>\n            <li #inkbar class=\"p-tabview-ink-bar\"></li>\n          </ul>\n        </div>\n        <button *ngIf=\"scrollable && !forwardIsDisabled\" #nextBtn class=\"p-tabview-nav-next p-tabview-nav-btn p-link\" (click)=\"navForward()\" type=\"button\" pRipple>\n          <span class=\"pi pi-chevron-right\"></span>\n        </button>\n      </div>\n      <div class=\"p-tabview-panels\">\n        <ng-content></ng-content>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-view p-element',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabViewComponent implements AfterContentInit, AfterViewChecked, OnDestroy, BlockableUI {\n  @Input() orientation: string = 'top';\n\n  @Input() style: any;\n\n  @Input() styleClass!: string;\n\n  @Input() controlClose!: boolean;\n  @Input() bgColor: boolean = false;\n\n  @Input() scrollable!: boolean;\n\n  @ViewChild('content') content!: ElementRef;\n\n  @ViewChild('navbar') navbar!: ElementRef;\n\n  @ViewChild('prevBtn') prevBtn!: ElementRef;\n\n  @ViewChild('nextBtn') nextBtn!: ElementRef;\n\n  @ViewChild('inkbar') inkbar!: ElementRef;\n\n  @ContentChildren(FreudTabPanelComponent) tabPanels!: QueryList<FreudTabPanelComponent>;\n\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\n\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter();\n\n  initialized!: boolean;\n\n  tabs!: FreudTabPanelComponent[];\n\n  _activeIndex!: number;\n\n  preventActiveIndexPropagation!: boolean;\n\n  tabChanged!: boolean;\n\n  backwardIsDisabled: boolean = true;\n\n  forwardIsDisabled: boolean = false;\n\n  private tabChangesSubscription!: Subscription;\n\n  constructor(public el: ElementRef, public cd: ChangeDetectorRef) {}\n\n  ngAfterContentInit() {\n    this.initTabs();\n\n    this.tabChangesSubscription = this.tabPanels.changes.subscribe((_) => {\n      this.initTabs();\n    });\n  }\n\n  ngAfterViewChecked() {\n    if (this.tabChanged) {\n      this.updateInkBar();\n      this.tabChanged = false;\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.tabChangesSubscription) {\n      this.tabChangesSubscription.unsubscribe();\n    }\n  }\n\n  initTabs(): void {\n    this.tabs = this.tabPanels.toArray();\n    let selectedTab: FreudTabPanelComponent = this.findSelectedTab()!;\n    if (!selectedTab && this.tabs.length) {\n      if (this.activeIndex != null && this.tabs.length > this.activeIndex) this.tabs[this.activeIndex].selected = true;\n      else this.tabs[0].selected = true;\n\n      this.tabChanged = true;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  open(event: Event, tab: FreudTabPanelComponent) {\n    if (tab.disabled) {\n      if (event) {\n        event.preventDefault();\n      }\n      return;\n    }\n\n    if (!tab.selected) {\n      let selectedTab: FreudTabPanelComponent = this.findSelectedTab()!;\n      if (selectedTab) {\n        selectedTab.selected = false;\n      }\n\n      this.tabChanged = true;\n      tab.selected = true;\n      let selectedTabIndex = this.findTabIndex(tab);\n      this.preventActiveIndexPropagation = true;\n      this.activeIndexChange.emit(selectedTabIndex);\n      this.onChange.emit({ originalEvent: event, index: selectedTabIndex });\n\n      this.updateScrollBar(selectedTabIndex);\n    }\n\n    if (event) {\n      event.preventDefault();\n    }\n  }\n\n  close(event: Event, tab: FreudTabPanelComponent) {\n    if (this.controlClose) {\n      this.onClose.emit({\n        originalEvent: event,\n        index: this.findTabIndex(tab),\n        close: () => {\n          this.closeTab(tab);\n        }\n      });\n    } else {\n      this.closeTab(tab);\n      this.onClose.emit({\n        originalEvent: event,\n        index: this.findTabIndex(tab)\n      });\n    }\n\n    event.stopPropagation();\n  }\n\n  closeTab(tab: FreudTabPanelComponent) {\n    if (tab.disabled) {\n      return;\n    }\n    if (tab.selected) {\n      this.tabChanged = true;\n      tab.selected = false;\n      for (let i = 0; i < this.tabs.length; i++) {\n        let tabPanel = this.tabs[i];\n        if (!tabPanel.ref.closed && !tab.disabled) {\n          tabPanel.selected = true;\n          break;\n        }\n      }\n    }\n\n    tab.ref.closed = true;\n  }\n\n  findSelectedTab() {\n    for (let i = 0; i < this.tabs.length; i++) {\n      if (this.tabs[i].selected) {\n        return this.tabs[i];\n      }\n    }\n    return null;\n  }\n\n  findTabIndex(tab: FreudTabPanelComponent) {\n    let index = -1;\n    for (let i = 0; i < this.tabs.length; i++) {\n      if (this.tabs[i] == tab) {\n        index = i;\n        break;\n      }\n    }\n    return index;\n  }\n\n  getBlockableElement(): HTMLElement {\n    return this.el.nativeElement.children[0];\n  }\n\n  @Input() get activeIndex(): number {\n    return this._activeIndex;\n  }\n\n  set activeIndex(val: number) {\n    this._activeIndex = val;\n    if (this.preventActiveIndexPropagation) {\n      this.preventActiveIndexPropagation = false;\n      return;\n    }\n\n    if (this.tabs && this.tabs.length && this._activeIndex != null && this.tabs.length > this._activeIndex) {\n      this.findSelectedTab()!.selected = false;\n      this.tabs[this._activeIndex].selected = true;\n      this.tabChanged = true;\n\n      this.updateScrollBar(val);\n    }\n  }\n\n  updateInkBar() {\n    if (this.navbar) {\n      const tabHeader: HTMLElement | null = DomHandler.findSingle(this.navbar.nativeElement, 'li.p-highlight');\n\n      if (!tabHeader) {\n        return;\n      }\n\n      this.inkbar.nativeElement.style.width = DomHandler.getWidth(tabHeader) + 'px';\n      this.inkbar.nativeElement.style.left = DomHandler.getOffset(tabHeader).left - DomHandler.getOffset(this.navbar.nativeElement).left + 'px';\n    }\n  }\n\n  updateScrollBar(index: number) {\n    let tabHeader = this.navbar.nativeElement.children[index];\n    tabHeader.scrollIntoView({ block: 'nearest' });\n  }\n\n  updateButtonState() {\n    const content = this.content.nativeElement;\n    const { scrollLeft, scrollWidth } = content;\n    const width = DomHandler.getWidth(content);\n\n    this.backwardIsDisabled = scrollLeft === 0;\n    this.forwardIsDisabled = parseInt(scrollLeft) === scrollWidth - width;\n  }\n\n  onScroll(event: any) {\n    this.scrollable && this.updateButtonState();\n\n    event.preventDefault();\n  }\n\n  getVisibleButtonWidths() {\n    return [this.prevBtn?.nativeElement, this.nextBtn?.nativeElement].reduce((acc, el) => (el ? acc + DomHandler.getWidth(el) : acc), 0);\n  }\n\n  navBackward() {\n    const content = this.content.nativeElement;\n    const width = DomHandler.getWidth(content) - this.getVisibleButtonWidths();\n    const pos = content.scrollLeft - width;\n    content.scrollLeft = pos <= 0 ? 0 : pos;\n  }\n\n  navForward() {\n    const content = this.content.nativeElement;\n    const width = DomHandler.getWidth(content) - this.getVisibleButtonWidths();\n    const pos = content.scrollLeft + width;\n    const lastPos = content.scrollWidth - width;\n\n    content.scrollLeft = pos >= lastPos ? lastPos : pos;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-tab-view {\r\n\r\n  &:not(.freud-bgcolor) {\r\n  }\r\n\r\n  &.freud-bgcolor {\r\n\r\n  }\r\n}\r\n",
                    "styleUrl": "./tab-view.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 141,
                "jsdoctags": [
                    {
                        "name": "el",
                        "type": "ElementRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterContentInit",
                "AfterViewChecked",
                "OnDestroy",
                "BlockableUI"
            ],
            "accessors": {
                "activeIndex": {
                    "name": "activeIndex",
                    "setSignature": {
                        "name": "activeIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 275,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "number",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "activeIndex",
                        "type": "number",
                        "returnType": "number",
                        "line": 271
                    }
                }
            }
        },
        {
            "name": "FreudTagComponent",
            "id": "component-FreudTagComponent-0ee1e0559b609d344ab7286dbe88b5dd0f8a5761136302282cca21e6ad3cd22c4a54050258e3d40334946644e0f8a17a59e304b0a0a12851baf077d8f6a47a41",
            "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "template": "<p-tag [value]=\"value\" class=\"freud-tag-{{color || 'primary'}}\" [rounded]=\"true\"></p-tag>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "colors",
                    "decorators": []
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\ntype colors = 'primary' | 'success' | 'info' | 'warning' | 'error';\n\n@Component({\n  selector: 'freud-tag',\n  template: `\n    <p-tag [value]=\"value\" class=\"freud-tag-{{color || 'primary'}}\" [rounded]=\"true\"></p-tag>\n  `,\n  host: {\n    class: 'freud-tag freud-typography smallSemibold1-5',\n    '[class.outline]':  'outline'\n  },\n  styleUrls: ['./tag.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FreudTagComponent {\n\n  @Input() value!: string;\n  @Input() color: colors = 'primary';\n  @Input() outline: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-tag .p-tag {\r\n  padding: 3px $spacing-size-nano;\r\n}\r\n.freud-tag .p-tag-value {\r\n    font-weight: $font-weight-semibold;\r\n    font-size: $font-size-xxxs;\r\n    line-height: 18px;\r\n}\r\n\r\n.freud-tag:not(.outline) {\r\n\r\n  .freud-tag-primary .p-tag {\r\n    background-color: $brand-color-pure;\r\n  }\r\n\r\n  .freud-tag-success .p-tag {\r\n    background-color: $feedback-color-positive-04;\r\n  }\r\n  .freud-tag-info .p-tag {\r\n    background-color: $feedback-color-neutral-pure;\r\n  }\r\n  .freud-tag-warning .p-tag {\r\n    background-color: $feedback-color-warning-pure;\r\n    color: $neutral-color-black;\r\n  }\r\n  .freud-tag-error .p-tag {\r\n    background-color: $feedback-color-negative-04;\r\n  }\r\n}\r\n\r\n.freud-tag.outline {\r\n  .p-tag {\r\n    background-color: $neutral-color-white;\r\n  }\r\n\r\n  .freud-tag-primary .p-tag {\r\n    border: 1px solid $brand-color-pure;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .freud-tag-success .p-tag {\r\n    border: 1px solid $feedback-color-positive-04;\r\n    color: $feedback-color-positive-04;\r\n  }\r\n  .freud-tag-info .p-tag {\r\n    border: 1px solid $feedback-color-neutral-pure;\r\n    color: $feedback-color-neutral-pure;\r\n  }\r\n  .freud-tag-warning .p-tag {\r\n    border: 1px solid $feedback-color-warning-pure;\r\n    color: $feedback-color-warning-pure;\r\n  }\r\n  .freud-tag-error .p-tag {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    color: $feedback-color-negative-04;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudToastComponent",
            "id": "component-FreudToastComponent-f2733b6a1c2f38c9cfa0dcc954c47cf6935acc7af5d18bdf89707fe49bcb3d3c70445a0938ef915b6ee6e7e9292bf8256577ebed5d44ca3b57c9eeb6fcdfe47a",
            "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "template": "<p-toast [position]=\"position\" [key]=\"key\"></p-toast>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "positions",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from \"@angular/core\";\n\ntype positions = \"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\";\n\n@Component({\n  selector: 'freud-toast',\n  template: `\n    <p-toast [position]=\"position\" [key]=\"key\"></p-toast>\n  `,\n  styleUrls: ['./toast.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-toast'\n  }\n})\nexport class FreudToastComponent {\n\n  @Input() position: positions = 'top-right';\n  @Input() key!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-toast {\r\n  .p-toast .p-toast-message {\r\n    border: unset;\r\n    border-radius: $border-radius-md;\r\n    color: $neutral-color-dark-04;\r\n    box-shadow: unset;\r\n\r\n    .p-toast-message-content .p-toast-message-icon {\r\n      font-size: 24px;\r\n    }\r\n\r\n    &.p-toast-message-success {\r\n      background-color: $feedback-color-positive-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-positive-pure;\r\n      }\r\n    }\r\n\r\n    &.p-toast-message-info {\r\n      background-color: $feedback-color-neutral-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-neutral-pure;\r\n      }\r\n    }\r\n\r\n    &.p-toast-message-warn {\r\n      background-color: $feedback-color-warning-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-alert-pure;\r\n      }\r\n    }\r\n\r\n    &.p-toast-message-error {\r\n      background-color: $feedback-color-negative-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-negative-pure;\r\n      }\r\n    }\r\n\r\n    .freud-icon {\r\n      font-size: 31px;\r\n      margin-left: -5px;\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n\r\n  .p-toast .p-toast-icon-close {\r\n    color:$neutral-color-dark-04 !important;\r\n  }\r\n  .p-toast .p-toast-message .p-toast-icon-close:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-toast .p-message-summary {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-toast-detail {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .pi-exclamation-triangle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e903\";\r\n  }\r\n\r\n  .pi-info-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9ed\";\r\n  }\r\n\r\n  .pi-times-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9b9\";\r\n  }\r\n  .pi-check:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e973\";\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudToastExampleComponent",
            "id": "component-FreudToastExampleComponent-c7f2e4988d05c59b827d273486ef97a7819c21dba878e4381573cd34fb93292456d7e8d765b582fe1d8b592eaca2e07edcf392196d6cff2341ad963f7ae3206f",
            "file": "stories/feedback/toast/toast-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-toast-examples",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-toast></freud-toast>\n<div style=\"display: flex; gap: 12px\">\n  <freud-button (click)=\"confirm('success', 'Success')\">Success</freud-button>\n  <freud-button (click)=\"confirm('info', 'Info')\">Info</freud-button>\n  <freud-button (click)=\"confirm('warn', 'Warning')\">Warning</freud-button>\n  <freud-button (click)=\"confirm('error', 'Error')\">Error</freud-button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudMessageService } from \"../../../../projects/web-components/src/services/message.service\";\n\n@Component({\n  selector: 'freud-toast-examples',\n  template: `\n    <freud-toast></freud-toast>\n    <div style=\"display: flex; gap: 12px\">\n      <freud-button (click)=\"confirm('success', 'Success')\">Success</freud-button>\n      <freud-button (click)=\"confirm('info', 'Info')\">Info</freud-button>\n      <freud-button (click)=\"confirm('warn', 'Warning')\">Warning</freud-button>\n      <freud-button (click)=\"confirm('error', 'Error')\">Error</freud-button>\n    </div>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudToastExampleComponent {\n\n  constructor(private messageService: FreudMessageService) {}\n\n  confirm(severity: string, summary: string) {\n    this.messageService.add({severity:severity, summary:summary, detail:'Message Content', sticky: true, life: 2000});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "FreudMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "FreudMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudTooltipComponent",
            "id": "component-FreudTooltipComponent-34ba45530cd5c9a6296e135e523dd97a9e2ac3c041c9a888a3cdbc0690011a2ad5a51e87449bde8326da623f021de75696c0d2c7e6e3cc1639e8d944ff9746a2",
            "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "freudTooltip",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[freud-tooltip]",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "template": "<div [pTooltip]=\"tooltipLabel\" [tooltipPosition]=\"tooltipPosition\" [class.bgColor]=\"bgColor\"\n    [tooltipStyleClass]=\"bgColor ? 'freud-tooltip freud-bg-color' : 'freud-tooltip'\" class=\"freud-tooltip-container\">\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tooltipLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "position",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ViewEncapsulation } from '@angular/core';\nimport { Component, Input } from '@angular/core';\n\ntype position = 'top' | 'bottom' | 'left' | 'right';\n\n@Component({\n  selector: '[freud-tooltip]',\n  exportAs: 'freudTooltip',\n  template: `\n    <div [pTooltip]=\"tooltipLabel\" [tooltipPosition]=\"tooltipPosition\" [class.bgColor]=\"bgColor\"\n        [tooltipStyleClass]=\"bgColor ? 'freud-tooltip freud-bg-color' : 'freud-tooltip'\" class=\"freud-tooltip-container\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['./tooltip.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FreudTooltipComponent {\n\n  @Input() tooltipLabel: string = '';\n  @Input() tooltipPosition: position = 'top';\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-tooltip-container {\r\n    display:inline-block;\r\n    position:relative;\r\n}\r\n\r\n.p-tooltip {\r\n    .p-tooltip-text {\r\n        padding: 10.5px;\r\n        color: $neutral-color-white;\r\n        @include typography($font-size-xs, $font-weight-regular, 24px);\r\n        border-radius: $border-radius-md;\r\n        background-color:  $neutral-color-dark-03;\r\n        box-shadow: $shadow-level-3;\r\n    }\r\n}\r\n\r\n.p-tooltip.freud-bg-color {\r\n\r\n  &.p-tooltip-right .p-tooltip-arrow {\r\n    border-right-color: $neutral-color-white;\r\n  }\r\n  &.p-tooltip-left .p-tooltip-arrow {\r\n    border-left-color: $neutral-color-white;\r\n  }\r\n  &.p-tooltip-top .p-tooltip-arrow {\r\n    border-top-color: $neutral-color-white;\r\n  }\r\n  &.p-tooltip-bottom .p-tooltip-arrow {\r\n    border-bottom-color: $neutral-color-white;\r\n  }\r\n\r\n  .p-tooltip-text{\r\n    color: $neutral-color-dark-03;\r\n    background-color: $neutral-color-white;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTypographyComponent",
            "id": "component-FreudTypographyComponent-7723528e8d15aa76f1a73336eff2cac9ab15804bb4605eeb6c7276d239ae97134967bcaba44d064e12cabeb2805ad69f5c24c7ede8f9ba0be5065a8668011771",
            "file": "projects/web-components/src/components/typography/typography.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "freudTypography",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[freud-typography]",
            "styleUrls": [
                "./typography.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fontBgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fontType",
                    "defaultValue": "'bodyRegular1-5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "fontTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { bodyTypes, headingTypes } from './typrography.type';\r\n\r\nexport const types = headingTypes.concat(bodyTypes);\r\n\r\ntype fontTypes = typeof types[number];\r\n\r\n@Component({\r\n  selector: '[freud-typography]',\r\n  exportAs: 'freudTypography',\r\n  styleUrls: ['./typography.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `<ng-content></ng-content> `,\r\n  host: {\r\n    class: 'freud-typography',\r\n    '[class.typography-bg-color]': `fontBgColor`,\r\n  },\r\n})\r\nexport class FreudTypographyComponent {\r\n  @HostBinding('class') @Input() fontType: fontTypes = 'bodyRegular1-5';\r\n  @Input() fontBgColor: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../scss/typography.scss';\r\n",
                    "styleUrl": "./typography.component.scss"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "FreudAccordionModule",
            "id": "module-FreudAccordionModule-3a439709e651dfd7557791a30a8ec446842abcb791bdaff132ab0f84e3cf31b683f1a6ec2b600e6290af47bf18ac6ecf94f5f15a50b54f701dd3b140de74bb3d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudAccordionComponent, FreudAccordionTabComponent } from './accordion.component';\r\nimport { AccordionModule } from \"primeng/accordion\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AccordionModule],\r\n  declarations: [FreudAccordionComponent, FreudAccordionTabComponent],\r\n  exports: [FreudAccordionComponent, FreudAccordionTabComponent]\r\n})\r\nexport class FreudAccordionModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAccordionComponent"
                        },
                        {
                            "name": "FreudAccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAccordionComponent"
                        },
                        {
                            "name": "FreudAccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudActionIconModule",
            "id": "module-FreudActionIconModule-66b70da277a94305b9d43513a799928d242aa28ada2e337c1fab6f46dfb1c933d630ca83960a4c7c1f3154af268eecd26540b6d26fcf94df81b56f5acfa8c9d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/action-icon/action-icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudActionIconComponent } from './action-icon.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n  declarations: [FreudActionIconComponent],\r\n  exports: [FreudActionIconComponent]\r\n})\r\nexport class FreudActionIconModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudActionIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudActionIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAlertMessagesModule",
            "id": "module-FreudAlertMessagesModule-b91cc62ed2580cbf18f932924c68a885504641e50781c7623da6727f462e5b8032f32e4a1edc57e8db9bcbbcc4e49199b0dbf417ff50c326e218d13114bf0b34",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MessagesModule } from \"primeng/messages\";\r\nimport { MessageModule } from 'primeng/message';\r\n\r\nimport { FreudAlertMessageComponent, FreudAlertMessagesComponent } from './alert-messages.component';\r\nimport { FreudMessageService } from \"../../../services/message.service\";\r\nimport { MessageService } from \"primeng/api\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MessageModule, MessagesModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudAlertMessagesComponent, FreudAlertMessageComponent],\r\n  exports: [FreudAlertMessagesComponent, FreudAlertMessageComponent],\r\n  providers: [FreudMessageService, MessageService]\r\n})\r\nexport class FreudAlertMessagesModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAlertMessageComponent"
                        },
                        {
                            "name": "FreudAlertMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAlertMessageComponent"
                        },
                        {
                            "name": "FreudAlertMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAutocompleteExampleModule",
            "id": "module-FreudAutocompleteExampleModule-675c7396ccdfc7a7954db21d658bc8b838dc3422258c821d06c571cf7fa0ddf6689d79982fa27665a119673dfb8eaaad05091be42254195565f29d2b272fea6f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/auto-complete/auto-complete-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudAutoCompleteExampleComponent } from './example.component';\r\nimport {\r\n  FreudAutoCompleteModule,\r\n} from \"@freud-ds/web-components\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudAutoCompleteModule, ReactiveFormsModule, FormsModule],\r\n  declarations: [FreudAutoCompleteExampleComponent],\r\n  exports: [FreudAutoCompleteExampleComponent]\r\n})\r\nexport class FreudAutocompleteExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAutoCompleteModule",
            "id": "module-FreudAutoCompleteModule-3e647e66084276168b1009775d8429379993b6f514a4c2508537668485f7a493929724d97a57839b9c3dc03f8e10e149dce4bc2f2ca31d5a6995da1d5bc6967d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/auto-complete/auto-complete.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudAutoCompleteComponent } from './auto-complete.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { AutoCompleteModule } from \"primeng/autocomplete\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, AutoCompleteModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudAutoCompleteComponent],\r\n  exports: [FreudAutoCompleteComponent]\r\n})\r\nexport class FreudAutoCompleteModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAvatarModule",
            "id": "module-FreudAvatarModule-4539ac0a1b9cce97d95a535a4cd6e8d31873529fe73b29becee856615229fb22c58278fc820cdc4293324c0dbca26a8fe13317ab8ab84b96cf3d3a189ea82397",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AvatarModule } from 'primeng/avatar';\r\n\r\nimport { FreudAvatarComponent } from './avatar.component';\r\nimport { FreudBadgeModule } from '../../feedback/badge';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AvatarModule, FreudBadgeModule],\r\n  declarations: [FreudAvatarComponent],\r\n  exports: [FreudAvatarComponent]\r\n})\r\nexport class FreudAvatarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAvatarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudBadgeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAvatarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBadgeModule",
            "id": "module-FreudBadgeModule-cb68a687561b658c92aa8a6ac6f26eca6d5640eda702091624d0c42f4c0e3d9737b97fd9672761fc6fbce79b64b7b3f464434d75b1741f6b460ef309189ea7d7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/badge/badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BadgeModule } from 'primeng/badge';\r\n\r\nimport { FreudBadgeComponent } from './badge.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, BadgeModule],\r\n  declarations: [FreudBadgeComponent],\r\n  exports: [FreudBadgeComponent],\r\n})\r\nexport class FreudBadgeModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBlockExampleModule",
            "id": "module-FreudBlockExampleModule-d02b24145aa0b891206329294bac55885d49776353286f8e11cbc8d1ec4cf571c5eb6b4103b719bf91b09b4a0300325aa57cc1cf2242196771f36e4887c5282d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/others/block-ui/block-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudBlockExampleComponent } from './example.component';\r\nimport {\r\n  FreudBlockUIModule, FreudButtonModule, FreudCardModule,\r\n} from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudBlockUIModule, FreudButtonModule, FreudCardModule],\r\n  declarations: [FreudBlockExampleComponent],\r\n  exports: [FreudBlockExampleComponent]\r\n})\r\nexport class FreudBlockExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBlockExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudBlockUIModule"
                        },
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBlockExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBlockUIModule",
            "id": "module-FreudBlockUIModule-0f53e4ff67b9b30c4ed6a2300a6a3cdd376b97401562fb9de4bc1c776faa5391b923605fb1fbbf604df20ff5d5559d4615005394122580974d6ee8b43e0a6038",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/block-ui/block-ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudBlockUIComponent } from './block-ui.component';\r\nimport { BlockUIModule } from \"primeng/blockui\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, BlockUIModule],\r\n  declarations: [FreudBlockUIComponent],\r\n  exports: [FreudBlockUIComponent]\r\n})\r\nexport class FreudBlockUIModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBlockUIComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBlockUIComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBreadcrumbModule",
            "id": "module-FreudBreadcrumbModule-f3ad84227483e91e451bc73c78753c5f8a93ca21f23d503ef29ba0c20f37e71a194cb12b465f53fd9698e8eabe7635be23f638839fc6bf00c095ea82e0e30a4b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudBreadcrumbComponent } from './breadcrumb.component';\r\nimport { BreadcrumbModule } from \"primeng/breadcrumb\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, BreadcrumbModule],\r\n  declarations: [FreudBreadcrumbComponent],\r\n  exports: [FreudBreadcrumbComponent]\r\n})\r\nexport class FreudBreadcrumbModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudButtonModule",
            "id": "module-FreudButtonModule-2e87d3b09d3ef4faf9ca0ac3cdcdb5406f8b8aa485cf3943cb222f5f9affe2d0ee2544067b7e6bd5a747f0bb6016a65908528a7a8fe2b95c8d2ea27b1e0c2fc9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\nimport { FreudButtonComponent } from './button.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ButtonModule],\r\n  declarations: [FreudButtonComponent],\r\n  exports: [FreudButtonComponent]\r\n})\r\nexport class FreudButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCalendarModule",
            "id": "module-FreudCalendarModule-74e95420ac3ef4ecba60c800501dda96b43db9fdf52ee91487b56de764fa7c16728488d2c53dfdff5ea65367bc2ad4c2ab17b94787a09f04801b627967242fe5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/calendar/calendar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCalendarComponent } from './calendar.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport { CalendarModule } from \"primeng/calendar\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, CalendarModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudCalendarComponent],\r\n  exports: [FreudCalendarComponent]\r\n})\r\nexport class FreudCalendarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCardModule",
            "id": "module-FreudCardModule-130ca7ed3c1d6fe907f6a7a37ab2be896623c8ecdc91a9b46a156351f37927d06b68838037f4dfe120ed7863d9fee1af8c20732e5fd28b1807abfc36f7c192c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/card/card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCardComponent } from './card.component';\r\nimport { CardModule } from \"primeng/card\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CardModule],\r\n  declarations: [FreudCardComponent],\r\n  exports: [FreudCardComponent]\r\n})\r\nexport class FreudCardModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCascadeSelectModule",
            "id": "module-FreudCascadeSelectModule-a5db303dcbecc5bf15c37d9ca0142428ccc163220b02073e32d06e9dbae74bb7a31a55b5231bc1344dddca0cb6eed1596baaf936f953bbf92a2ed225f0b17bc5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/cascade-select/cascade-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCascadeSelectComponent } from './cascade-select.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { CascadeSelectModule } from \"primeng/cascadeselect\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, CascadeSelectModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudCascadeSelectComponent],\r\n  exports: [FreudCascadeSelectComponent]\r\n})\r\nexport class FreudCascadeSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCascadeSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCascadeSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCheckboxModule",
            "id": "module-FreudCheckboxModule-612fbe3f647c2f128df6b0c91f020b17347a38d4e67127f307a21d841a95895e884d96678f594f30ea88768b3856ab509f4ce74580c056cbfa9240350597c030",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCheckboxComponent } from './checkbox.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { CheckboxModule } from \"primeng/checkbox\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, CheckboxModule, FormsModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudCheckboxComponent],\r\n  exports: [FreudCheckboxComponent]\r\n})\r\nexport class FreudCheckboxModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmDialogModule",
            "id": "module-FreudConfirmDialogModule-ce9a0e4c38dc21d7885e6ea6d637eb4cd4cb011696ad49001fc53b1a52b208282b5423e7dbf461c60478c7a7da3e15dc4bb0d5baeaa7c3c9e78b02542fb028f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmDialogComponent } from './confirm-dialog.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { ConfirmDialogModule } from \"primeng/confirmdialog\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { FreudButtonModule } from \"../../buttons/button\";\r\nimport { FreudConfirmationService } from \"../../../services/confirmation.service\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ConfirmDialogModule, BrowserModule, BrowserAnimationsModule, FreudButtonModule],\r\n  declarations: [FreudConfirmDialogComponent],\r\n  exports: [FreudConfirmDialogComponent],\r\n  providers: [\r\n    FreudConfirmationService,\r\n    ConfirmationService\r\n  ]\r\n})\r\nexport class FreudConfirmDialogModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudConfirmationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmPopupExampleModule",
            "id": "module-FreudConfirmPopupExampleModule-29b9f3a2cb14e2e80b32da87417267d7435039919d0b29e7e32ae6060f99f05f2859430cd7746366685895ffc2374f6f37cd0eab1d43bb86a9a8b52c0694121a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmPopupExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudConfirmPopupModule } from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudConfirmPopupModule, FreudButtonModule],\r\n  declarations: [FreudConfirmPopupExampleComponent],\r\n  exports: [FreudConfirmPopupExampleComponent]\r\n})\r\nexport class FreudConfirmPopupExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudConfirmPopupModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmPopupModule",
            "id": "module-FreudConfirmPopupModule-b5cb0ab790c028974c1015fcfe5c34c786a08c90c5c09d89153a5fb338fd3bae0152388c9d15c874ddb106dcf073450082934617b3f7449f63167b47a382809c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmPopupComponent } from './confirm-popup.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { FreudConfirmationService } from \"../../../services/confirmation.service\";\r\nimport { ConfirmPopupModule } from \"primeng/confirmpopup\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ConfirmPopupModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudConfirmPopupComponent],\r\n  exports: [FreudConfirmPopupComponent],\r\n  providers: [\r\n    FreudConfirmationService,\r\n    ConfirmationService\r\n  ]\r\n})\r\nexport class FreudConfirmPopupModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudConfirmationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDividerModule",
            "id": "module-FreudDividerModule-17a8756bbeeba0f9325b17de73c5fed79d7d5d51ed92a75930db00c8847e208eaa93aa7bd6594923e142c64231efb47c2b112b4ec5708e100d0524b232427ef0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/divider/divider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudDividerComponent } from './divider.component';\r\nimport { DividerModule } from \"primeng/divider\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, DividerModule],\r\n  declarations: [FreudDividerComponent],\r\n  exports: [FreudDividerComponent]\r\n})\r\nexport class FreudDividerModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDividerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDividerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudFileUploadModule",
            "id": "module-FreudFileUploadModule-08f9eec237ffb45112a4b04a608f344660e55e3822069378f203a7e93441b98a354bf93ff994d83ab5169b065da3171dce7dcc29c87d14359932ce6053f38df5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/fille-upload/file-upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudFileUploadComponent } from './file-upload.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { FileUploadModule } from \"primeng/fileupload\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FileUploadModule, BrowserModule, BrowserAnimationsModule, FormsModule, HttpClientModule],\r\n  declarations: [FreudFileUploadComponent],\r\n  exports: [FreudFileUploadComponent]\r\n})\r\nexport class FreudFileUploadModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudFileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudFileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudGalleryModule",
            "id": "module-FreudGalleryModule-4aeeb7aa3163488b3d1583613c9cf6c385f062bca73719c06c9996d11ebdcda34f1f9378f02d624538503ad074015b1c4b8a4fa6bd229474a21119e3d9698740",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/gallery/gallery.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudGalleryComponent } from './gallery.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { GalleriaModule } from \"primeng/galleria\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, GalleriaModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudGalleryComponent],\r\n  exports: [FreudGalleryComponent]\r\n})\r\nexport class FreudGalleryModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudGalleryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudGalleryComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudHeaderModule",
            "id": "module-FreudHeaderModule-181e311e2883a4712b7efd44fc7c78607023de0da0ee346af9932247a7e06607754a09bccfbaa9204d369e00ff986da3d0251902cfbdd4e804b0a800f1faff62",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/header/header.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudHeaderComponent } from './header.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [FreudHeaderComponent],\r\n  exports: [FreudHeaderComponent]\r\n})\r\nexport class FreudHeaderModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudImageModule",
            "id": "module-FreudImageModule-429921443999467e3b5e88ff1165f3f48f6d3ffdee41d5da11d38a7ad30e9ef8ab51dfb20f841be0478664d1614b4b561c7f2611715fd097a2d3d10b38494aec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/image/image.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudImageComponent } from './image.component';\r\nimport { ImageModule } from \"primeng/image\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ImageModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudImageComponent],\r\n  exports: [FreudImageComponent]\r\n})\r\nexport class FreudImageModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudImageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudImageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputMaskModule",
            "id": "module-FreudInputMaskModule-767f853d3c172acc2a13778f11b27845637b812da7fe62d9e5697bf5fbc36e1f47a5c2908c366b1a9c557acaa8a371f62d3e86a946f644602b834a0633629574",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-mask/input-mask.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputMaskComponent } from './input-mask.component';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { InputMaskModule } from \"primeng/inputmask\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, InputMaskModule, ReactiveFormsModule],\r\n  declarations: [FreudInputMaskComponent],\r\n  exports: [FreudInputMaskComponent]\r\n})\r\nexport class FreudInputMaskModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputMaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputMaskComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputNumberModule",
            "id": "module-FreudInputNumberModule-57535c516a0cb60d632c32276de03a6e8e502989825ffdfdcd42e22a9f2009b7d4ad5872ea7955ff8556a9a2ea458828988cd2111e7b1687d458267c98c7158a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-number/input-number.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputNumberComponent } from './input-number.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { InputNumberModule } from \"primeng/inputnumber\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, InputNumberModule, FormsModule],\r\n  declarations: [FreudInputNumberComponent],\r\n  exports: [FreudInputNumberComponent]\r\n})\r\nexport class FreudInputNumberModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputNumberComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputNumberComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputPasswordModule",
            "id": "module-FreudInputPasswordModule-80fc47ad7f6e8bf3344044a00b52650de4de58a7587e4fc38a5fd9b407daecb72028403fcafcdf148abe0329938bac3bee846fccb51f4fdbdacea86a6e987963",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-password/input-password.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputPasswordComponent } from './input-password.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { PasswordModule } from \"primeng/password\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\n\r\n@NgModule({\r\n    imports: [\r\n      CommonModule, FormsModule, PasswordModule, BrowserAnimationsModule,\r\n      BrowserModule],\r\n  declarations: [FreudInputPasswordComponent],\r\n  exports: [FreudInputPasswordComponent]\r\n})\r\nexport class FreudInputPasswordModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputTextAreaModule",
            "id": "module-FreudInputTextAreaModule-408c6f2c9112a8fd3fffdfe597b4f4c645388c6dbd3443c4ac643a4acdd1f2ae586cc1c07f8511a5642e4ad40f6fe6b272b4a1c3a294b8cf85845ceaff7c1ae1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-textarea/input-textarea.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputTextAreaComponent } from './input-textarea.component';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { InputTextareaModule } from \"primeng/inputtextarea\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, InputTextareaModule, FormsModule, ReactiveFormsModule],\r\n  declarations: [FreudInputTextAreaComponent],\r\n  exports: [FreudInputTextAreaComponent]\r\n})\r\nexport class FreudInputTextAreaModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputTextModule",
            "id": "module-FreudInputTextModule-3ff6c6ee934ae63077c5d564893c6a9931735d38c1725d111c41ff1a6b986a391b10545361e4e19b4a1dacd8a32951250ed570be6712a44ab16fb2a6d229f4b7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-text/input-text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputTextComponent } from './input-text.component';\r\nimport { InputTextModule } from \"primeng/inputtext\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, InputTextModule, FormsModule],\r\n  declarations: [FreudInputTextComponent],\r\n  exports: [FreudInputTextComponent]\r\n})\r\nexport class FreudInputTextModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudKnobModule",
            "id": "module-FreudKnobModule-9a5b6f3e860e63416f9fa8367d70c8ae6acbfecb0d60e00a4c2a504a63c7362d131e178b3a4dd3b47bffcd3bfc569c3e1d415ea76983e9214ec0c01b5be1fd81",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/knob/knob.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { KnobModule } from 'primeng/knob';\r\n\r\nimport { FreudKnobComponent } from './knob.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, KnobModule, FormsModule],\r\n  declarations: [FreudKnobComponent],\r\n  exports: [FreudKnobComponent]\r\n})\r\nexport class FreudKnobModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudKnobComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudKnobComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudListboxModule",
            "id": "module-FreudListboxModule-7c2b616bd9924e4b241a8d1a15f9f31599392f858df5ffc7e6960f139825f2276a56b7cce57e7381aa9e85f0ba3d68e7e47c6c1c972f03ce76ee0dac25f2d846",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/listbox/listbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudListboxComponent } from './listbox.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { ListboxModule } from \"primeng/listbox\";\r\nimport { FreudInputTextModule } from \"../input-text\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ListboxModule, BrowserAnimationsModule, BrowserModule, FreudInputTextModule],\r\n  declarations: [FreudListboxComponent],\r\n  exports: [FreudListboxComponent]\r\n})\r\nexport class FreudListboxModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudListboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudInputTextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudListboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMenubarModule",
            "id": "module-FreudMenubarModule-92940fde9e20fd5abca803bae9b96d175f9c4a99bacc8d2538921f836670b758ce1e1d94eff74c9d83169dfb5166d1e41194c426fc395bc34d265900efaeb2d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/menubar/menubar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudMenubarComponent } from './menubar.component';\r\nimport { MenubarModule } from \"primeng/menubar\";\r\nimport { SharedModule } from \"primeng/api\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, MenubarModule, SharedModule],\r\n  declarations: [FreudMenubarComponent],\r\n  exports: [FreudMenubarComponent]\r\n})\r\nexport class FreudMenubarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMenubarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMenubarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMenuModule",
            "id": "module-FreudMenuModule-f8f8769874432314826d3495711e9e95ddc62799975a70d010a6bf5bc71bc39b65f4d08e6ec9d9dbbd2ec139fef5c215a6a985645ca680d626a37e57b03a74cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudMenuComponent } from \"./menu.component\";\r\nimport { MenuModule } from \"primeng/menu\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MenuModule, BrowserModule, BrowserAnimationsModule, RouterModule],\r\n  declarations: [FreudMenuComponent],\r\n  exports: [FreudMenuComponent]\r\n})\r\nexport class FreudMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudModalExampleModule",
            "id": "module-FreudModalExampleModule-a18fb46dc7cd4231a447fe567e060a6afecf2a5d61f6ffcb8f964601d9e36b48737a5dd25603e138bee61a888277c3442907fcac797c1447c0185d83954c260d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/modal-and-popover-examples/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmationDialogExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudConfirmDialogModule } from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudConfirmDialogModule, FreudButtonModule],\r\n  declarations: [FreudConfirmationDialogExampleComponent],\r\n  exports: [FreudConfirmationDialogExampleComponent]\r\n})\r\nexport class FreudModalExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmationDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudConfirmDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmationDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMultiSelectModule",
            "id": "module-FreudMultiSelectModule-204b472bc2bba7be116af9f3eb9f5dff3cb2288d157c3b41320c02ba2a7b257453624ce5a8bd213fba55093bf0e43ca816356844ac0f2eeab7ff9f8f1486007b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/multi-select/multi-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudMultiSelectComponent } from './multi-select.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { MultiSelectModule } from \"primeng/multiselect\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, MultiSelectModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudMultiSelectComponent],\r\n  exports: [FreudMultiSelectComponent]\r\n})\r\nexport class FreudMultiSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudPanelMenuModule",
            "id": "module-FreudPanelMenuModule-3e984311b538e2846027fc81367794f8911f966cb44897885fa01b7bc5f3091de36abaf7230e1337667cee000711f3e8824c962de1e8887301604d70ed281ddf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/panel-menu/panel-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudPanelMenuComponent } from \"./panel-menu.component\";\r\nimport { PanelMenuModule } from \"primeng/panelmenu\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PanelMenuModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudPanelMenuComponent],\r\n  exports: [FreudPanelMenuComponent]\r\n})\r\nexport class FreudPanelMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudPanelMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudPanelMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudProgressBarModule",
            "id": "module-FreudProgressBarModule-5fc02a7c95e6e48dca0d8ad55e6072fc2c02021bca9021156029660a1af67ba7c52dbd4e15028fc996db1c62b1897aad3837302dcb40ee010dbe4b65183cb539",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/progress-bar/progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudProgressBarComponent } from './progress-bar.component';\r\nimport { ProgressBarModule } from \"primeng/progressbar\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ProgressBarModule],\r\n  declarations: [FreudProgressBarComponent],\r\n  exports: [FreudProgressBarComponent]\r\n})\r\nexport class FreudProgressBarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudProgressSpinnerModule",
            "id": "module-FreudProgressSpinnerModule-d051fb1586a5c32f1a02039291b586424bc8ad7b56eeb2ef6acdcbfc86a17d5cc5e73f3a1d65e0a0f005250bba25a4623a58cee0049b0aca821278b4492ea5e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudProgressSpinnerComponent } from './progress-spinner.component';\r\nimport { ProgressSpinnerModule } from \"primeng/progressspinner\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ProgressSpinnerModule],\r\n  declarations: [FreudProgressSpinnerComponent],\r\n  exports: [FreudProgressSpinnerComponent]\r\n})\r\nexport class FreudProgressSpinnerModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudProgressSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudProgressSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRadioButtonExampleModule",
            "id": "module-FreudRadioButtonExampleModule-9eb367b411592ca85dddf693aaedca87165f55ab685314c292f2b5b076dd093c29a6c02d73f256951e3a7d323a1ad35f61705ac9452eb50c8eaf593e0f396ca5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/radio-button/radio-button-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudRadioButtonExampleComponent } from './example.component';\r\nimport {\r\n  FreudRadioButtonModule,\r\n} from \"@freud-ds/web-components\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudRadioButtonModule, ReactiveFormsModule, FormsModule],\r\n  declarations: [FreudRadioButtonExampleComponent],\r\n  exports: [FreudRadioButtonExampleComponent]\r\n})\r\nexport class FreudRadioButtonExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRadioButtonExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRadioButtonModule",
            "id": "module-FreudRadioButtonModule-ae10e65369462fd926fe68d19e76dbfcda8f5e18863c046aa462f05af85f854aba309df196479389b772da91f5e13c0c05a08d1ee9e63d4fb544e7b3e9d282ed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/radio-button/radio-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudRadioButtonComponent } from './radio-button.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { RadioButtonModule } from \"primeng/radiobutton\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, RadioButtonModule, FormsModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudRadioButtonComponent],\r\n  exports: [FreudRadioButtonComponent]\r\n})\r\nexport class FreudRadioButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRatingModule",
            "id": "module-FreudRatingModule-86984f9dac0e52b4c7ca32137cd604f55510450431cc5275eabc0a5f84d98a2935e5c24fb00fd6f19067841d44e70c69a2c3dba3435288529088a2e957e2c77f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/rating/rating.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RatingModule } from \"primeng/rating\";\r\n\r\nimport { FreudRatingComponent } from './rating.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RatingModule, FormsModule],\r\n  declarations: [FreudRatingComponent],\r\n  exports: [FreudRatingComponent]\r\n})\r\nexport class FreudRatingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRatingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRatingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudReactiveFormExampleModule",
            "id": "module-FreudReactiveFormExampleModule-51c7801ea95c590a8d7d8bdd37d91e8dfbec10b4646e0a281385c821480ee482eaf19e3fe620a7d0d3b1f1deeec1c873508b1d639edbffac6c6d10be2747e579",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/reactive-form-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudReactiveFormExampleComponent } from './example.component';\r\nimport {\r\n  FreudButtonModule,\r\n  FreudInputTextModule\r\n} from \"@freud-ds/web-components\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudInputTextModule, FreudButtonModule, ReactiveFormsModule, FormsModule],\r\n  declarations: [FreudReactiveFormExampleComponent],\r\n  exports: [FreudReactiveFormExampleComponent]\r\n})\r\nexport class FreudReactiveFormExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudReactiveFormExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudInputTextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudReactiveFormExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollPanelModule",
            "id": "module-FreudScrollPanelModule-8380b81dfa903d0dd08fd2113dcf6417a774dc0729688ddd470a141815f6fbde4eaa30109b0b65f743cdbef8a9a4b8d749767999dde05b49bc3e67c4138749d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudScrollPanelComponent } from \"./scroll-panel.component\";\r\nimport { ScrollPanelModule } from \"primeng/scrollpanel\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ScrollPanelModule],\r\n  declarations: [FreudScrollPanelComponent],\r\n  exports: [FreudScrollPanelComponent]\r\n})\r\nexport class FreudScrollPanelModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudScrollPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollTopModule",
            "id": "module-FreudScrollTopModule-9d49e0437d3d28c28e187742aef4bccb2696e53047526e56cc94029f1d569080a3d829cf777e40ba92ae80111daee370debedfa4ba8115bd0357f645fac6bb06",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/scroll-top/scroll-top.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudScrollTopComponent } from './scroll-top.component';\r\nimport { ScrollTopModule } from \"primeng/scrolltop\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ScrollTopModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudScrollTopComponent],\r\n  exports: [FreudScrollTopComponent]\r\n})\r\nexport class FreudScrollTopModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollTopModule",
            "id": "module-FreudScrollTopModule-4d765d03208662b4a354519bc109bb45d0156c85d99aa96d053f63f7aa4db2e07756647c0fc5feee465f38d2cfc42bd0c771e8004a9942e3af87fdb39d5e1c40-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/timeline/timeline.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudScrollTopComponent } from './timeline.component';\r\nimport { ScrollTopModule } from \"primeng/scrolltop\";\r\nimport { TimelineModule } from \"primeng/timeline\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, ScrollTopModule, TimelineModule],\r\n  declarations: [FreudScrollTopComponent],\r\n  exports: [FreudScrollTopComponent]\r\n})\r\nexport class FreudScrollTopModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSelectButtonModule",
            "id": "module-FreudSelectButtonModule-097a49c02ac7d56cb40c03fce8fd080ba07cac43006ee63e69f6f64cef6811e8adece1116a2585101c325229b90a0351aab438a4f7e1856202fc44e5808bd30d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/select-button/select-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SelectButtonModule } from 'primeng/selectbutton';\r\n\r\nimport { FreudSelectButtonComponent } from './select-button.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SelectButtonModule, FormsModule],\r\n  declarations: [FreudSelectButtonComponent],\r\n  exports: [FreudSelectButtonComponent]\r\n})\r\nexport class FreudSelectButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSelectButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSelectButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSelectModule",
            "id": "module-FreudSelectModule-c8c0a015de2bd3b592f681ba2191d574335ec1ffb601b9d53386e86dd41f19bf4a0dff5cc09cd42030025c717589d89929b5df7960e66d97d97f67908b3701dd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSelectComponent } from './select.component';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { DropdownModule } from \"primeng/dropdown\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, DropdownModule, ReactiveFormsModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudSelectComponent],\r\n  exports: [FreudSelectComponent]\r\n})\r\nexport class FreudSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSkeletonModule",
            "id": "module-FreudSkeletonModule-4755659213e37c1b06ee4789655eff93eb011282aca298cf8111ced9c2adf9b299e074929f94f6914a24ba502df46fcd7536e0dcd73eaa5b878568d6324814a2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/skeleton/skeleton.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSkeletonComponent } from './skeleton.component';\r\nimport { SkeletonModule } from \"primeng/skeleton\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SkeletonModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudSkeletonComponent],\r\n  exports: [FreudSkeletonComponent]\r\n})\r\nexport class FreudSkeletonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSlideMenuModule",
            "id": "module-FreudSlideMenuModule-c95f181060173df5d8809fb9edc65ea944b67e6bd33aaf70d081f1cd04af89c005295b13c7205c23db9b82eea9822d74a8e72810f6be95c583bee4d766f23d1b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/slide-menu/slide-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSlideMenuComponent } from \"./slide-menu.component\";\r\nimport { SlideMenuModule } from \"primeng/slidemenu\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SlideMenuModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudSlideMenuComponent],\r\n  exports: [FreudSlideMenuComponent]\r\n})\r\nexport class FreudSlideMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSlideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSlideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSliderModule",
            "id": "module-FreudSliderModule-e9dc57fa76b019163aaf7fb247cf090f331c5ddde56b74a45c5649c082f1ef3a9a34e1cc3634ada373a80a58cb94fa73bfecc80c6d87383cdbcef0d9c2434fbc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/slider/slider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSliderComponent } from './slider.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport { SliderModule } from \"primeng/slider\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SliderModule, FormsModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudSliderComponent],\r\n  exports: [FreudSliderComponent]\r\n})\r\nexport class FreudSliderModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSliderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSliderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSpeedDialModule",
            "id": "module-FreudSpeedDialModule-8fa2965dbcbdcca4c5dd0ceb3c7c1f8ec681cf5ca012f194cd0f801458cca2a82206f36fd269bef7063e86125d7124da6d79f2bd70acc590935dd323276201fa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSpeedDialComponent } from './speed-dial.component';\r\nimport { SpeedDialModule } from \"primeng/speeddial\";\r\nimport { FreudTooltipModule } from \"../../feedback/tooltip\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SpeedDialModule, FreudTooltipModule],\r\n  declarations: [FreudSpeedDialComponent],\r\n  exports: [FreudSpeedDialComponent]\r\n})\r\nexport class FreudSpeedDialModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSpeedDialComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSpeedDialComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSplitButtonModule",
            "id": "module-FreudSplitButtonModule-159a536ce319318fa41d128a50d55eefa2a709cf8499da060ea40ab5d23971dce3be056aa89a782eb9454859b5c2fc32c0dfc80500c56c9de5cd82aab2701701",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/split-button/split-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\n\r\nimport { FreudSplitButtonComponent } from './split-button.component';\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SplitButtonModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudSplitButtonComponent],\r\n  exports: [FreudSplitButtonComponent]\r\n})\r\nexport class FreudSplitButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSplitterModule",
            "id": "module-FreudSplitterModule-49b6c7b6b360c0e583c2734fb77bd950ad41f15917f6038a6b95c2d8dd3ddf487203b383ec0a9235ef2b626ce8a91ea0eb32e75b14b087d220a5f8dc4074db7e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/splitter/splitter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSplitterComponent } from \"./splitter.component\";\r\nimport { SplitterModule } from \"primeng/splitter\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SplitterModule],\r\n  declarations: [FreudSplitterComponent],\r\n  exports: [FreudSplitterComponent]\r\n})\r\nexport class FreudSplitterModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSplitterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSplitterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudStepsModule",
            "id": "module-FreudStepsModule-06c0e29b5142632969f575193eca81c047388808934318a5a9fa1c6b7b2f394d4fa6c8aa63255ae01bc20a10dd2e8d00ea3b5b29e009821227f50c055ac4c2a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/steps/steps.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StepsModule } from 'primeng/steps';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { FreudStepsComponent } from './steps.component';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, StepsModule, RouterModule, BrowserAnimationsModule],\r\n  declarations: [FreudStepsComponent],\r\n  exports: [FreudStepsComponent]\r\n})\r\nexport class FreudStepsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudStepsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudStepsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSwitchModule",
            "id": "module-FreudSwitchModule-4ef3afc698d214f5ea6ef7a359b17b6734cade6198bd709a170a5b48f0a60779db7ce5c0a95881c5d413b7b644168a316ee3aa0c1dbe69afc07dce65823c62f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSwitchComponent } from './switch.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { InputSwitchModule } from \"primeng/inputswitch\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, InputSwitchModule, FormsModule],\r\n  declarations: [FreudSwitchComponent],\r\n  exports: [FreudSwitchComponent]\r\n})\r\nexport class FreudSwitchModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTabMenuModule",
            "id": "module-FreudTabMenuModule-1bcd500de154639a20290eb4ea3b94aad9a4dd8c620c4bc896ac2ea3986d310a68ee7f8c9a80db3175481a0f76d0bb1884f8bce4fc23ac6f4d7f93025e750e24",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/tab-menu/tab-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudTabMenuComponent } from \"./tab-menu.component\";\r\nimport { TabMenuModule } from \"primeng/tabmenu\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TabMenuModule],\r\n  declarations: [FreudTabMenuComponent],\r\n  exports: [FreudTabMenuComponent]\r\n})\r\nexport class FreudTabMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTabMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTabMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTabViewModule",
            "id": "module-FreudTabViewModule-f00e3308c5a41961732a64bd44fc56f5b5a5c961670121d5eca45038a0d67dbc54f60e67a5338d6cba12f86c4734c52b96cf5ce75272bee7ee500b699d8f4ae1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudTabPanelComponent, FreudTabViewComponent } from \"./tab-view.component\";\r\nimport { TabView, TabViewModule } from \"primeng/tabview\";\r\nimport { SharedModule } from \"primeng/api\";\r\nimport { RippleModule } from \"primeng/ripple\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SharedModule, RippleModule, TabViewModule],\r\n  declarations: [FreudTabViewComponent, FreudTabPanelComponent],\r\n  exports: [FreudTabViewComponent, FreudTabPanelComponent],\r\n  providers: [TabView]\r\n})\r\nexport class FreudTabViewModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTabPanelComponent"
                        },
                        {
                            "name": "FreudTabViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTabPanelComponent"
                        },
                        {
                            "name": "FreudTabViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTagModule",
            "id": "module-FreudTagModule-eba9628c1ea690c965640583d11a54bc3dde16d2cf3e40a2825f85ee0d84f27f92609b872951bff6b7b18d4bc56c1c5aeddfdce37e0cc7e4a305b23b2652c967",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/tag/tag.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TagModule  } from 'primeng/tag';\r\n\r\nimport { FreudTagComponent } from './tag.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TagModule],\r\n  declarations: [FreudTagComponent],\r\n  exports: [FreudTagComponent]\r\n})\r\nexport class FreudTagModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTagComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudToastExampleModule",
            "id": "module-FreudToastExampleModule-d3ff7ae8e3dd156dc49991848725f909440eda30688f06b03422013cb8cbbdc6a963815d79708730893a76f39072de77f532ff57045321adf0280e9cfbd75cd0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/feedback/toast/toast-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudToastExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudToastModule } from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudToastModule, FreudButtonModule],\r\n  declarations: [FreudToastExampleComponent],\r\n  exports: [FreudToastExampleComponent]\r\n})\r\nexport class FreudToastExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudToastExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudToastModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudToastExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudToastModule",
            "id": "module-FreudToastModule-3c1eae9c700266b9adff10cab9fe63a607cec9afd6132390ae7ffb9320040c6f739a9ac2a26b7b617ae6fae69bff2e2fbcd48b72b5c309ba6e5778c3301c6be5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/toast/toast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToastModule } from \"primeng/toast\";\r\nimport { MessageService } from \"primeng/api\";\r\n\r\nimport { FreudToastComponent } from './toast.component';\r\nimport { FreudMessageService } from \"../../../services/message.service\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ToastModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudToastComponent],\r\n  exports: [FreudToastComponent],\r\n  providers: [FreudMessageService, MessageService]\r\n})\r\nexport class FreudToastModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudToastComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudToastComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTooltipModule",
            "id": "module-FreudTooltipModule-7a4dbe2e52b385b237b72a5f80f960bbaf77c340077a1b2f207f107659a3577d712996079f2bc3b89f27f0ebb8e1b61f8b70e5ad8ad48ecf37fd7c950a876614",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudTooltipComponent } from './tooltip.component';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TooltipModule],\r\n  declarations: [FreudTooltipComponent],\r\n  exports: [FreudTooltipComponent]\r\n})\r\nexport class FreudTooltipModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTypographyModule",
            "id": "module-FreudTypographyModule-763a06fdd0b7c597320200983edb506c090417074deb81fbb891a289348ef0701360036a4c1f4b11135a3af4b9e98889a91ae71b1eb7850cb5307f6b4e593cef",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/typography/typography.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FreudTypographyComponent } from './typography.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [FreudTypographyComponent],\r\n  exports: [FreudTypographyComponent],\r\n})\r\nexport class FreudTypographyModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Actived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBlank.bind({})"
            },
            {
                "name": "Advanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAdvanced.bind({})"
            },
            {
                "name": "AutoResize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicUi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBGColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRadioAndButton.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFeedback.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAdvanced.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTargetBGColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColorOutline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "bodyTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typrography.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // Regular\r\n  'smallRegular1-5',\r\n  'bodyRegular1-5',\r\n\r\n  'smallRegular1-2',\r\n  'bodyRegular1-2',\r\n\r\n  'smallRegular1',\r\n  'bodyRegular1',\r\n  \r\n  'smallRegularAuto',\r\n  'bodyRegularAuto',\r\n\r\n  // Semibold\r\n  'smallSemibold1-5',\r\n  'bodySemibold1-5',\r\n\r\n  'smallSemibold1-2',\r\n  'bodySemibold1-2',\r\n\r\n  'smallSemibold1',\r\n  'bodySemibold1',\r\n\r\n  'smallSemiboldAuto',\r\n  'bodySemiboldAuto',\r\n\r\n  // Bold\r\n  'smallBold1-5',\r\n  'bodyBold1-5',\r\n\r\n  'smallBold1-2',\r\n  'bodyBold1-2',\r\n\r\n  'smallBold1',\r\n  'bodyBold1',\r\n\r\n  'smallBoldAuto',\r\n  'bodyBoldAuto',\r\n]"
            },
            {
                "name": "Bottom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ButtonLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateButtonLayout.bind({})"
            },
            {
                "name": "Celular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Checkbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CheckboxAndFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CheckboxAndText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCheckboxAndText.bind({})"
            },
            {
                "name": "Chip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CPF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CustomTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFull.bind({})"
            },
            {
                "name": "Data",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/toast/Toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DirectionDown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DirectionLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDisabled.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Dropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDropdown.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Feedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFeedback.bind({})"
            },
            {
                "name": "Filter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HeadingBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HeadingBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBold.bind({})"
            },
            {
                "name": "HeadingRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRegular.bind({})"
            },
            {
                "name": "HeadingSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSemibold.bind({})"
            },
            {
                "name": "headingTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typrography.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // Regular\r\n  'h1Regular1-5',\r\n  'h2Regular1-5',\r\n  'h3Regular1-5',\r\n  'h4Regular1-5',\r\n  'h5Regular1-5',\r\n  'h6Regular1-5',\r\n\r\n  'h1Regular1-2',\r\n  'h2Regular1-2',\r\n  'h3Regular1-2',\r\n  'h4Regular1-2',\r\n  'h5Regular1-2',\r\n  'h6Regular1-2',\r\n\r\n  'h1Regular1',\r\n  'h2Regular1',\r\n  'h3Regular1',\r\n  'h4Regular1',\r\n  'h5Regular1',\r\n  'h6Regular1',\r\n  \r\n  'h1RegularAuto',\r\n  'h2RegularAuto',\r\n  'h3RegularAuto',\r\n  'h4RegularAuto',\r\n  'h5RegularAuto',\r\n  'h6RegularAuto',\r\n\r\n  // Semibold\r\n  'h1Semibold1-5',\r\n  'h2Semibold1-5',\r\n  'h3Semibold1-5',\r\n  'h4Semibold1-5',\r\n  'h5Semibold1-5',\r\n  'h6Semibold1-5',\r\n\r\n  'h1Semibold1-2',\r\n  'h2Semibold1-2',\r\n  'h3Semibold1-2',\r\n  'h4Semibold1-2',\r\n  'h5Semibold1-2',\r\n  'h6Semibold1-2',\r\n\r\n  'h1Semibold1',\r\n  'h2Semibold1',\r\n  'h3Semibold1',\r\n  'h4Semibold1',\r\n  'h5Semibold1',\r\n  'h6Semibold1',\r\n\r\n  'h1SemiboldAuto',\r\n  'h2SemiboldAuto',\r\n  'h3SemiboldAuto',\r\n  'h4SemiboldAuto',\r\n  'h5SemiboldAuto',\r\n  'h6SemiboldAuto',\r\n\r\n  // Bold\r\n  'h1Bold1-5',\r\n  'h2Bold1-5',\r\n  'h3Bold1-5',\r\n  'h4Bold1-5',\r\n  'h5Bold1-5',\r\n  'h6Bold1-5',\r\n\r\n  'h1Bold1-2',\r\n  'h2Bold1-2',\r\n  'h3Bold1-2',\r\n  'h4Bold1-2',\r\n  'h5Bold1-2',\r\n  'h6Bold1-2',\r\n\r\n  'h1Bold1',\r\n  'h2Bold1',\r\n  'h3Bold1',\r\n  'h4Bold1',\r\n  'h5Bold1',\r\n  'h6Bold1',\r\n\r\n  'h1BoldAuto',\r\n  'h2BoldAuto',\r\n  'h3BoldAuto',\r\n  'h4BoldAuto',\r\n  'h5BoldAuto',\r\n  'h6BoldAuto',\r\n]"
            },
            {
                "name": "HelperText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem",
                "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
            },
            {
                "name": "home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem",
                "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateHorizontal.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "IconAndRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconAndRadio.bind({})"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconLeft.bind({})"
            },
            {
                "name": "IconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIcon.bind({})"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconRight.bind({})"
            },
            {
                "name": "Imagem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"alt\": \"Description for Image 1\",\n    \"title\": \"Title 1\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"alt\": \"Description for Image 2\",\n    \"title\": \"Title 2\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"alt\": \"Description for Image 3\",\n    \"title\": \"Title 3\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"alt\": \"Description for Image 4\",\n    \"title\": \"Title 4\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"alt\": \"Description for Image 5\",\n    \"title\": \"Title 5\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"alt\": \"Description for Image 6\",\n    \"title\": \"Title 6\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"alt\": \"Description for Image 7\",\n    \"title\": \"Title 7\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"alt\": \"Description for Image 8\",\n    \"title\": \"Title 8\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"alt\": \"Description for Image 9\",\n    \"title\": \"Title 9\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"alt\": \"Description for Image 10\",\n    \"title\": \"Title 10\"\n  }\n]"
            },
            {
                "name": "Indeterminate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Inline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateInline.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Update', icon: 'freud-icon freud-icon-refresh', command: () => {\n      console.log('Evento update')\n    }\n  },\n  {\n    label: 'Delete', icon: 'freud-icon freud-icon-close', command: () => {\n      console.log('Evento delete')\n    },\n  },\n  {label: 'Zenklub', icon: 'freud-icon freud-icon-info', url: 'http://zenklub.com'},\n  {separator: true},\n  {label: 'Setup', icon: 'freud-icon freud-icon-cog'}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'Australia',\n    code: 'AU',\n    states: [\n      {\n        name: 'New South Wales',\n        cities: [\n          {cname: 'Sydney', code: 'A-SY'},\n          {cname: 'Newcastle', code: 'A-NE'},\n          {cname: 'Wollongong', code: 'A-WO'}\n        ]\n      },\n      {\n        name: 'Queensland',\n        cities: [\n          {cname: 'Brisbane', code: 'A-BR'},\n          {cname: 'Townsville', code: 'A-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'Canada',\n    code: 'CA',\n    states: [\n      {\n        name: 'Quebec',\n        cities: [\n          {cname: 'Montreal', code: 'C-MO'},\n          {cname: 'Quebec City', code: 'C-QU'}\n        ]\n      },\n      {\n        name: 'Ontario',\n        cities: [\n          {cname: 'Ottawa', code: 'C-OT'},\n          {cname: 'Toronto', code: 'C-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'United States',\n    code: 'US',\n    states: [\n      {\n        name: 'California',\n        cities: [\n          {cname: 'Los Angeles', code: 'US-LA'},\n          {cname: 'San Diego', code: 'US-SD'},\n          {cname: 'San Francisco', code: 'US-SF'}\n        ]\n      },\n      {\n        name: 'Florida',\n        cities: [\n          {cname: 'Jacksonville', code: 'US-JA'},\n          {cname: 'Miami', code: 'US-MI'},\n          {cname: 'Tampa', code: 'US-TA'},\n          {cname: 'Orlando', code: 'US-OR'}\n        ]\n      },\n      {\n        name: 'Texas',\n        cities: [\n          {cname: 'Austin', code: 'US-AU'},\n          {cname: 'Dallas', code: 'US-DA'},\n          {cname: 'Houston', code: 'US-HO'}\n        ]\n      }\n    ]\n  }\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {\n    label: 'File',\n    items: [{\n      label: 'New',\n      icon: 'pi pi-fw pi-plus',\n      items: [\n        {label: 'User', icon: 'pi pi-fw pi-user-plus'},\n        {label: 'Filter', icon: 'pi pi-fw pi-filter'}\n      ]\n    },\n      {label: 'Open', icon: 'pi pi-fw pi-external-link'},\n      {separator: true},\n      {label: 'Quit', icon: 'pi pi-fw pi-times'}\n    ]\n  },\n  {\n    label: 'Edit',\n    icon: 'pi pi-fw pi-pencil',\n    items: [\n      {label: 'Delete', icon: 'pi pi-fw pi-trash'},\n      {label: 'Refresh', icon: 'pi pi-fw pi-refresh'}\n    ]\n  },\n  {\n    label: 'Help',\n    icon: 'pi pi-fw pi-question',\n    items: [\n      {\n        label: 'Contents',\n        icon: 'pi pi-pi pi-bars'\n      },\n      {\n        label: 'Search',\n        icon: 'pi pi-pi pi-search',\n        items: [\n          {\n            label: 'Text',\n            items: [\n              {\n                label: 'Workspace'\n              }\n            ]\n          },\n          {\n            label: 'User',\n            icon: 'pi pi-fw pi-file',\n          }\n        ]}\n    ]\n  },\n  {\n    label: 'Actions',\n    icon: 'pi pi-fw pi-cog',\n    items: [\n      {\n        label: 'Edit',\n        icon: 'pi pi-fw pi-pencil',\n        items: [\n          {label: 'Save', icon: 'pi pi-fw pi-save'},\n          {label: 'Update', icon: 'pi pi-fw pi-save'},\n        ]\n      },\n      {\n        label: 'Other',\n        icon: 'pi pi-fw pi-tags',\n        items: [\n          {label: 'Delete', icon: 'pi pi-fw pi-minus'}\n        ]\n      }\n    ]\n  }\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {\n    label:'Users',\n    icon:'freud-icon freud-icon-user',\n    items:[\n      {\n        label:'New',\n        icon:'freud-icon freud-icon-user-plus',\n\n      },\n      {\n        label:'Delete',\n        icon:'freud-icon freud-icon-user-minus',\n\n      },\n      {\n        label:'Search',\n        icon:'freud-icon freud-icon-users',\n        items:[\n          {\n            label:'Filter',\n            icon:'freud-icon freud-icon-filter',\n            items:[\n              {\n                label:'Print',\n                icon:'freud-icon freud-icon-print'\n              }\n            ]\n          },\n          {\n            icon:'freud-icon freud-icon-bars',\n            label:'List'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label:'Events',\n    icon:'freud-icon freud-icon-calendar',\n    items:[\n      {\n        label:'Edit',\n        icon:'freud-icon freud-icon-pencil',\n      },\n    ]\n  },\n  {\n    label:'Quit',\n    icon:'freud-icon freud-icon-power-off'\n  }\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Home', command: () => console.log('menuClicked')},\n  {label: 'Calendar', command: () => console.log('menuClicked')},\n  {label: 'Edit', command: () => console.log('menuClicked')},\n  {label: 'Documentation', command: () => console.log('menuClicked')},\n  {label: 'Settings', command: () => console.log('menuClicked')}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
            },
            {
                "name": "itemsWithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {icon: 'freud-icon freud-icon-refresh', command: () => {\r\n      console.log('Evento update')\r\n    }\r\n  },\r\n  {\r\n    icon: 'freud-icon freud-icon-close', command: () => {\r\n      console.log('Evento delete')\r\n    },\r\n  },\r\n  {icon: 'freud-icon freud-icon-check'}\r\n]"
            },
            {
                "name": "itemsWithoutIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Update', command: () => {console.log('Evento update')}\n  },\n  {\n    label: 'Delete', command: () => {console.log('Evento delete')},\n  },\n  {label: 'Zenklub', url: 'http://zenklub.com'}\n]"
            },
            {
                "name": "itens",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StepMenu[]",
                "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Left",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateLoading.bind({})"
            },
            {
                "name": "Mask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "messages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMessage[]",
                "defaultValue": "[\n  {severity:'success', summary:'Success', detail:'Message content'},\n  {severity:'info', summary:'Info', detail:'Message content'},\n  {severity:'warn', summary:'Warning', detail:'Message content'},\n  {severity:'error', summary:'Error', detail:'Message content'}\n]"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OptionDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
            },
            {
                "name": "optionsDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {label: 'Item1', disabled: true},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
            },
            {
                "name": "OutlineDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Panel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RadioAndButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRadioAndButton.bind({})"
            },
            {
                "name": "Range",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Right",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSizes.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TargetElement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTarget.bind({})"
            },
            {
                "name": "Telefone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p freud-typography [fontType]=\"fontType\" [fontBgColor]=\"fontBgColor\">{{label}}</p>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSpeedDialComponent>",
                "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 250px; width: 120px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button {{color}}'),\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAlertMessagesComponent>",
                "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-messages\n        [messages]=\"messages\">\n    </freud-alert-messages>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSplitButtonComponent>",
                "defaultValue": "(args: FreudSplitButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudKnobComponent>",
                "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-knob\r\n      [value]=\"value\"\r\n      [min]=\"min\"\r\n      [max]=\"max\"\r\n      [step]=\"step\"\r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-knob>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudProgressBarComponent>",
                "defaultValue": "(\r\n  args: FreudProgressBarComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <freud-progress-bar [bgColor]=\"bgColor\" [value]=\"50\" [mode]=\"mode\">\r\n      </freud-progress-bar>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudRatingComponent>",
                "defaultValue": "(\r\n  args: FreudRatingComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-rating\r\n      [value]=\"value\"\r\n      [stars]=\"stars\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-rating>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudProgressSpinnerComponent>",
                "defaultValue": "(\r\n  args: FreudProgressSpinnerComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-progress-spinner [bgColor]=\"bgColor\">\r\n      </freud-progress-spinner>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudStepsComponent>",
                "defaultValue": "(\r\n  args: FreudStepsComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-steps [model]=\"model\" [readonly]=\"readonly\" [activeIndex]=\"activeIndex\" [bgColor]=\"bgColor\"></freud-steps>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTagComponent>",
                "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag [outline]=\"outline\" [color]=\"color\" [value]=\"value\"></freud-tag>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTooltipComponent>",
                "defaultValue": "(\r\n  args: FreudTooltipComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <span freud-tooltip style=\"color:{{bgColor ? 'white' : 'black'}}\"\r\n      [tooltipLabel]=\"tooltipLabel\"\r\n      [tooltipPosition]=\"tooltipPosition\"\r\n      style=\"font-family: 'Source Sans Pro'\"\r\n      [bgColor]=\"bgColor\">Passe o mouse aqui!</span>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSkeletonComponent>",
                "defaultValue": "(\r\n  args: FreudSkeletonComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'350px'\"\r\n        [height]=\"'70px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <div style=\"display: flex\">\r\n        <freud-skeleton style=\"margin-right: 10px\"\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n        <freud-skeleton\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n      </div>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/toast/Toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudToastComponent>",
                "defaultValue": "(args: FreudToastComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-toast-examples>\n    </freud-toast-examples>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAutoCompleteComponent>",
                "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCascadeSelectComponent>",
                "defaultValue": "(args: FreudCascadeSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCheckboxComponent>",
                "defaultValue": "(args: FreudCheckboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputMaskComponent>",
                "defaultValue": "(args: FreudInputMaskComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputNumberComponent>",
                "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudListboxComponent>",
                "defaultValue": "(args: FreudListboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextAreaComponent>",
                "defaultValue": "(args: FreudInputTextAreaComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMultiSelectComponent>",
                "defaultValue": "(args: FreudMultiSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSelectComponent>",
                "defaultValue": "(args: FreudSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudRadioButtonComponent>",
                "defaultValue": "(args: FreudRadioButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n  argTypes: {\n    value: {\n      name: 'ModelValue',\n      type: { name: 'string' },\n      defaultValue: 'Hello',\n      description: 'demo description',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'Hello' },\n      },\n      control: {\n        type: 'text'\n      }\n    }\n  }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSwitchComponent>",
                "defaultValue": "(args: FreudSwitchComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAvatarComponent>",
                "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-avatar [size]=\"size\" [label]=\"label\" [badge]=\"badge\" [bgColor]=\"bgColor\" [withIcon]=\"withIcon\" [image]=\"image\"></freud-avatar>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudFileUploadComponent>",
                "defaultValue": "(args: FreudFileUploadComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-file-upload\n        [name]=\"'file[]'\"\n        [url]=\"url\"\n        [auto]=\"auto\"\n        [accept]=\"accept\"\n        [multiple]=\"multiple\"\n        [method]=\"method\"\n        [fileLimit]=\"fileLimit\"\n        [chooseIcon]=\"chooseIcon\"\n        [chooseLabel]=\"chooseLabel\"\n        [uploadLabel]=\"uploadLabel\"\n        [uploadIcon]=\"uploadIcon\"\n        [cancelIcon]=\"cancelIcon\"\n        [withCredentials]=\"withCredentials\"\n        [mode]=\"mode\"\n        [customUpload]=\"customUpload\"\n        [showUploadButton]=\"showUploadButton\"\n        [showCancelButton]=\"showCancelButton\"\n        [headers]=\"headers\"\n    ></freud-file-upload>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudGalleryComponent>",
                "defaultValue": "(args: FreudGalleryComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-gallery\n        [images]=\"images\"\n        [showThumbnails]=\"showThumbnails\"\n        [bgColor]=\"bgColor\">\n    </freud-gallery>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudImageComponent>",
                "defaultValue": "(args: FreudImageComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-image [preview]=\"preview\" [alt]=\"alt\" [src]=\"src\" [height]=\"height\" [width]=\"width\"></freud-image>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudConfirmDialogComponent>",
                "defaultValue": "(args: FreudConfirmDialogComponent) => ({\n  template: `\n    <freud-confirm-dialog-example></freud-confirm-dialog-example>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudConfirmPopupComponent>",
                "defaultValue": "(args: FreudConfirmPopupComponent) => ({\n  template: `\n    <freud-confirm-popup-example></freud-confirm-popup-example>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudActionIconComponent>",
                "defaultValue": "(args: FreudActionIconComponent) => ({\n  props: { ...args },\n  template: `<freud-action-icon [bgColor]=\"bgColor\"></freud-action-icon>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCalendarComponent>",
                "defaultValue": "(args: FreudCalendarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-calendar [(ngModel)]=\"value\">\n    </freud-calendar>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBlockExampleComponent>",
                "defaultValue": "(args: FreudBlockExampleComponent) => ({\n  props: { ...args },\n  template: `<freud-block-ui-example [withTarget]=\"withTarget\"></freud-block-ui-example>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCardComponent>",
                "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-card\n        [header]=\"header\"\n        [subheader]=\"subheader\"\n        [tabindex]=\"tabindex\">\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n        deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n    </freud-card>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSelectButtonComponent>",
                "defaultValue": "(args: FreudSelectButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSliderComponent>",
                "defaultValue": "(args: FreudSliderComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBreadcrumbComponent>",
                "defaultValue": "(args: FreudBreadcrumbComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-breadcrumb [bgColor]=\"bgColor\" [items]=\"items\" [home]=\"home\"></freud-breadcrumb>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-top [threshold]=\"200\"></freud-scroll-top>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMenuComponent>",
                "defaultValue": "(args: FreudMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-menu [items]=\"items\" [popup]=\"popup\"></freud-menu>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelMenuComponent>",
                "defaultValue": "(args: FreudPanelMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 400px\">\n        <freud-panel-menu\n          [items]=\"items\"\n        ></freud-panel-menu>\n    </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMenubarComponent>",
                "defaultValue": "(args: FreudMenubarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 220px;width: 100%\">\n      <freud-menubar\n          [startImgAlt]=\"'Home'\"\n          [startImgSrc]=\"startImgSrc\"\n          [startImgHref]=\"'https://zenklub.com.br'\"\n          [items]=\"items\"\n          [bgColor]=\"bgColor\"\n      ></freud-menubar>\n    </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollPanelComponent>",
                "defaultValue": "(args: FreudScrollPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.\n</freud-scroll-panel>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTabMenuComponent>",
                "defaultValue": "(args: FreudTabMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-menu\n      [items]=\"items\"\n      [activeItem]=\"activeItem\"\n      [bgColor]=\"bgColor\"\n    ></freud-tab-menu>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSplitterComponent>",
                "defaultValue": "(args: FreudSplitterComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-splitter [panelSizes]=\"panelSizes\" [style]=\"{'height': '300px'}\" [layout]=\"layout\">\n      <ng-template pTemplate>\n        <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n          Panel 1\n        </div>\n      </ng-template>\n    <ng-template pTemplate>\n      <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n        Panel 2\n      </div>\n    </ng-template>\n</freud-splitter>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSlideMenuComponent>",
                "defaultValue": "(args: FreudSlideMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-slide-menu [items]=\"items\"></freud-slide-menu>\n  `,\n})"
            },
            {
                "name": "TemplateAdvanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCardComponent>",
                "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 350px\">\n      <freud-card\n          [header]=\"header\"\n          [subheader]=\"subheader\"\n          [tabindex]=\"tabindex\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n          deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n\n            <ng-container freudTemplateHeader>\n              <img alt=\"Card\" src=\"assets/img/img.png\" style=\"height: 150px;object-fit: cover\">\n            </ng-container>\n\n            <ng-container freudTemplatefooter>\n              <div style=\"display: flex; gap: 4px\">\n                <freud-button>Button</freud-button>\n                <freud-button [color]=\"'secondary'\">Button</freud-button>\n              </div>\n          </ng-container>\n      </freud-card>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'success'\" [value]=\"'10'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'info'\" [value]=\"'5'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'warning'\" [value]=\"'99'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'error'\" [value]=\"'A'\"></freud-badge>\n    <freud-badge style=\"position: relative;top: 4px;\" [color]=\"'actived'\" [value]=\"''\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "TemplateBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTagComponent>",
                "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [value]=\"'Default'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'success'\" [value]=\"'Success'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'info'\" [value]=\"'Info'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'warning'\" [value]=\"'Warning'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'error'\" [value]=\"'Error'\"></freud-tag>\n  `,\n})"
            },
            {
                "name": "TemplateBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLBgColor,\n})"
            },
            {
                "name": "TemplateBlank",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\" style=\"position: relative;top: 4px;\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "TemplateBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-5'\">h6/Bold-700/line-height-1.5 (h6Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-5'\">h5/Bold-700/line-height-1.5 (h5Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-5'\">h4/Bold-700/line-height-1.5 (h4Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-5'\">h3/Bold-700/line-height-1.5 (h3Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-5'\">h2/Bold-700/line-height-1.5 (h2Bold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-5'\">h1/Bold-700//line-height-1.5 (h1Bold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-2'\">h6/Bold-700/line-height-1.2 (h6Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-2'\">h5/Bold-700/line-height-1.2 (h5Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-2'\">h4/Bold-700/line-height-1.2 (h4Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-2'\">h3/Bold-700/line-height-1.2 (h3Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-2'\">h2/Bold-700/line-height-1.2 (h2Bold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-2'\">h1/Bold-700/line-height-1.2 (h1Bold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1'\">h6/Bold-700/line-height-1 (h6Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1'\">h5/Bold-700/line-height-1 (h5Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1'\">h4/Bold-700/line-height-1 (h4Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1'\">h3/Bold-700/line-height-1 (h3Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1'\">h2/Bold-700/line-height-1 (h2Bold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1'\">h1/Bold-700/line-height-1 (h1Bold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6BoldAuto'\">h6/Bold-700/line-height-Auto (h6BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5BoldAuto'\">h5/Bold-700/line-height-Auto (h5BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4BoldAuto'\">h4/Bold-700/line-height-Auto (h4BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3BoldAuto'\">h3/Bold-700/line-height-Auto (h3BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2BoldAuto'\">h2/Bold-700/line-height-Auto (h2BoldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1BoldAuto'\">h1/Bold-700/line-height-auto (h1BoldAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateButtonLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputNumberComponent>",
                "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'stacked'\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'horizontal'\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [buttonLayout]=\"'vertical'\"\n        [showButtons]=\"true\">\n    </freud-input-number> <br><br>\n  `,\n})"
            },
            {
                "name": "TemplateCheckboxAndText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-checkbox></freud-checkbox>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">ww</span>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSpeedDialComponent>",
                "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 80px; width: 80px; margin: 50px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Disabled'),\n})"
            },
            {
                "name": "templateDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
            },
            {
                "name": "TemplateDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAutoCompleteComponent>",
                "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateDropdown,\n})"
            },
            {
                "name": "templateFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n  <div style=\"height: 130px\">\n          <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-input-password>\n  </div>\n`"
            },
            {
                "name": "TemplateFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFeedback,\n})"
            },
            {
                "name": "templateFull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 350px\">\n        <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n            <ng-container freudTemplateHeader>\n              <strong>Pick a password</strong>\n            </ng-container>\n            <ng-container freudTemplatefooter>\n                <div>\n                  <hr>\n                  <p class=\"p-mt-2\">Suggestions</p>\n                  <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\n                      <li>At least one lowercase</li>\n                      <li>At least one uppercase</li>\n                      <li>At least one numeric</li>\n                      <li>Minimum 8 characters</li>\n                  </ul>\n                </div>\n            </ng-container>\n        </freud-input-password>\n    </div>\n`"
            },
            {
                "name": "TemplateFull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFull,\n})"
            },
            {
                "name": "TemplateHorizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'left'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'center'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'right'\">\n            Title\n      </freud-divider>\n  `,\n})"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-button\n      [color]=\"color\"\n      [bgColor]=\"bgColor\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [loading]=\"loading\"\n      [icon]=\"icon\"\n      >{{label}}</freud-button>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-split-button\n        [label]=\"label\"\n        [disabled]=\"disabled\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n    </freud-split-button>\n    <p *ngIf=\"!disabled\" style=\"margin-bottom: 150px\"></p>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 150px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-cascade-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"'cname'\"\n          [optionValue]=\"'code'\"\n          [placeholder]=\"placeholder\"\n          [optionGroupLabel]=\"'name'\"\n          [optionGroupChildren]=\"['states', 'cities']\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-cascade-select>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n      <freud-checkbox\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [bgColor]=\"bgColor\"\n        [invalid]=\"invalid\">\n    </freud-checkbox>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-mask\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [mask]=\"mask\"\n        [bgColor]=\"bgColor\">\n    </freud-input-mask>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [showButtons]=\"showButtons\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-password\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [feedback]=\"feedback\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-password>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-text\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [rightIcon]=\"rightIcon\"\n        [bgColor]=\"bgColor\">\n    </freud-input-text>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-listbox\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [options]=\"options\"\n          [multiple]=\"multiple\"\n          [filter]=\"filter\"\n          [checkbox]=\"checkbox\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [invalid]=\"invalid\">\n      </freud-listbox>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-textarea\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [rows]=\"rows\"\n        [cols]=\"cols\"\n        [autoResize]=\"autoResize\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-textarea>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 300px\">\n        <freud-multi-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [display]=\"display\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-multi-select>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-select>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n        <freud-radio-button-example\n            [(ngModel)]=\"value\"\n            [disabled]=\"disabled\"\n            [label]=\"label\"\n            [name]=\"'label'\"\n            [bgColor]=\"bgColor\"\n        ></freud-radio-button-example>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n      <freud-input-switch\n        [(ngModel)]=\"defaultValue\"\n        [disabled]=\"disabled\"\n        [invalid]=\"invalid\">\n    </freud-input-switch>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-divider\n        [tabindex]=\"tabindex\"\n        [layout]=\"layout\"\n        [bgColor]=\"bgColor\">\n        Title\n    </freud-divider>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-select-button\n        [options]=\"options\"\n        [multiple]=\"multiple\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [disabled]=\"disabled\"\n        [selectedOption]=\"selectedOption\"\n        [optionDisabled]=\"optionDisabled\"\n        [optionLabel]=\"optionLabel\"></freud-select-button>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-slider\n        [(ngModel)]=\"value\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [orientation]=\"orientation\"\n        [range]=\"range\"\n        [disabled]=\"disabled\">\n    </freud-slider>\n`"
            },
            {
                "name": "templateHTMLBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"true\" [color]=\"'primary'\">Button primary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'secondary'\">Button secondary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'ghost'\">Button ghost</freud-button>\n    </div>\n`"
            },
            {
                "name": "templateHTMLSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"bgColor\" [color]=\"color\" [size]=\"'sm'\">Button sm</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'md'\">Button md</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'lg'\">Button lg</freud-button>\n    </div>\n`"
            },
            {
                "name": "TemplateIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace(\n    '{{label}}',\n    '<span class=\"freud-icon freud-icon-check freud-icon-20px\"></span>'\n  ),\n})"
            },
            {
                "name": "TemplateIconAndRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item\"></freud-radio-button>\n      </span>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateIconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateIconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateInline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAlertMessagesComponent>",
                "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-message [severity]=\"'success'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'info'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'warn'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'error'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n  `,\n})"
            },
            {
                "name": "TemplateLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button'),\n})"
            },
            {
                "name": "TemplateRadioAndButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item2\"></freud-radio-button>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <freud-button>Button</freud-button>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-5'\">h6/regular-400/line-height-1.5 (h6Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-5'\">h5/regular-400/line-height-1.5 (h5Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-5'\">h4/regular-400/line-height-1.5 (h4Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-5'\">h3/regular-400/line-height-1.5 (h3Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-5'\">h2/regular-400/line-height-1.5 (h2Regular1-5)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-5'\">h1/regular-400/line-height-1.5 (h1Regular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-2'\">h6/regular-400/line-height-1.2 (h6Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-2'\">h5/regular-400/line-height-1.2 (h5Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-2'\">h4/regular-400/line-height-1.2 (h4Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-2'\">h3/regular-400/line-height-1.2 (h3Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-2'\">h2/regular-400/line-height-1.2 (h2Regular1-2)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-2'\">h1/regular-400/line-height-1.2 (h1Regular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1'\">h6/regular-400/line-height-1 (h6Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1'\">h5/regular-400/line-height-1 (h5Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1'\">h4/regular-400/line-height-1 (h4Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1'\">h3/regular-400/line-height-1 (h3Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1'\">h2/regular-400/line-height-1 (h2Regular1)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1'\">h1/regular-400/line-height-1 (h1Regular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6RegularAuto'\">h6/regular-400/line-height-Auto (h6RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5RegularAuto'\">h5/regular-400/line-height-Auto (h5RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4RegularAuto'\">h4/regular-400/line-height-Auto (h4RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3RegularAuto'\">h3/regular-400/line-height-Auto (h3RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2RegularAuto'\">h2/regular-400/line-height-Auto (h2RegularAuto)</p>\r\n    <p freud-typography [fontType]=\"'h1RegularAuto'\">h1/regular-400/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-5'\">h6/Semibold-600/line-height-1.5 (h6Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-5'\">h5/Semibold-600/line-height-1.5 (h5Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-5'\">h4/Semibold-600/line-height-1.5 (h4Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-5'\">h3/Semibold-600/line-height-1.5 (h3Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-5'\">h2/Semibold-600/line-height-1.5 (h2Semibold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-5'\">h1/Semibold-600/line-height-1.5 (h1Semibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-2'\">h6/Semibold-600/line-height-1.2 (h6Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-2'\">h5/Semibold-600/line-height-1.2 (h5Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-2'\">h4/Semibold-600/line-height-1.2 (h4Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-2'\">h3/Semibold-600/line-height-1.2 (h3Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-2'\">h2/Semibold-600/line-height-1.2 (h2Semibold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-2'\">h1/Semibold-600/line-height-1.2 (h1Semibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1'\">h6/Semibold-600/line-height-1 (h6Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1'\">h5/Semibold-600/line-height-1 (h5Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1'\">h4/Semibold-600/line-height-1 (h4Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1'\">h3/Semibold-600/line-height-1 (h3Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1'\">h2/Semibold-600/line-height-1 (h2Semibold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1'\">h1/Semibold-600/line-height-1 (h1Regular1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6SemiboldAuto'\">h6/Semibold-600/line-height-Auto (h6SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5SemiboldAuto'\">h5/Semibold-600/line-height-Auto (h5SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4SemiboldAuto'\">h4/Semibold-600/line-height-Auto (h4SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3SemiboldAuto'\">h3/Semibold-600/line-height-Auto (h3SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2SemiboldAuto'\">h2/Semibold-600/line-height-Auto (h2SemiboldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1SemiboldAuto'\">h1/Semibold-600/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLSize,\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudKnobComponent>",
                "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"display: flex; align-items: center;\">\r\n      <freud-knob style=\"margin-right: 20px\"\r\n        [value]=\"'50'\"\r\n        [size]=\"'default'\">\r\n      </freud-knob>\r\n\r\n      <freud-knob\r\n        [value]=\"'50'\"\r\n        [size]=\"'large'\">\r\n      </freud-knob>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAvatarComponent>",
                "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center\">\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'sm'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'md'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'lg'\" [label]=\"'A'\"></freud-avatar>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [size]=\"'default'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge [size]=\"'large'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "TemplateTarget",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 250px;width: 250px; overflow: auto\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n      </p>\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\"></freud-scroll-top>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateTargetBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 250px;width: 300px; padding: 10px; overflow: auto;background-color: #241249; color: white\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n      </p>\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\" [bgColor]=\"true\"></freud-scroll-top>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateTextBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-5'\">small/Bold-700/line-height-1.5 (smallBold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-5'\">body/Bold-700/line-height-1.5 (bodyBold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-2'\">small/Bold-700/line-height-1.2 (smallBold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-2'\">body/Bold-700/line-height-1.2 (bodyBold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1'\">small/Bold-700/line-height-1 (smallBold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1'\">body/Bold-700/line-height-1 (bodyBold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBoldAuto'\">small/Bold-700/line-height-Auto (smallBoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBoldAuto'\">body/Bold-700/line-height-Auto (bodyBoldAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateTextRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-5'\">small/regular-400/line-height-1.5 (smallRegular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-5'\">body/regular-400/line-height-1.5 (bodyRegular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-2'\">small/regular-400/line-height-1.2 (smallRegular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-2'\">body/regular-400/line-height-1.2 (bodyRegular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1'\">small/regular-400/line-height-1 (smallRegular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1'\">body/regular-400/line-height-1 (bodyRegular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegularAuto'\">small/regular-400/line-height-Auto (smallRegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegularAuto'\">body/regular-400/line-height-Auto (bodyRegularAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateTextSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-5'\">small/Semibold-600/line-height-1.5 (smallSemibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-5'\">body/Semibold-600/line-height-1.5 (bodySemibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-2'\">small/Semibold-600/line-height-1.2 (smallSemibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-2'\">body/Semibold-600/line-height-1.2 (bodySemibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1'\">small/Semibold-600/line-height-1 (smallSemibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1'\">body/Semibold-600/line-height-1 (bodySemibold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemiboldAuto'\">small/Semibold-600/line-height-Auto (smallSemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemiboldAuto'\">body/Semibold-600/line-height-Auto (bodySemiboldAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateVertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <div style=\"display: flex;gap: 16px;height: 220px\">\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'top'\">\n              Title\n        </freud-divider>\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'bottom'\">\n              Title\n        </freud-divider>\n      </div>\n  `,\n})"
            },
            {
                "name": "TextBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextBold.bind({})"
            },
            {
                "name": "TextRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextRegular.bind({})"
            },
            {
                "name": "TextSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextSemibold.bind({})"
            },
            {
                "name": "Top",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TypeCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "TypeQuarterCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "TypeQuarterDownRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "types",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "headingTypes.concat(bodyTypes)"
            },
            {
                "name": "value",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "defaultValue": "false"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateVertical.bind({})"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithIconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateLoading .bind({})"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithoutThumbnail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "avatarSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\" | \"lg\"",
                "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "buttonColors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"ghost\"",
                "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "buttonSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\" | \"lg\"",
                "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"actived\"",
                "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\"",
                "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "directions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"up\" | \"down\" | \"left\" | \"right\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "fontTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/web-components/src/components/typography/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "listboxFilterMatchModes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "positions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\"",
                "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "severities",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "sizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"large\"",
                "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "sizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"large\"",
                "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "types",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "stories/feedback/badge/Badge.stories.ts": [
                {
                    "name": "Actived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBlank.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSizes.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "TemplateBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'success'\" [value]=\"'10'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'info'\" [value]=\"'5'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'warning'\" [value]=\"'99'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'error'\" [value]=\"'A'\"></freud-badge>\n    <freud-badge style=\"position: relative;top: 4px;\" [color]=\"'actived'\" [value]=\"''\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "TemplateBlank",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\" style=\"position: relative;top: 4px;\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "TemplateSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [size]=\"'default'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge [size]=\"'large'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/others/card/Card.stories.ts": [
                {
                    "name": "Advanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAdvanced.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAdvanced.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCardComponent>",
                    "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-card\n        [header]=\"header\"\n        [subheader]=\"subheader\"\n        [tabindex]=\"tabindex\">\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n        deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n    </freud-card>\n  `,\n})"
                },
                {
                    "name": "TemplateAdvanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCardComponent>",
                    "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 350px\">\n      <freud-card\n          [header]=\"header\"\n          [subheader]=\"subheader\"\n          [tabindex]=\"tabindex\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n          deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n\n            <ng-container freudTemplateHeader>\n              <img alt=\"Card\" src=\"assets/img/img.png\" style=\"height: 150px;object-fit: cover\">\n            </ng-container>\n\n            <ng-container freudTemplatefooter>\n              <div style=\"display: flex; gap: 4px\">\n                <freud-button>Button</freud-button>\n                <freud-button [color]=\"'secondary'\">Button</freud-button>\n              </div>\n          </ng-container>\n      </freud-card>\n    </div>\n  `,\n})"
                }
            ],
            "stories/forms/input-textarea/InputTextArea.stories.ts": [
                {
                    "name": "AutoResize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextAreaComponent>",
                    "defaultValue": "(args: FreudInputTextAreaComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-textarea\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [rows]=\"rows\"\n        [cols]=\"cols\"\n        [autoResize]=\"autoResize\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-textarea>\n`"
                }
            ],
            "stories/media/file-upload/FileUpload.stories.ts": [
                {
                    "name": "BasicUi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudFileUploadComponent>",
                    "defaultValue": "(args: FreudFileUploadComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-file-upload\n        [name]=\"'file[]'\"\n        [url]=\"url\"\n        [auto]=\"auto\"\n        [accept]=\"accept\"\n        [multiple]=\"multiple\"\n        [method]=\"method\"\n        [fileLimit]=\"fileLimit\"\n        [chooseIcon]=\"chooseIcon\"\n        [chooseLabel]=\"chooseLabel\"\n        [uploadLabel]=\"uploadLabel\"\n        [uploadIcon]=\"uploadIcon\"\n        [cancelIcon]=\"cancelIcon\"\n        [withCredentials]=\"withCredentials\"\n        [mode]=\"mode\"\n        [customUpload]=\"customUpload\"\n        [showUploadButton]=\"showUploadButton\"\n        [showCancelButton]=\"showCancelButton\"\n        [headers]=\"headers\"\n    ></freud-file-upload>\n  `,\n})"
                }
            ],
            "stories/typography/typography.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HeadingBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HeadingBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBold.bind({})"
                },
                {
                    "name": "HeadingRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRegular.bind({})"
                },
                {
                    "name": "HeadingSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSemibold.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p freud-typography [fontType]=\"fontType\" [fontBgColor]=\"fontBgColor\">{{label}}</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-5'\">h6/Bold-700/line-height-1.5 (h6Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-5'\">h5/Bold-700/line-height-1.5 (h5Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-5'\">h4/Bold-700/line-height-1.5 (h4Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-5'\">h3/Bold-700/line-height-1.5 (h3Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-5'\">h2/Bold-700/line-height-1.5 (h2Bold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-5'\">h1/Bold-700//line-height-1.5 (h1Bold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-2'\">h6/Bold-700/line-height-1.2 (h6Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-2'\">h5/Bold-700/line-height-1.2 (h5Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-2'\">h4/Bold-700/line-height-1.2 (h4Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-2'\">h3/Bold-700/line-height-1.2 (h3Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-2'\">h2/Bold-700/line-height-1.2 (h2Bold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-2'\">h1/Bold-700/line-height-1.2 (h1Bold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1'\">h6/Bold-700/line-height-1 (h6Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1'\">h5/Bold-700/line-height-1 (h5Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1'\">h4/Bold-700/line-height-1 (h4Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1'\">h3/Bold-700/line-height-1 (h3Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1'\">h2/Bold-700/line-height-1 (h2Bold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1'\">h1/Bold-700/line-height-1 (h1Bold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6BoldAuto'\">h6/Bold-700/line-height-Auto (h6BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5BoldAuto'\">h5/Bold-700/line-height-Auto (h5BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4BoldAuto'\">h4/Bold-700/line-height-Auto (h4BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3BoldAuto'\">h3/Bold-700/line-height-Auto (h3BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2BoldAuto'\">h2/Bold-700/line-height-Auto (h2BoldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1BoldAuto'\">h1/Bold-700/line-height-auto (h1BoldAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-5'\">h6/regular-400/line-height-1.5 (h6Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-5'\">h5/regular-400/line-height-1.5 (h5Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-5'\">h4/regular-400/line-height-1.5 (h4Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-5'\">h3/regular-400/line-height-1.5 (h3Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-5'\">h2/regular-400/line-height-1.5 (h2Regular1-5)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-5'\">h1/regular-400/line-height-1.5 (h1Regular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-2'\">h6/regular-400/line-height-1.2 (h6Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-2'\">h5/regular-400/line-height-1.2 (h5Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-2'\">h4/regular-400/line-height-1.2 (h4Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-2'\">h3/regular-400/line-height-1.2 (h3Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-2'\">h2/regular-400/line-height-1.2 (h2Regular1-2)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-2'\">h1/regular-400/line-height-1.2 (h1Regular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1'\">h6/regular-400/line-height-1 (h6Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1'\">h5/regular-400/line-height-1 (h5Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1'\">h4/regular-400/line-height-1 (h4Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1'\">h3/regular-400/line-height-1 (h3Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1'\">h2/regular-400/line-height-1 (h2Regular1)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1'\">h1/regular-400/line-height-1 (h1Regular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6RegularAuto'\">h6/regular-400/line-height-Auto (h6RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5RegularAuto'\">h5/regular-400/line-height-Auto (h5RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4RegularAuto'\">h4/regular-400/line-height-Auto (h4RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3RegularAuto'\">h3/regular-400/line-height-Auto (h3RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2RegularAuto'\">h2/regular-400/line-height-Auto (h2RegularAuto)</p>\r\n    <p freud-typography [fontType]=\"'h1RegularAuto'\">h1/regular-400/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-5'\">h6/Semibold-600/line-height-1.5 (h6Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-5'\">h5/Semibold-600/line-height-1.5 (h5Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-5'\">h4/Semibold-600/line-height-1.5 (h4Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-5'\">h3/Semibold-600/line-height-1.5 (h3Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-5'\">h2/Semibold-600/line-height-1.5 (h2Semibold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-5'\">h1/Semibold-600/line-height-1.5 (h1Semibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-2'\">h6/Semibold-600/line-height-1.2 (h6Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-2'\">h5/Semibold-600/line-height-1.2 (h5Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-2'\">h4/Semibold-600/line-height-1.2 (h4Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-2'\">h3/Semibold-600/line-height-1.2 (h3Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-2'\">h2/Semibold-600/line-height-1.2 (h2Semibold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-2'\">h1/Semibold-600/line-height-1.2 (h1Semibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1'\">h6/Semibold-600/line-height-1 (h6Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1'\">h5/Semibold-600/line-height-1 (h5Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1'\">h4/Semibold-600/line-height-1 (h4Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1'\">h3/Semibold-600/line-height-1 (h3Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1'\">h2/Semibold-600/line-height-1 (h2Semibold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1'\">h1/Semibold-600/line-height-1 (h1Regular1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6SemiboldAuto'\">h6/Semibold-600/line-height-Auto (h6SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5SemiboldAuto'\">h5/Semibold-600/line-height-Auto (h5SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4SemiboldAuto'\">h4/Semibold-600/line-height-Auto (h4SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3SemiboldAuto'\">h3/Semibold-600/line-height-Auto (h3SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2SemiboldAuto'\">h2/Semibold-600/line-height-Auto (h2SemiboldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1SemiboldAuto'\">h1/Semibold-600/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateTextBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-5'\">small/Bold-700/line-height-1.5 (smallBold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-5'\">body/Bold-700/line-height-1.5 (bodyBold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-2'\">small/Bold-700/line-height-1.2 (smallBold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-2'\">body/Bold-700/line-height-1.2 (bodyBold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1'\">small/Bold-700/line-height-1 (smallBold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1'\">body/Bold-700/line-height-1 (bodyBold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBoldAuto'\">small/Bold-700/line-height-Auto (smallBoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBoldAuto'\">body/Bold-700/line-height-Auto (bodyBoldAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateTextRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-5'\">small/regular-400/line-height-1.5 (smallRegular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-5'\">body/regular-400/line-height-1.5 (bodyRegular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-2'\">small/regular-400/line-height-1.2 (smallRegular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-2'\">body/regular-400/line-height-1.2 (bodyRegular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1'\">small/regular-400/line-height-1 (smallRegular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1'\">body/regular-400/line-height-1 (bodyRegular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegularAuto'\">small/regular-400/line-height-Auto (smallRegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegularAuto'\">body/regular-400/line-height-Auto (bodyRegularAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateTextSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-5'\">small/Semibold-600/line-height-1.5 (smallSemibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-5'\">body/Semibold-600/line-height-1.5 (bodySemibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-2'\">small/Semibold-600/line-height-1.2 (smallSemibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-2'\">body/Semibold-600/line-height-1.2 (bodySemibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1'\">small/Semibold-600/line-height-1 (smallSemibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1'\">body/Semibold-600/line-height-1 (bodySemibold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemiboldAuto'\">small/Semibold-600/line-height-Auto (smallSemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemiboldAuto'\">body/Semibold-600/line-height-Auto (bodySemiboldAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TextBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextBold.bind({})"
                },
                {
                    "name": "TextRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextRegular.bind({})"
                },
                {
                    "name": "TextSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextSemibold.bind({})"
                }
            ],
            "stories/buttons/speed-dial/SpeedDial.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DirectionDown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DirectionLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "itemsWithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {icon: 'freud-icon freud-icon-refresh', command: () => {\r\n      console.log('Evento update')\r\n    }\r\n  },\r\n  {\r\n    icon: 'freud-icon freud-icon-close', command: () => {\r\n      console.log('Evento delete')\r\n    },\r\n  },\r\n  {icon: 'freud-icon freud-icon-check'}\r\n]"
                },
                {
                    "name": "Mask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSpeedDialComponent>",
                    "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 250px; width: 120px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSpeedDialComponent>",
                    "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 80px; width: 80px; margin: 50px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TypeCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                },
                {
                    "name": "TypeQuarterCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                },
                {
                    "name": "TypeQuarterDownRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                }
            ],
            "stories/buttons/button/Button.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBGColor.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDisabled.bind({})"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIcon.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateLoading.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button {{color}}'),\n})"
                },
                {
                    "name": "TemplateBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLBgColor,\n})"
                },
                {
                    "name": "TemplateDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Disabled'),\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-button\n      [color]=\"color\"\n      [bgColor]=\"bgColor\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [loading]=\"loading\"\n      [icon]=\"icon\"\n      >{{label}}</freud-button>\n`"
                },
                {
                    "name": "templateHTMLBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"true\" [color]=\"'primary'\">Button primary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'secondary'\">Button secondary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'ghost'\">Button ghost</freud-button>\n    </div>\n`"
                },
                {
                    "name": "templateHTMLSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"bgColor\" [color]=\"color\" [size]=\"'sm'\">Button sm</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'md'\">Button md</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'lg'\">Button lg</freud-button>\n    </div>\n`"
                },
                {
                    "name": "TemplateIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace(\n    '{{label}}',\n    '<span class=\"freud-icon freud-icon-check freud-icon-20px\"></span>'\n  ),\n})"
                },
                {
                    "name": "TemplateLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button'),\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLSize,\n})"
                },
                {
                    "name": "WithIconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateLoading .bind({})"
                }
            ],
            "stories/feedback/alert-messages/AlertMessages.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Inline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateInline.bind({})"
                },
                {
                    "name": "messages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMessage[]",
                    "defaultValue": "[\n  {severity:'success', summary:'Success', detail:'Message content'},\n  {severity:'info', summary:'Info', detail:'Message content'},\n  {severity:'warn', summary:'Warning', detail:'Message content'},\n  {severity:'error', summary:'Error', detail:'Message content'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAlertMessagesComponent>",
                    "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-messages\n        [messages]=\"messages\">\n    </freud-alert-messages>\n  `,\n})"
                },
                {
                    "name": "TemplateInline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAlertMessagesComponent>",
                    "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-message [severity]=\"'success'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'info'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'warn'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'error'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n  `,\n})"
                }
            ],
            "stories/buttons/split-button/SplitButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Update', icon: 'freud-icon freud-icon-refresh', command: () => {\n      console.log('Evento update')\n    }\n  },\n  {\n    label: 'Delete', icon: 'freud-icon freud-icon-close', command: () => {\n      console.log('Evento delete')\n    },\n  },\n  {label: 'Zenklub', icon: 'freud-icon freud-icon-info', url: 'http://zenklub.com'},\n  {separator: true},\n  {label: 'Setup', icon: 'freud-icon freud-icon-cog'}\n]"
                },
                {
                    "name": "itemsWithoutIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Update', command: () => {console.log('Evento update')}\n  },\n  {\n    label: 'Delete', command: () => {console.log('Evento delete')},\n  },\n  {label: 'Zenklub', url: 'http://zenklub.com'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSplitButtonComponent>",
                    "defaultValue": "(args: FreudSplitButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-split-button\n        [label]=\"label\"\n        [disabled]=\"disabled\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n    </freud-split-button>\n    <p *ngIf=\"!disabled\" style=\"margin-bottom: 150px\"></p>\n`"
                }
            ],
            "stories/feedback/knob/Knob.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudKnobComponent>",
                    "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-knob\r\n      [value]=\"value\"\r\n      [min]=\"min\"\r\n      [max]=\"max\"\r\n      [step]=\"step\"\r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-knob>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudKnobComponent>",
                    "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"display: flex; align-items: center;\">\r\n      <freud-knob style=\"margin-right: 20px\"\r\n        [value]=\"'50'\"\r\n        [size]=\"'default'\">\r\n      </freud-knob>\r\n\r\n      <freud-knob\r\n        [value]=\"'50'\"\r\n        [size]=\"'large'\">\r\n      </freud-knob>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/progress-bar/ProgressBar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Indeterminate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudProgressBarComponent>",
                    "defaultValue": "(\r\n  args: FreudProgressBarComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <freud-progress-bar [bgColor]=\"bgColor\" [value]=\"50\" [mode]=\"mode\">\r\n      </freud-progress-bar>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/rating/Rating.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudRatingComponent>",
                    "defaultValue": "(\r\n  args: FreudRatingComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-rating\r\n      [value]=\"value\"\r\n      [stars]=\"stars\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-rating>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/progress-spinner/ProgressSpinner.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudProgressSpinnerComponent>",
                    "defaultValue": "(\r\n  args: FreudProgressSpinnerComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-progress-spinner [bgColor]=\"bgColor\">\r\n      </freud-progress-spinner>\r\n  </div>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/steps/Steps.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "itens",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepMenu[]",
                    "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudStepsComponent>",
                    "defaultValue": "(\r\n  args: FreudStepsComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-steps [model]=\"model\" [readonly]=\"readonly\" [activeIndex]=\"activeIndex\" [bgColor]=\"bgColor\"></freud-steps>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/tag/Tag.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "BGColorOutline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTagComponent>",
                    "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag [outline]=\"outline\" [color]=\"color\" [value]=\"value\"></freud-tag>\n  `,\n})"
                },
                {
                    "name": "TemplateBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTagComponent>",
                    "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [value]=\"'Default'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'success'\" [value]=\"'Success'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'info'\" [value]=\"'Info'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'warning'\" [value]=\"'Warning'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'error'\" [value]=\"'Error'\"></freud-tag>\n  `,\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/feedback/tooltip/Tooltip.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Bottom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Left",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Right",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTooltipComponent>",
                    "defaultValue": "(\r\n  args: FreudTooltipComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <span freud-tooltip style=\"color:{{bgColor ? 'white' : 'black'}}\"\r\n      [tooltipLabel]=\"tooltipLabel\"\r\n      [tooltipPosition]=\"tooltipPosition\"\r\n      style=\"font-family: 'Source Sans Pro'\"\r\n      [bgColor]=\"bgColor\">Passe o mouse aqui!</span>\r\n  `,\r\n})"
                },
                {
                    "name": "Top",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/feedback/skeleton/Skeleton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSkeletonComponent>",
                    "defaultValue": "(\r\n  args: FreudSkeletonComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'350px'\"\r\n        [height]=\"'70px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <div style=\"display: flex\">\r\n        <freud-skeleton style=\"margin-right: 10px\"\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n        <freud-skeleton\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n      </div>\r\n  </div>\r\n  `,\r\n})"
                }
            ],
            "stories/forms/auto-complete/AutoComplete.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Dropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDropdown.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAutoCompleteComponent>",
                    "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
                },
                {
                    "name": "TemplateDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAutoCompleteComponent>",
                    "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateDropdown,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 150px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
                }
            ],
            "stories/forms/cascade-select/CascadeSelect.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'Australia',\n    code: 'AU',\n    states: [\n      {\n        name: 'New South Wales',\n        cities: [\n          {cname: 'Sydney', code: 'A-SY'},\n          {cname: 'Newcastle', code: 'A-NE'},\n          {cname: 'Wollongong', code: 'A-WO'}\n        ]\n      },\n      {\n        name: 'Queensland',\n        cities: [\n          {cname: 'Brisbane', code: 'A-BR'},\n          {cname: 'Townsville', code: 'A-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'Canada',\n    code: 'CA',\n    states: [\n      {\n        name: 'Quebec',\n        cities: [\n          {cname: 'Montreal', code: 'C-MO'},\n          {cname: 'Quebec City', code: 'C-QU'}\n        ]\n      },\n      {\n        name: 'Ontario',\n        cities: [\n          {cname: 'Ottawa', code: 'C-OT'},\n          {cname: 'Toronto', code: 'C-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'United States',\n    code: 'US',\n    states: [\n      {\n        name: 'California',\n        cities: [\n          {cname: 'Los Angeles', code: 'US-LA'},\n          {cname: 'San Diego', code: 'US-SD'},\n          {cname: 'San Francisco', code: 'US-SF'}\n        ]\n      },\n      {\n        name: 'Florida',\n        cities: [\n          {cname: 'Jacksonville', code: 'US-JA'},\n          {cname: 'Miami', code: 'US-MI'},\n          {cname: 'Tampa', code: 'US-TA'},\n          {cname: 'Orlando', code: 'US-OR'}\n        ]\n      },\n      {\n        name: 'Texas',\n        cities: [\n          {cname: 'Austin', code: 'US-AU'},\n          {cname: 'Dallas', code: 'US-DA'},\n          {cname: 'Houston', code: 'US-HO'}\n        ]\n      }\n    ]\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCascadeSelectComponent>",
                    "defaultValue": "(args: FreudCascadeSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-cascade-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"'cname'\"\n          [optionValue]=\"'code'\"\n          [placeholder]=\"placeholder\"\n          [optionGroupLabel]=\"'name'\"\n          [optionGroupChildren]=\"['states', 'cities']\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-cascade-select>\n    </div>\n`"
                }
            ],
            "stories/forms/checkbox/Checkbox.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCheckboxComponent>",
                    "defaultValue": "(args: FreudCheckboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n      <freud-checkbox\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [bgColor]=\"bgColor\"\n        [invalid]=\"invalid\">\n    </freud-checkbox>\n`"
                }
            ],
            "stories/forms/input-group/InputGroup.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRadioAndButton.bind({})"
                },
                {
                    "name": "CheckboxAndText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCheckboxAndText.bind({})"
                },
                {
                    "name": "IconAndRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconAndRadio.bind({})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconLeft.bind({})"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconRight.bind({})"
                },
                {
                    "name": "RadioAndButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRadioAndButton.bind({})"
                },
                {
                    "name": "TemplateCheckboxAndText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-checkbox></freud-checkbox>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">ww</span>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateIconAndRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item\"></freud-radio-button>\n      </span>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateIconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateIconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateRadioAndButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item2\"></freud-radio-button>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <freud-button>Button</freud-button>\n    </div>\n  `,\n})"
                }
            ],
            "stories/forms/input-mask/InputMask.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Celular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CPF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Data",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Telefone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputMaskComponent>",
                    "defaultValue": "(args: FreudInputMaskComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-mask\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [mask]=\"mask\"\n        [bgColor]=\"bgColor\">\n    </freud-input-mask>\n`"
                }
            ],
            "stories/forms/input-number/InputNumber.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ButtonLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateButtonLayout.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputNumberComponent>",
                    "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "TemplateButtonLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputNumberComponent>",
                    "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'stacked'\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'horizontal'\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [buttonLayout]=\"'vertical'\"\n        [showButtons]=\"true\">\n    </freud-input-number> <br><br>\n  `,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [showButtons]=\"showButtons\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number>\n`"
                }
            ],
            "stories/forms/input-password/InputPassword.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFeedback.bind({})"
                },
                {
                    "name": "CustomTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFull.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Feedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFeedback.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n  <div style=\"height: 130px\">\n          <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-input-password>\n  </div>\n`"
                },
                {
                    "name": "TemplateFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFeedback,\n})"
                },
                {
                    "name": "templateFull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 350px\">\n        <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n            <ng-container freudTemplateHeader>\n              <strong>Pick a password</strong>\n            </ng-container>\n            <ng-container freudTemplatefooter>\n                <div>\n                  <hr>\n                  <p class=\"p-mt-2\">Suggestions</p>\n                  <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\n                      <li>At least one lowercase</li>\n                      <li>At least one uppercase</li>\n                      <li>At least one numeric</li>\n                      <li>Minimum 8 characters</li>\n                  </ul>\n                </div>\n            </ng-container>\n        </freud-input-password>\n    </div>\n`"
                },
                {
                    "name": "TemplateFull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFull,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-password\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [feedback]=\"feedback\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-password>\n`"
                }
            ],
            "stories/forms/input-text/InputText.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HelperText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-text\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [rightIcon]=\"rightIcon\"\n        [bgColor]=\"bgColor\">\n    </freud-input-text>\n`"
                }
            ],
            "stories/forms/listbox/Listbox.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Checkbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CheckboxAndFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Filter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudListboxComponent>",
                    "defaultValue": "(args: FreudListboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-listbox\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [options]=\"options\"\n          [multiple]=\"multiple\"\n          [filter]=\"filter\"\n          [checkbox]=\"checkbox\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [invalid]=\"invalid\">\n      </freud-listbox>\n    </div>\n`"
                }
            ],
            "stories/forms/multi-select/MultiSelect.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Chip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMultiSelectComponent>",
                    "defaultValue": "(args: FreudMultiSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 300px\">\n        <freud-multi-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [display]=\"display\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-multi-select>\n    </div>\n`"
                }
            ],
            "stories/forms/select/Select.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSelectComponent>",
                    "defaultValue": "(args: FreudSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-select>\n    </div>\n`"
                }
            ],
            "stories/forms/radio-button/RadioButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudRadioButtonComponent>",
                    "defaultValue": "(args: FreudRadioButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n  argTypes: {\n    value: {\n      name: 'ModelValue',\n      type: { name: 'string' },\n      defaultValue: 'Hello',\n      description: 'demo description',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'Hello' },\n      },\n      control: {\n        type: 'text'\n      }\n    }\n  }\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n        <freud-radio-button-example\n            [(ngModel)]=\"value\"\n            [disabled]=\"disabled\"\n            [label]=\"label\"\n            [name]=\"'label'\"\n            [bgColor]=\"bgColor\"\n        ></freud-radio-button-example>\n`"
                }
            ],
            "stories/forms/switch/Switch.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSwitchComponent>",
                    "defaultValue": "(args: FreudSwitchComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n      <freud-input-switch\n        [(ngModel)]=\"defaultValue\"\n        [disabled]=\"disabled\"\n        [invalid]=\"invalid\">\n    </freud-input-switch>\n`"
                },
                {
                    "name": "value",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "defaultValue": "false"
                }
            ],
            "stories/media/avatar/Avatar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Imagem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAvatarComponent>",
                    "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-avatar [size]=\"size\" [label]=\"label\" [badge]=\"badge\" [bgColor]=\"bgColor\" [withIcon]=\"withIcon\" [image]=\"image\"></freud-avatar>\n  `,\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAvatarComponent>",
                    "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center\">\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'sm'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'md'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'lg'\" [label]=\"'A'\"></freud-avatar>\n    </div>\n  `,\n})"
                },
                {
                    "name": "WithBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/media/gallery/gallery.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"alt\": \"Description for Image 1\",\n    \"title\": \"Title 1\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"alt\": \"Description for Image 2\",\n    \"title\": \"Title 2\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"alt\": \"Description for Image 3\",\n    \"title\": \"Title 3\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"alt\": \"Description for Image 4\",\n    \"title\": \"Title 4\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"alt\": \"Description for Image 5\",\n    \"title\": \"Title 5\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"alt\": \"Description for Image 6\",\n    \"title\": \"Title 6\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"alt\": \"Description for Image 7\",\n    \"title\": \"Title 7\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"alt\": \"Description for Image 8\",\n    \"title\": \"Title 8\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"alt\": \"Description for Image 9\",\n    \"title\": \"Title 9\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"alt\": \"Description for Image 10\",\n    \"title\": \"Title 10\"\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudGalleryComponent>",
                    "defaultValue": "(args: FreudGalleryComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-gallery\n        [images]=\"images\"\n        [showThumbnails]=\"showThumbnails\"\n        [bgColor]=\"bgColor\">\n    </freud-gallery>\n  `,\n})"
                },
                {
                    "name": "WithoutThumbnail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/media/image/Image.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudImageComponent>",
                    "defaultValue": "(args: FreudImageComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-image [preview]=\"preview\" [alt]=\"alt\" [src]=\"src\" [height]=\"height\" [width]=\"width\"></freud-image>\n  `,\n})"
                }
            ],
            "stories/others/action-icon/ActionIcon.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudActionIconComponent>",
                    "defaultValue": "(args: FreudActionIconComponent) => ({\n  props: { ...args },\n  template: `<freud-action-icon [bgColor]=\"bgColor\"></freud-action-icon>`,\n})"
                }
            ],
            "stories/others/calendar/Calendar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCalendarComponent>",
                    "defaultValue": "(args: FreudCalendarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-calendar [(ngModel)]=\"value\">\n    </freud-calendar>\n  `,\n})"
                }
            ],
            "stories/others/divider/Divider.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateHorizontal.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "TemplateHorizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'left'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'center'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'right'\">\n            Title\n      </freud-divider>\n  `,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-divider\n        [tabindex]=\"tabindex\"\n        [layout]=\"layout\"\n        [bgColor]=\"bgColor\">\n        Title\n    </freud-divider>\n`"
                },
                {
                    "name": "TemplateVertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <div style=\"display: flex;gap: 16px;height: 220px\">\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'top'\">\n              Title\n        </freud-divider>\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'bottom'\">\n              Title\n        </freud-divider>\n      </div>\n  `,\n})"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateVertical.bind({})"
                }
            ],
            "stories/others/select-button/SelectButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OptionDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
                },
                {
                    "name": "optionsDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {label: 'Item1', disabled: true},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSelectButtonComponent>",
                    "defaultValue": "(args: FreudSelectButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-select-button\n        [options]=\"options\"\n        [multiple]=\"multiple\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [disabled]=\"disabled\"\n        [selectedOption]=\"selectedOption\"\n        [optionDisabled]=\"optionDisabled\"\n        [optionLabel]=\"optionLabel\"></freud-select-button>\n`"
                }
            ],
            "stories/others/slider/Slider.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Range",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSliderComponent>",
                    "defaultValue": "(args: FreudSliderComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-slider\n        [(ngModel)]=\"value\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [orientation]=\"orientation\"\n        [range]=\"range\"\n        [disabled]=\"disabled\">\n    </freud-slider>\n`"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/structure/breadcrumb/Breadcrumb.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem",
                    "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBreadcrumbComponent>",
                    "defaultValue": "(args: FreudBreadcrumbComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-breadcrumb [bgColor]=\"bgColor\" [items]=\"items\" [home]=\"home\"></freud-breadcrumb>\n  `,\n})"
                }
            ],
            "stories/others/scroll-top/ScrollTop.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTargetBGColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "TargetElement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTarget.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-top [threshold]=\"200\"></freud-scroll-top>\n  `,\n})"
                },
                {
                    "name": "TemplateTarget",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 250px;width: 250px; overflow: auto\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n      </p>\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\"></freud-scroll-top>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateTargetBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 250px;width: 300px; padding: 10px; overflow: auto;background-color: #241249; color: white\">\n        <p>\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n      </p>\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\" [bgColor]=\"true\"></freud-scroll-top>\n    </div>\n  `,\n})"
                }
            ],
            "stories/structure/menu/Menu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMenuComponent>",
                    "defaultValue": "(args: FreudMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-menu [items]=\"items\" [popup]=\"popup\"></freud-menu>\n  `,\n})"
                }
            ],
            "stories/structure/panel-menu/PanelMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {\n    label: 'File',\n    items: [{\n      label: 'New',\n      icon: 'pi pi-fw pi-plus',\n      items: [\n        {label: 'User', icon: 'pi pi-fw pi-user-plus'},\n        {label: 'Filter', icon: 'pi pi-fw pi-filter'}\n      ]\n    },\n      {label: 'Open', icon: 'pi pi-fw pi-external-link'},\n      {separator: true},\n      {label: 'Quit', icon: 'pi pi-fw pi-times'}\n    ]\n  },\n  {\n    label: 'Edit',\n    icon: 'pi pi-fw pi-pencil',\n    items: [\n      {label: 'Delete', icon: 'pi pi-fw pi-trash'},\n      {label: 'Refresh', icon: 'pi pi-fw pi-refresh'}\n    ]\n  },\n  {\n    label: 'Help',\n    icon: 'pi pi-fw pi-question',\n    items: [\n      {\n        label: 'Contents',\n        icon: 'pi pi-pi pi-bars'\n      },\n      {\n        label: 'Search',\n        icon: 'pi pi-pi pi-search',\n        items: [\n          {\n            label: 'Text',\n            items: [\n              {\n                label: 'Workspace'\n              }\n            ]\n          },\n          {\n            label: 'User',\n            icon: 'pi pi-fw pi-file',\n          }\n        ]}\n    ]\n  },\n  {\n    label: 'Actions',\n    icon: 'pi pi-fw pi-cog',\n    items: [\n      {\n        label: 'Edit',\n        icon: 'pi pi-fw pi-pencil',\n        items: [\n          {label: 'Save', icon: 'pi pi-fw pi-save'},\n          {label: 'Update', icon: 'pi pi-fw pi-save'},\n        ]\n      },\n      {\n        label: 'Other',\n        icon: 'pi pi-fw pi-tags',\n        items: [\n          {label: 'Delete', icon: 'pi pi-fw pi-minus'}\n        ]\n      }\n    ]\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelMenuComponent>",
                    "defaultValue": "(args: FreudPanelMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 400px\">\n        <freud-panel-menu\n          [items]=\"items\"\n        ></freud-panel-menu>\n    </div>\n  `,\n})"
                }
            ],
            "stories/structure/menubar/Menubar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem",
                    "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {\n    label:'Users',\n    icon:'freud-icon freud-icon-user',\n    items:[\n      {\n        label:'New',\n        icon:'freud-icon freud-icon-user-plus',\n\n      },\n      {\n        label:'Delete',\n        icon:'freud-icon freud-icon-user-minus',\n\n      },\n      {\n        label:'Search',\n        icon:'freud-icon freud-icon-users',\n        items:[\n          {\n            label:'Filter',\n            icon:'freud-icon freud-icon-filter',\n            items:[\n              {\n                label:'Print',\n                icon:'freud-icon freud-icon-print'\n              }\n            ]\n          },\n          {\n            icon:'freud-icon freud-icon-bars',\n            label:'List'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label:'Events',\n    icon:'freud-icon freud-icon-calendar',\n    items:[\n      {\n        label:'Edit',\n        icon:'freud-icon freud-icon-pencil',\n      },\n    ]\n  },\n  {\n    label:'Quit',\n    icon:'freud-icon freud-icon-power-off'\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMenubarComponent>",
                    "defaultValue": "(args: FreudMenubarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 220px;width: 100%\">\n      <freud-menubar\n          [startImgAlt]=\"'Home'\"\n          [startImgSrc]=\"startImgSrc\"\n          [startImgHref]=\"'https://zenklub.com.br'\"\n          [items]=\"items\"\n          [bgColor]=\"bgColor\"\n      ></freud-menubar>\n    </div>\n  `,\n})"
                }
            ],
            "stories/structure/scroll-panel/ScrollPanel.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollPanelComponent>",
                    "defaultValue": "(args: FreudScrollPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.\n</freud-scroll-panel>\n  `,\n})"
                }
            ],
            "stories/structure/tab-menu/TabMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Home', command: () => console.log('menuClicked')},\n  {label: 'Calendar', command: () => console.log('menuClicked')},\n  {label: 'Edit', command: () => console.log('menuClicked')},\n  {label: 'Documentation', command: () => console.log('menuClicked')},\n  {label: 'Settings', command: () => console.log('menuClicked')}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTabMenuComponent>",
                    "defaultValue": "(args: FreudTabMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-menu\n      [items]=\"items\"\n      [activeItem]=\"activeItem\"\n      [bgColor]=\"bgColor\"\n    ></freud-tab-menu>\n  `,\n})"
                }
            ],
            "stories/structure/splitter/Splitter.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSplitterComponent>",
                    "defaultValue": "(args: FreudSplitterComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-splitter [panelSizes]=\"panelSizes\" [style]=\"{'height': '300px'}\" [layout]=\"layout\">\n      <ng-template pTemplate>\n        <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n          Panel 1\n        </div>\n      </ng-template>\n    <ng-template pTemplate>\n      <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n        Panel 2\n      </div>\n    </ng-template>\n</freud-splitter>\n  `,\n})"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/structure/slide-menu/SlideMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSlideMenuComponent>",
                    "defaultValue": "(args: FreudSlideMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-slide-menu [items]=\"items\"></freud-slide-menu>\n  `,\n})"
                }
            ],
            "projects/web-components/src/components/typography/typrography.type.ts": [
                {
                    "name": "bodyTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typrography.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // Regular\r\n  'smallRegular1-5',\r\n  'bodyRegular1-5',\r\n\r\n  'smallRegular1-2',\r\n  'bodyRegular1-2',\r\n\r\n  'smallRegular1',\r\n  'bodyRegular1',\r\n  \r\n  'smallRegularAuto',\r\n  'bodyRegularAuto',\r\n\r\n  // Semibold\r\n  'smallSemibold1-5',\r\n  'bodySemibold1-5',\r\n\r\n  'smallSemibold1-2',\r\n  'bodySemibold1-2',\r\n\r\n  'smallSemibold1',\r\n  'bodySemibold1',\r\n\r\n  'smallSemiboldAuto',\r\n  'bodySemiboldAuto',\r\n\r\n  // Bold\r\n  'smallBold1-5',\r\n  'bodyBold1-5',\r\n\r\n  'smallBold1-2',\r\n  'bodyBold1-2',\r\n\r\n  'smallBold1',\r\n  'bodyBold1',\r\n\r\n  'smallBoldAuto',\r\n  'bodyBoldAuto',\r\n]"
                },
                {
                    "name": "headingTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typrography.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // Regular\r\n  'h1Regular1-5',\r\n  'h2Regular1-5',\r\n  'h3Regular1-5',\r\n  'h4Regular1-5',\r\n  'h5Regular1-5',\r\n  'h6Regular1-5',\r\n\r\n  'h1Regular1-2',\r\n  'h2Regular1-2',\r\n  'h3Regular1-2',\r\n  'h4Regular1-2',\r\n  'h5Regular1-2',\r\n  'h6Regular1-2',\r\n\r\n  'h1Regular1',\r\n  'h2Regular1',\r\n  'h3Regular1',\r\n  'h4Regular1',\r\n  'h5Regular1',\r\n  'h6Regular1',\r\n  \r\n  'h1RegularAuto',\r\n  'h2RegularAuto',\r\n  'h3RegularAuto',\r\n  'h4RegularAuto',\r\n  'h5RegularAuto',\r\n  'h6RegularAuto',\r\n\r\n  // Semibold\r\n  'h1Semibold1-5',\r\n  'h2Semibold1-5',\r\n  'h3Semibold1-5',\r\n  'h4Semibold1-5',\r\n  'h5Semibold1-5',\r\n  'h6Semibold1-5',\r\n\r\n  'h1Semibold1-2',\r\n  'h2Semibold1-2',\r\n  'h3Semibold1-2',\r\n  'h4Semibold1-2',\r\n  'h5Semibold1-2',\r\n  'h6Semibold1-2',\r\n\r\n  'h1Semibold1',\r\n  'h2Semibold1',\r\n  'h3Semibold1',\r\n  'h4Semibold1',\r\n  'h5Semibold1',\r\n  'h6Semibold1',\r\n\r\n  'h1SemiboldAuto',\r\n  'h2SemiboldAuto',\r\n  'h3SemiboldAuto',\r\n  'h4SemiboldAuto',\r\n  'h5SemiboldAuto',\r\n  'h6SemiboldAuto',\r\n\r\n  // Bold\r\n  'h1Bold1-5',\r\n  'h2Bold1-5',\r\n  'h3Bold1-5',\r\n  'h4Bold1-5',\r\n  'h5Bold1-5',\r\n  'h6Bold1-5',\r\n\r\n  'h1Bold1-2',\r\n  'h2Bold1-2',\r\n  'h3Bold1-2',\r\n  'h4Bold1-2',\r\n  'h5Bold1-2',\r\n  'h6Bold1-2',\r\n\r\n  'h1Bold1',\r\n  'h2Bold1',\r\n  'h3Bold1',\r\n  'h4Bold1',\r\n  'h5Bold1',\r\n  'h6Bold1',\r\n\r\n  'h1BoldAuto',\r\n  'h2BoldAuto',\r\n  'h3BoldAuto',\r\n  'h4BoldAuto',\r\n  'h5BoldAuto',\r\n  'h6BoldAuto',\r\n]"
                }
            ],
            "projects/web-components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "stories/feedback/toast/Toast.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/toast/Toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/toast/Toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudToastComponent>",
                    "defaultValue": "(args: FreudToastComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-toast-examples>\n    </freud-toast-examples>\n  `,\n})"
                }
            ],
            "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudConfirmDialogComponent>",
                    "defaultValue": "(args: FreudConfirmDialogComponent) => ({\n  template: `\n    <freud-confirm-dialog-example></freud-confirm-dialog-example>\n  `,\n})"
                }
            ],
            "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudConfirmPopupComponent>",
                    "defaultValue": "(args: FreudConfirmPopupComponent) => ({\n  template: `\n    <freud-confirm-popup-example></freud-confirm-popup-example>\n  `,\n})"
                }
            ],
            "stories/others/block-ui/BlockUI.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Panel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBlockExampleComponent>",
                    "defaultValue": "(args: FreudBlockExampleComponent) => ({\n  props: { ...args },\n  template: `<freud-block-ui-example [withTarget]=\"withTarget\"></freud-block-ui-example>`,\n})"
                }
            ],
            "projects/web-components/src/components/typography/typography.component.ts": [
                {
                    "name": "types",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "headingTypes.concat(bodyTypes)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/web-components/src/components/media/avatar/avatar.component.ts": [
                {
                    "name": "avatarSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\" | \"lg\"",
                    "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/buttons/button/button.component.ts": [
                {
                    "name": "buttonColors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"ghost\"",
                    "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "buttonSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\" | \"lg\"",
                    "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/badge/badge.component.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"actived\"",
                    "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "sizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"large\"",
                    "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/tag/tag.component.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\"",
                    "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts": [
                {
                    "name": "directions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"up\" | \"down\" | \"left\" | \"right\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                    "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "types",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                    "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/typography/typography.component.ts": [
                {
                    "name": "fontTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/web-components/src/components/typography/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "projects/web-components/src/components/forms/listbox/listbox.component.ts": [
                {
                    "name": "listboxFilterMatchModes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                    "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts": [
                {
                    "name": "position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/toast/toast.component.ts": [
                {
                    "name": "positions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\"",
                    "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts": [
                {
                    "name": "severities",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                    "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/knob/knob.component.ts": [
                {
                    "name": "sizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"large\"",
                    "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/web-components/src/api/gallery-photo.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GalleryPhoto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/api/menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/api/message.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSpeedDialComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/split-button/split-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSplitButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAlertMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAlertMessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudKnobComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudProgressSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/rating/rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/skeleton/skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSkeletonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/steps/steps.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudStepsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/steps/steps.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StepMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/auto-complete/auto-complete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAutoCompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/cascade-select/cascade-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCascadeSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-mask/input-mask.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputMaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/27",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-number/input-number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-password/input-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-textarea/input-textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputTextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudListboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/fille-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudFileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/gallery/gallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudGalleryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAccordionTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/action-icon/action-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudActionIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/block-ui/block-ui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBlockUIComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/36",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/divider/divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/scroll-top/scroll-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/select-button/select-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSelectButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/timeline/timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/menubar/menubar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMenubarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/panel-menu/panel-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudPanelMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/slide-menu/slide-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSlideMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/splitter/splitter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSplitterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-menu/tab-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/45",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typography.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "types",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typrography.type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bodyTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typrography.type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headingTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/services/confirmation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudConfirmationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/services/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudMessageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTMLBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTMLSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectionDown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectionLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsWithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Mask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeQuarterCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeQuarterDownRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsWithoutIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "messages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateInline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Actived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBlank",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Indeterminate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColorOutline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/Toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/Toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/toast-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudToastExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bottom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Left",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Right",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Top",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/auto-complete-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAutoCompleteExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxAndText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconAndRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RadioAndButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCheckboxAndText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconAndRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRadioAndButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Celular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CPF",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Telefone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateButtonLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Feedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateFull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HelperText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoResize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Checkbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxAndFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Filter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Chip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/radio-button-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRadioButtonExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/forms/reactive-form-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudReactiveFormExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "value",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Imagem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicUi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutThumbnail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmPopupExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/modal-and-popover-examples/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmationDialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Panel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/block-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBlockExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Advanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateAdvanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateVertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TargetElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTarget",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTargetBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OptionDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optionsDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Range",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "home",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "home",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}