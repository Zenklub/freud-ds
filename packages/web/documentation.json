{
    "pipes": [],
    "interfaces": [
        {
            "name": "FreudDynamicDialogConfig",
            "id": "interface-FreudDynamicDialogConfig-aa6251d64ef130cbac4b4d0875a942fa77ab46fa18962dce834a63c94eafd5f41c729ad54a176bcc26c91a90f18428fe63773803dc49fc67e1140c51e577a18e",
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicDialogConfig } from \"primeng/dynamicdialog/dynamicdialog-config\";\n\nexport interface FreudDynamicDialogConfig extends DynamicDialogConfig {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DynamicDialogConfig"
        },
        {
            "name": "FreudMenuItem",
            "id": "interface-FreudMenuItem-7746acb2da7c4b4a253a1d9efd953121cf818331639e2f54191c74a83601bc10fc0c07cd8d337f051ae3ec98a2df74d1e2275e9f857ce77faa21359efe9ef470",
            "file": "projects/web-components/src/api/menu.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from \"primeng/api\";\n\nexport interface FreudMenuItem extends MenuItem {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "MenuItem"
        },
        {
            "name": "FreudMessage",
            "id": "interface-FreudMessage-e85db5e8ba1672ebf76f0c52a0d776b580e4b3aeb873bd6696020830a501958484b900f31b04b95198ebfb8d752a5a0ccb44ebfec770cf2ab412176f4bfbfbe6",
            "file": "projects/web-components/src/api/message.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from \"primeng/api\";\n\nexport interface FreudMessage extends Message {}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Message"
        },
        {
            "name": "GalleryPhoto",
            "id": "interface-GalleryPhoto-a26d3792892dfe9911106e0516e41fbd1a15628c93ad1fbd1be68a118bb81d313b6c5d8bab1682ca9d9344bd5a719c447d943e19b57d81b4cf2671c8e1e4da17",
            "file": "projects/web-components/src/api/gallery-photo.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GalleryPhoto {\n  \"previewImageSrc\": string;\n  \"thumbnailImageSrc\": string;\n  \"alt\": string;\n  \"title\": string;\n}\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "previewImageSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "thumbnailImageSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StepMenu",
            "id": "interface-StepMenu-eecfadf3cb777efa3dcde334d52ad34e2fb23ac5677b858ea0b24d776b28fc512921e44d2c0dd13b0afe3ecca0ae0ba650e0ced6b0cc580fe9eb21cc932539cf",
            "file": "projects/web-components/src/components/feedback/steps/steps.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\nexport interface StepMenu extends FreudMenuItem {}\n\n@Component({\n  selector: 'freud-steps',\n  template: `\n    <p-steps\n      [model]=\"model\"\n      [activeIndex]=\"activeIndex\"\n      [readonly]=\"readonly\"\n      (activeIndexChange)=\"activeIndexChange.emit($event)\">\n    </p-steps>\n  `,\n  styleUrls: ['./steps.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-steps',\n    '[class.freud-steps-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudStepsComponent {\n\n  @Input() model!: StepMenu[];\n  @Input() readonly: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() activeIndex: number = 0;\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n}\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "FreudMenuItem"
        }
    ],
    "injectables": [
        {
            "name": "FreudConfirmationService",
            "id": "injectable-FreudConfirmationService-7cd67e39c79dd4feb98b305a0c41da51c88ff00ca087bd632773f11e3f8fed0e2a9e54a8f03b15d84df07feed233aa3cee2f392f74e6c3e4611757ff8acea15d",
            "file": "projects/web-components/src/services/confirmation.service.ts",
            "properties": [
                {
                    "name": "accept",
                    "defaultValue": "this.primeConfirmation['acceptConfirmationSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "requireConfirmation$",
                    "defaultValue": "this.primeConfirmation['requireConfirmationSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "confirmation",
                            "type": "Confirmation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmation",
                            "type": "Confirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAccept",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Confirmation, ConfirmationService } from 'primeng/api';\n\n@Injectable()\nexport class FreudConfirmationService {\n\n  constructor(private primeConfirmation: ConfirmationService) {}\n\n  requireConfirmation$ = this.primeConfirmation['requireConfirmationSource'].asObservable();\n  accept = this.primeConfirmation['acceptConfirmationSource'].asObservable();\n\n  confirm(confirmation: Confirmation) {\n    this.primeConfirmation['requireConfirmationSource'].next(confirmation);\n    return this;\n  }\n\n  close() {\n    this.primeConfirmation['requireConfirmationSource'].next(null);\n    return this;\n  }\n\n  onAccept() {\n    this.primeConfirmation['acceptConfirmationSource'].next(null);\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primeConfirmation",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "primeConfirmation",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FreudDialogService",
            "id": "injectable-FreudDialogService-0143e7ff51301e331e3c33b8667439a9a914a451eaf1bab5b7e938f13825323d70936a85c35f026e947a04240f6c684ce47646437e19216ffaab292f4d889623",
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
            "properties": [
                {
                    "name": "dialogComponentRefMap",
                    "defaultValue": "this.dialogService.dialogComponentRefMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "FreudDynamicDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DynamicDialogRef",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "FreudDynamicDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DialogService, DynamicDialogRef } from \"primeng/dynamicdialog\";\nimport { Injectable, Type } from \"@angular/core\";\nimport { FreudDynamicDialogConfig } from \"./dynamic-dialog.interface\";\n\n@Injectable()\nexport class FreudDialogService {\n\n  dialogComponentRefMap = this.dialogService.dialogComponentRefMap;\n  constructor(private dialogService: DialogService) {}\n  open(componentType: Type<any>, config: FreudDynamicDialogConfig): DynamicDialogRef {\n    return this.dialogService.open(componentType, config);\n  };\n}\n\n@Injectable()\nexport class FreudDynamicDialogRef extends DynamicDialogRef { }\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FreudDynamicDialogRef",
            "id": "injectable-FreudDynamicDialogRef-0143e7ff51301e331e3c33b8667439a9a914a451eaf1bab5b7e938f13825323d70936a85c35f026e947a04240f6c684ce47646437e19216ffaab292f4d889623",
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DialogService, DynamicDialogRef } from \"primeng/dynamicdialog\";\nimport { Injectable, Type } from \"@angular/core\";\nimport { FreudDynamicDialogConfig } from \"./dynamic-dialog.interface\";\n\n@Injectable()\nexport class FreudDialogService {\n\n  dialogComponentRefMap = this.dialogService.dialogComponentRefMap;\n  constructor(private dialogService: DialogService) {}\n  open(componentType: Type<any>, config: FreudDynamicDialogConfig): DynamicDialogRef {\n    return this.dialogService.open(componentType, config);\n  };\n}\n\n@Injectable()\nexport class FreudDynamicDialogRef extends DynamicDialogRef { }\n",
            "extends": "DynamicDialogRef",
            "type": "injectable"
        },
        {
            "name": "FreudMessageService",
            "id": "injectable-FreudMessageService-1c63889ad19d86b040c3f4531b88f9f03a64f82c1a6524cd8153968da362be1a4b225dee4cfca5abe779840561ff37ca138f72733e4733d2c9d7b45cf0b7d081",
            "file": "projects/web-components/src/services/message.service.ts",
            "properties": [
                {
                    "name": "clearObserver",
                    "defaultValue": "this.primeMessage['clearSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "messageObserver",
                    "defaultValue": "this.primeMessage['messageSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addAll",
                    "args": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { Message, MessageService } from \"primeng/api\";\n\n@Injectable()\nexport class FreudMessageService {\n\n  constructor(private primeMessage: MessageService) { }\n\n  messageObserver = this.primeMessage['messageSource'].asObservable();\n  clearObserver = this.primeMessage['clearSource'].asObservable();\n\n  add(message: Message) {\n    if (message) {\n      this.primeMessage['messageSource'].next(message);\n    }\n  }\n\n  addAll(messages: Message[]) {\n    if (messages && messages.length) {\n      this.primeMessage['messageSource'].next(messages);\n    }\n  }\n\n  clear(key?: string) {\n    this.primeMessage['clearSource'].next(key || null);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primeMessage",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "primeMessage",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "FreudSortableColumn",
            "id": "directive-FreudSortableColumn-75d5f4adfccce92c032e6247d1ac233e7c93d2b66fd7b7027dbccfb696af9163fd45b3ae097655c0d80c323e1d93c2d87f0b79dec2283f2220ebf347d828ee83",
            "file": "projects/web-components/src/components/others/table/table.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\n  AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  ContentChildren, Directive, HostListener,\n  Input, OnDestroy, OnInit,\n  QueryList,\n  TemplateRef, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FreudTemplate } from \"../../directive/template\";\nimport { Table } from \"primeng/table\";\nimport { Subscription } from \"rxjs\";\nimport { DomHandler } from \"primeng/dom\";\n\n@Component({\n  selector: 'freud-table',\n  template: `\n    <p-table\n      #tableRef\n      [value]=\"value\"\n      [columns]=\"columns\"\n      [style]=\"style\">\n\n      <ng-template pTemplate=\"caption\">\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n      </ng-template>\n\n      <ng-template pTemplate=\"header\" let-columns>\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\n      </ng-template>\n      <ng-content></ng-content>\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n        <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\n      </ng-template>\n\n      <ng-template pTemplate=\"summary\">\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n      </ng-template>\n    </p-table>\n  `,\n  styleUrls: ['./table.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-table',\n  }\n})\nexport class FreudTableComponent implements AfterContentInit {\n\n  @Input() value!: any[];\n  @Input() style!: string;\n  @Input() columns!: any[];\n  headerTemplate!: TemplateRef<any>;\n  headerGroupedTemplate!: TemplateRef<any>;\n  bodyTemplate!: TemplateRef<any>;\n  captionTemplate!: TemplateRef<any>;\n  summaryTemplate!: TemplateRef<any>;\n  @ContentChildren(FreudTemplate) templates!: QueryList<FreudTemplate>;\n  @ViewChild('tableRef') tableRef!: Table;\n\n  ngAfterContentInit() {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n\n        case 'headergrouped':\n          this.headerGroupedTemplate = item.template;\n          break;\n\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n      }\n    });\n  }\n}\n\n@Directive({\n  selector: '[freudSortableColumn]',\n  host: {\n    class: 'p-element',\n    '[class.p-sortable-column]': 'isEnabled()',\n    '[class.p-highlight]': 'sorted',\n    '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n    '[attr.role]': '\"columnheader\"',\n    '[attr.aria-sort]': 'sortOrder'\n  }\n})\nexport class FreudSortableColumn implements AfterViewInit, OnDestroy {\n  @Input('freudSortableColumn') field!: string;\n\n  @Input() freudSortableColumnDisabled!: boolean;\n\n  sorted!: boolean;\n\n  sortOrder!: string;\n\n  subscription!: Subscription;\n\n  constructor(public dt: FreudTableComponent) {\n    if (this.isEnabled()) {\n      setTimeout(() => {\n        this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta) => {\n          this.updateSortState();\n        });\n      }, 3000)\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n\n  updateSortState() {\n    this.sorted = this.dt.tableRef?.isSorted(this.field);\n    this.sortOrder = this.sorted ? (this.dt.tableRef.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent) {\n    if (this.isEnabled() && !this.isFilterElement(<HTMLElement>event.target)) {\n      this.updateSortState();\n      this.dt.tableRef.sort({\n        originalEvent: event,\n        field: this.field\n      });\n\n      DomHandler.clearSelection();\n    }\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  onEnterKey(event: MouseEvent) {\n    this.onClick(event);\n  }\n\n  isEnabled() {\n    return !this.freudSortableColumnDisabled;\n  }\n\n  isFilterElement(element: HTMLElement) {\n    return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n@Component({\n  selector: 'freud-sortIcon',\n  template: `\n        <i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\n           [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\n    `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'p-element'\n  }\n})\nexport class FreudSortIcon implements AfterViewInit, OnDestroy {\n  @Input() field!: string;\n\n  subscription!: Subscription;\n\n  sortOrder: number = 0;\n\n  constructor(public dt: FreudTableComponent, public cd: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit() {\n    this.cd.detectChanges();\n    setTimeout(() => {\n      this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta: any) => {\n        this.updateSortState();\n      });\n    }, 3000);\n    this.updateSortState();\n  }\n\n  onClick(event: any) {\n    event.preventDefault();\n  }\n\n  updateSortState() {\n    if (this.dt.tableRef?.sortMode === 'single') {\n      this.sortOrder = this.dt.tableRef?.isSorted(this.field) ? this.dt.tableRef.sortOrder : 0;\n    } else if (this.dt.tableRef?.sortMode === 'multiple') {\n      let sortMeta = this.dt.tableRef.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  getMultiSortMetaIndex() {\n    let multiSortMeta = this.dt.tableRef._multiSortMeta;\n    let index = -1;\n\n    if (multiSortMeta && this.dt.tableRef.sortMode === 'multiple' && (this.dt.tableRef.showInitialSortBadge || multiSortMeta.length > 1)) {\n      for (let i = 0; i < multiSortMeta.length; i++) {\n        let meta = multiSortMeta[i];\n        if (meta.field === this.field || meta.field === this.field) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  getBadgeValue() {\n    let index = this.getMultiSortMetaIndex();\n\n    return this.dt.tableRef.groupRowsBy && index > -1 ? index : index + 1;\n  }\n\n  isMultiSorted() {\n    return this.dt.tableRef?.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n",
            "selector": "[freudSortableColumn]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "freudSortableColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "freudSortableColumnDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130
                },
                {
                    "name": "keydown.enter",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 143
                }
            ],
            "propertiesClass": [
                {
                    "name": "dt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sorted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "isEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFilterElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnterKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown.enter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSortState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 106,
                "jsdoctags": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudTemplate",
            "id": "directive-FreudTemplate-44606a93213fedc1860eeaacb3d0afef80a9f0615ba3125c5a8005f2a7655a13ac701e22a6145772f3821bd459a0fc3c22e26c6fab53e5cae664496cf16e4c32",
            "file": "projects/web-components/src/components/directive/template/template.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgModule, Directive, Input, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Directive({\n  selector: '[freudTemplate]',\n  host: {}\n})\nexport class FreudTemplate {\n  @Input() type!: string;\n\n  @Input('freudTemplate') name!: string;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  getType(): string {\n    return this.name;\n  }\n}\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [FreudTemplate],\n  declarations: [FreudTemplate]\n})\nexport class FreudTemplateModule {}\n",
            "selector": "[freudTemplate]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "freudTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "FreudAccordionComponent",
            "id": "component-FreudAccordionComponent-dc135b89e0df1eeae7ed51ce526b601e2c056bd2029de96334f2946ff48e69f11679a45afd723a804c496eac51f90f19e7902d11dbf51eb587e1be08b2cfda8f",
            "file": "projects/web-components/src/components/others/accordion/accordion.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "template": "<p-accordion\n  [activeIndex]=\"activeIndex\"\n  [multiple]=\"multiple\"\n  [tabindex]=\"tabindex\"\n  [expandIcon]=\"expandIcon\"\n  [collapseIcon]=\"collapseIcon\"\n  [style]=\"style\"\n  (onOpen)=\"onOpen.emit($event)\"\n  (onClose)=\"onClose.emit($event)\">\n    <ng-container *ngFor=\"let template of templates\">\n      <p-accordionTab\n        [disabled]=\"template.disabled\"\n        [selected]=\"template.selected\"\n        [tabindex]=\"template.tabindex\"\n        [header]=\"template.header\"\n        [style]=\"template.style\">\n        <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n      </p-accordionTab>\n    </ng-container>\n</p-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "collapseIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "expandIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FreudAccordionTabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudAccordionTabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n  selector: 'freud-accordion-tab',\n  template: `\n    <div #ref>\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion-tab',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionTabComponent {\n  @Input() disabled: boolean = false;\n  @Input() tabindex: number = 0;\n  @Input() selected: boolean = false;\n  @Input() header!: string;\n  @Input() style!: string;\n  @Input() bgColor: boolean = false;\n  @ViewChild('ref') ref!: any;\n\n}\n\n@Component({\n  selector: 'freud-accordion',\n  template: `\n    <p-accordion\n      [activeIndex]=\"activeIndex\"\n      [multiple]=\"multiple\"\n      [tabindex]=\"tabindex\"\n      [expandIcon]=\"expandIcon\"\n      [collapseIcon]=\"collapseIcon\"\n      [style]=\"style\"\n      (onOpen)=\"onOpen.emit($event)\"\n      (onClose)=\"onClose.emit($event)\">\n        <ng-container *ngFor=\"let template of templates\">\n          <p-accordionTab\n            [disabled]=\"template.disabled\"\n            [selected]=\"template.selected\"\n            [tabindex]=\"template.tabindex\"\n            [header]=\"template.header\"\n            [style]=\"template.style\">\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n          </p-accordionTab>\n        </ng-container>\n    </p-accordion>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionComponent {\n  @Input() style!: string;\n  @Input() tabindex: number = 0;\n  @Input() multiple: boolean = false;\n  @Input() collapseIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() expandIcon: string = 'freud-icon freud-icon-chevron-right';\n  @Input() activeIndex!: number;\n  @Input() bgColor: boolean = false;\n  @ContentChildren(FreudAccordionTabComponent) templates!: QueryList<FreudAccordionTabComponent>;\n  @Output() onClose: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onOpen: EventEmitter<any> = new EventEmitter<any>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-accordion, .freud-accordion-tab {\n  .p-accordion .p-accordion-header .p-accordion-header-link {\n    background-color: $neutral-color-light-01;\n    border-color: $neutral-color-light-02;\n    border-radius: $border-radius-md;\n  }\n\n  .p-accordion .p-accordion-content,\n  .p-accordion .p-accordion-header:not(.p-disabled).p-highlight .p-accordion-header-link {\n    border-color: $neutral-color-light-02;\n  }\n\n  .p-accordion p-accordiontab:first-child .p-accordion-header .p-accordion-header-link {\n    border-top-right-radius: $border-radius-md;\n    border-top-left-radius: $border-radius-md;\n  }\n\n  .p-accordion p-accordiontab:last-child .p-accordion-header:not(.p-highlight) .p-accordion-header-link {\n    border-bottom-right-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n  }\n\n  .p-accordion .p-accordion-header:not(.p-disabled) .p-accordion-header-link:focus {\n    box-shadow: unset;\n  }\n  .p-accordion-header-text {\n    @include typography($font-size-xs, $font-weight-bold, 16px);\n  }\n\n  .p-accordion p-accordiontab .p-accordion-tab {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-accordion p-accordiontab .p-accordion-content,\n  .p-accordion .p-accordion-header:not(.p-disabled).p-highlight .p-accordion-header-link {\n    border-bottom-right-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n  }\n}\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAccordionTabComponent",
            "id": "component-FreudAccordionTabComponent-dc135b89e0df1eeae7ed51ce526b601e2c056bd2029de96334f2946ff48e69f11679a45afd723a804c496eac51f90f19e7902d11dbf51eb587e1be08b2cfda8f",
            "file": "projects/web-components/src/components/others/accordion/accordion.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-accordion-tab",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "template": "<div #ref>\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ref'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\n\n@Component({\n  selector: 'freud-accordion-tab',\n  template: `\n    <div #ref>\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion-tab',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionTabComponent {\n  @Input() disabled: boolean = false;\n  @Input() tabindex: number = 0;\n  @Input() selected: boolean = false;\n  @Input() header!: string;\n  @Input() style!: string;\n  @Input() bgColor: boolean = false;\n  @ViewChild('ref') ref!: any;\n\n}\n\n@Component({\n  selector: 'freud-accordion',\n  template: `\n    <p-accordion\n      [activeIndex]=\"activeIndex\"\n      [multiple]=\"multiple\"\n      [tabindex]=\"tabindex\"\n      [expandIcon]=\"expandIcon\"\n      [collapseIcon]=\"collapseIcon\"\n      [style]=\"style\"\n      (onOpen)=\"onOpen.emit($event)\"\n      (onClose)=\"onClose.emit($event)\">\n        <ng-container *ngFor=\"let template of templates\">\n          <p-accordionTab\n            [disabled]=\"template.disabled\"\n            [selected]=\"template.selected\"\n            [tabindex]=\"template.tabindex\"\n            [header]=\"template.header\"\n            [style]=\"template.style\">\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n          </p-accordionTab>\n        </ng-container>\n    </p-accordion>\n  `,\n  styleUrls: ['./accordion.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-accordion',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\n\nexport class FreudAccordionComponent {\n  @Input() style!: string;\n  @Input() tabindex: number = 0;\n  @Input() multiple: boolean = false;\n  @Input() collapseIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() expandIcon: string = 'freud-icon freud-icon-chevron-right';\n  @Input() activeIndex!: number;\n  @Input() bgColor: boolean = false;\n  @ContentChildren(FreudAccordionTabComponent) templates!: QueryList<FreudAccordionTabComponent>;\n  @Output() onClose: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onOpen: EventEmitter<any> = new EventEmitter<any>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-accordion, .freud-accordion-tab {\n  .p-accordion .p-accordion-header .p-accordion-header-link {\n    background-color: $neutral-color-light-01;\n    border-color: $neutral-color-light-02;\n    border-radius: $border-radius-md;\n  }\n\n  .p-accordion .p-accordion-content,\n  .p-accordion .p-accordion-header:not(.p-disabled).p-highlight .p-accordion-header-link {\n    border-color: $neutral-color-light-02;\n  }\n\n  .p-accordion p-accordiontab:first-child .p-accordion-header .p-accordion-header-link {\n    border-top-right-radius: $border-radius-md;\n    border-top-left-radius: $border-radius-md;\n  }\n\n  .p-accordion p-accordiontab:last-child .p-accordion-header:not(.p-highlight) .p-accordion-header-link {\n    border-bottom-right-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n  }\n\n  .p-accordion .p-accordion-header:not(.p-disabled) .p-accordion-header-link:focus {\n    box-shadow: unset;\n  }\n  .p-accordion-header-text {\n    @include typography($font-size-xs, $font-weight-bold, 16px);\n  }\n\n  .p-accordion p-accordiontab .p-accordion-tab {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-accordion p-accordiontab .p-accordion-content,\n  .p-accordion .p-accordion-header:not(.p-disabled).p-highlight .p-accordion-header-link {\n    border-bottom-right-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n  }\n}\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudActionIconComponent",
            "id": "component-FreudActionIconComponent-c9b9af0c3e0a2395b94472131389781119e0572fca74b111ecf9b2f0086a02d15d0049becaaad1b2b8631f4fb619abc73d0b430437e36e6ca0fb40d13394d312",
            "file": "projects/web-components/src/components/others/action-icon/action-icon.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-action-icon",
            "styleUrls": [
                "./action-icon.component.scss"
            ],
            "styles": [],
            "template": "<button type=\"button\">\n  <span class=\"freud-icon freud-icon-times\"></span>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-action-icon',\n  template: `\n    <button type=\"button\">\n      <span class=\"freud-icon freud-icon-times\"></span>\n    </button>\n  `,\n  styleUrls: ['./action-icon.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-action-icon',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudActionIconComponent {\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-action-icon.freud-bgcolor {\n  button {\n    color: $neutral-color-white;\n  }\n  button:enabled:hover {\n    background: $brand-color-03;\n  }\n}\n\n.freud-action-icon {\n  button {\n    cursor: pointer;\n    width: 28px;\n    height: 28px;\n    border: 0 none;\n    background: transparent;\n    border-radius: 50%;\n    transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;\n    display: grid;\n    align-items: center;\n    .freud-icon {\n      font-size: 14px;\n    }\n  }\n}\n\n.freud-action-icon:not(.freud-bgcolor) {\n  button {\n    color: $neutral-color-dark-02;\n  }\n  button:enabled:hover {\n    background: $neutral-color-light-02;\n  }\n}\n",
                    "styleUrl": "./action-icon.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAlertMessageComponent",
            "id": "component-FreudAlertMessageComponent-cab5caabdfd137a1385e22aa60a2f4c9e9cbc7bec1e1e8db716fd3b4a1c1d522f1d3b30f0bcf8a7139bfc664bacd83bb1ce66a714bdda00f550f0ea6da13a33f",
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-alert-message",
            "styleUrls": [
                "./alert-messages.component.scss"
            ],
            "styles": [],
            "template": "<p-message [severity]=\"severity\" [text]=\"text\"></p-message>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "severity",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "severities",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { Component, Input } from '@angular/core';\nimport { FreudMessage } from \"../../../api\";\n\ntype severities = 'success' | 'info' | 'warn' | 'error';\n\n@Component({\n  selector: 'freud-alert-messages',\n  template: `\n    <p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessagesComponent {\n  @Input() messages!: FreudMessage[];\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n  @Input() closable: boolean = true;\n\n}\n\n@Component({\n  selector: 'freud-alert-message',\n  template: `\n    <p-message [severity]=\"severity\" [text]=\"text\"></p-message>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessageComponent {\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n\n.freud-alert-messages {\n  .p-message, .p-inline-message {\n    border: unset;\n    border-radius: $border-radius-md;\n    color: $neutral-color-dark-04;\n\n    &.p-message-success, &.p-inline-message-success {\n      background-color: $feedback-color-positive-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-positive-pure;\n      }\n    }\n\n    &.p-message-info, &.p-inline-message-info {\n      background-color: $feedback-color-neutral-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-neutral-pure;\n      }\n    }\n\n    &.p-message-warn, &.p-inline-message-warn {\n      background-color: $feedback-color-warning-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-alert-pure;\n      }\n    }\n\n    &.p-message-error, &.p-inline-message-error {\n      background-color: $feedback-color-negative-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-negative-pure;\n      }\n    }\n\n    .freud-icon {\n      font-size: 31px;\n      margin-left: -5px;\n      margin-right: 4px;\n    }\n  }\n\n  .p-inline-message {\n    padding: 11px;\n  }\n\n  .p-message .p-message-summary {\n    @include typography($font-size-xs, $font-weight-bold, auto);\n  }\n\n  .p-message-detail {\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n\n  .pi-info-circle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e9ed\";\n  }\n\n  .pi-exclamation-triangle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e903\";\n  }\n\n  .pi-times-circle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e9b9\";\n  }\n  .pi-check:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e973\";\n  }\n\n\n}\n",
                    "styleUrl": "./alert-messages.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAlertMessagesComponent",
            "id": "component-FreudAlertMessagesComponent-cab5caabdfd137a1385e22aa60a2f4c9e9cbc7bec1e1e8db716fd3b4a1c1d522f1d3b30f0bcf8a7139bfc664bacd83bb1ce66a714bdda00f550f0ea6da13a33f",
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-alert-messages",
            "styleUrls": [
                "./alert-messages.component.scss"
            ],
            "styles": [],
            "template": "<p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FreudMessage[]",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "severities",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\nimport { Component, Input } from '@angular/core';\nimport { FreudMessage } from \"../../../api\";\n\ntype severities = 'success' | 'info' | 'warn' | 'error';\n\n@Component({\n  selector: 'freud-alert-messages',\n  template: `\n    <p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessagesComponent {\n  @Input() messages!: FreudMessage[];\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n  @Input() closable: boolean = true;\n\n}\n\n@Component({\n  selector: 'freud-alert-message',\n  template: `\n    <p-message [severity]=\"severity\" [text]=\"text\"></p-message>\n  `,\n  styleUrls: ['./alert-messages.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-alert-messages'\n  }\n})\nexport class FreudAlertMessageComponent {\n\n  @Input() severity: severities = 'success';\n  @Input() text!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n\n.freud-alert-messages {\n  .p-message, .p-inline-message {\n    border: unset;\n    border-radius: $border-radius-md;\n    color: $neutral-color-dark-04;\n\n    &.p-message-success, &.p-inline-message-success {\n      background-color: $feedback-color-positive-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-positive-pure;\n      }\n    }\n\n    &.p-message-info, &.p-inline-message-info {\n      background-color: $feedback-color-neutral-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-neutral-pure;\n      }\n    }\n\n    &.p-message-warn, &.p-inline-message-warn {\n      background-color: $feedback-color-warning-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-alert-pure;\n      }\n    }\n\n    &.p-message-error, &.p-inline-message-error {\n      background-color: $feedback-color-negative-01;\n      .p-message-icon, .p-inline-message-icon {\n        color: $feedback-color-negative-pure;\n      }\n    }\n\n    .freud-icon {\n      font-size: 31px;\n      margin-left: -5px;\n      margin-right: 4px;\n    }\n  }\n\n  .p-inline-message {\n    padding: 11px;\n  }\n\n  .p-message .p-message-summary {\n    @include typography($font-size-xs, $font-weight-bold, auto);\n  }\n\n  .p-message-detail {\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n\n  .pi-info-circle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e9ed\";\n  }\n\n  .pi-exclamation-triangle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e903\";\n  }\n\n  .pi-times-circle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e9b9\";\n  }\n  .pi-check:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e973\";\n  }\n\n\n}\n",
                    "styleUrl": "./alert-messages.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAutoCompleteComponent",
            "id": "component-FreudAutoCompleteComponent-4a4ddba109d792fb5bb345d97a8714a2969da61fe60ed095e92d9d43ca5a4c9f4e4ad32d8f1a2fe8226e4612fbaae835e0de6b9eab3fc51a3b50acc6d5e5f81b",
            "file": "projects/web-components/src/components/forms/auto-complete/auto-complete.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudAutoCompleteComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-auto-complete",
            "styleUrls": [
                "./auto-complete.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-autoComplete\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [dropdown]=\"dropdown\"\n    [dropdownMode]=\"dropdownMode\"\n    [field]=\"field\"\n    [multiple]=\"multiple\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [suggestions]=\"suggestions\"\n    [forceSelection]=\"forceSelection\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (completeMethod)=\"completeMethod.emit($event)\"\n    (onDropdownClick)=\"onDropdownClick.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n    (onHide)=\"onHide.emit($event)\"\n    (onClear)=\"onClear.emit($event)\"\n\n  ></p-autoComplete>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dropdownMode",
                    "defaultValue": "'blank'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "\"blank\" | \"current\"",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "forceSelection",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "suggestions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "completeMethod",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onDropdownClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 120
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-auto-complete',\n  styleUrls: ['./auto-complete.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-autoComplete\n        [id]=\"id\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [optionGroupLabel]=\"optionGroupLabel\"\n        [optionGroupChildren]=\"optionGroupChildren\"\n        [placeholder]=\"placeholder || ''\"\n        [virtualScroll]=\"virtualScroll\"\n        [dropdownIcon]=\"dropdownIcon\"\n        [dropdown]=\"dropdown\"\n        [dropdownMode]=\"dropdownMode\"\n        [field]=\"field\"\n        [multiple]=\"multiple\"\n        [emptyMessage]=\"emptyMessage\"\n        [itemSize]=\"itemSize\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        [suggestions]=\"suggestions\"\n        [forceSelection]=\"forceSelection\"\n        (onFocus)=\"onFocus.emit($event)\"\n        (onBlur)=\"onBlur.emit($event)\"\n        (completeMethod)=\"completeMethod.emit($event)\"\n        (onDropdownClick)=\"onDropdownClick.emit($event)\"\n        (onShow)=\"onShow.emit($event)\"\n        (onHide)=\"onHide.emit($event)\"\n        (onClear)=\"onClear.emit($event)\"\n\n      ></p-autoComplete>\n      <small\n        [class.disabled]=\"disabled\"\n        *ngIf=\"helpText\"\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n    </div>\n  `,\n  host: {\n    class: 'freud-auto-complete',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudAutoCompleteComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudAutoCompleteComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() suggestions!: any[];\n  @Input() helpText: string = '';\n  @Input() placeholder: string = '';\n  @Input() invalid: boolean = false;\n  @Input() multiple: boolean = false;\n  @Input() dropdown: boolean = false;\n  @Input() forceSelection: boolean = false;\n  @Input() virtualScroll: boolean = false;\n  @Input() itemSize!: number;\n  @Input() field!: string;\n  @Input() emptyMessage: string = 'Sem resultados';\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() optionGroupLabel: string = 'label';\n  @Input() optionGroupChildren: string = 'items';\n  @Input() dropdownMode: 'blank' | 'current' = 'blank';\n  @Input() characterPattern: string = '';\n  @Input() autoClear: boolean = true;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n  @Output() completeMethod: EventEmitter<any> = new EventEmitter();\n  @Output() onDropdownClick: EventEmitter<any> = new EventEmitter();\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\n  @Output() onHide: EventEmitter<any> = new EventEmitter();\n  @Output() onClear: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n\n  private _value!: any;\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onModelChange: any = () => { };\n\n  onModelTouched: any = () => { };\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.valueChange.emit(this._value);\n    this.onModelTouched();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-auto-complete:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-auto-complete.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-auto-complete {\n  .help-text {\n    margin-top: $spacing-size-quark;\n  }\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-inputtext {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-inputtext {\n    height: 40px;\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-button {\n    background: $neutral-color-white;\n    border: 1px solid $neutral-color-light-03;;\n    border-radius: $border-radius-md;\n    border-left: unset;\n  }\n\n  .p-button:hover {\n    background: $neutral-color-white;\n  }\n\n  .p-button:focus {\n    box-shadow: $shadow-focused-zen;\n  }\n\n  .p-autocomplete-panel {\n    box-shadow: $shadow-level-3;\n  }\n\n  .p-autocomplete-dd .p-inputtext {\n    border-right: unset;\n  }\n\n  .p-button-icon {\n    font-size: 24px;\n    color: $neutral-color-dark-02;\n  }\n\n  .p-button.p-button-icon-only {\n    padding: 0;\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n\n  .p-autocomplete {\n    border-radius: $border-radius-md;\n    border: 1px solid transparent;\n    width: 100%;\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-autocomplete:not(.p-disabled).p-focus,\n  .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled).p-focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-autocomplete:not(.p-disabled):hover,\n  .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled):hover {\n    border-color: $brand-color-pure;\n    .p-inputtext, .p-button {\n      border-color: $brand-color-pure;\n    }\n  }\n  .p-autocomplete .p-autocomplete-panel {\n    border-radius: $border-radius-md;\n    margin-top: 1px;\n  }\n\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item {\n    padding: 12px 1rem;\n    color: $neutral-color-dark-03;\n    transition: box-shadow 0.2s;\n    border-radius: 0;\n  }\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item:not(.p-highlight):not(.p-disabled):hover {\n    color: $brand-color-pure;\n    background-color: $brand-color-01;\n  }\n\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item.p-highlight {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  // Chip\n  .p-autocomplete .p-autocomplete-multiple-container .p-autocomplete-token {\n    padding: 0.25rem 0.5rem;\n    margin-right: 0.5rem;\n    @include typography($font-size-xxs, $font-weight-regular, 21px);\n    background: $brand-color-01;\n    color: $brand-color-pure;\n    border-radius: $border-radius-md;\n  }\n}\n\n.freud-auto-complete .p-element:not(.p-inputwrapper-focus) .p-autocomplete:not(.p-disabled):hover .p-inputtext,\n.freud-auto-complete .p-element:not(.p-inputwrapper-focus) .p-autocomplete:not(.p-disabled):hover .p-button,\n.freud-auto-complete .p-element:not(.p-inputwrapper-focus) .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled):hover .p-inputtext,\n.freud-auto-complete .p-element:not(.p-inputwrapper-focus) .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled):hover .p-button {\n  border: unset;\n}\n\n",
                    "styleUrl": "./auto-complete.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 130,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                }
            }
        },
        {
            "name": "FreudAutoCompleteExampleComponent",
            "id": "component-FreudAutoCompleteExampleComponent-7399d54787ded84859df593b061fea1ac0a1367c44442dfbf69686749158d8990022624817fb2d14a00ecdcb5ca8a0c537e888db20ae9be4464e92e259ea1935",
            "file": "stories/forms/auto-complete/auto-complete-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-auto-complete-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-auto-complete\n  [(ngModel)]=\"selectedItem\"\n  [suggestions]=\"items\"\n  [label]=\"'Label'\"\n  [disabled]=\"disabled\"\n  [invalid]=\"invalid\"\n  [bgColor]=\"bgColor\"\n  [multiple]=\"multiple\"\n  [dropdown]=\"dropdown\"\n  [placeholder]=\"'Placeholder'\"\n  (completeMethod)=\"filterItems($event)\">\n</freud-auto-complete>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allItems",
                    "defaultValue": "[\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "items",
                    "defaultValue": "[\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "filterItems",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-auto-complete-example',\n  template: `\n    <freud-auto-complete\n      [(ngModel)]=\"selectedItem\"\n      [suggestions]=\"items\"\n      [label]=\"'Label'\"\n      [disabled]=\"disabled\"\n      [invalid]=\"invalid\"\n      [bgColor]=\"bgColor\"\n      [multiple]=\"multiple\"\n      [dropdown]=\"dropdown\"\n      [placeholder]=\"'Placeholder'\"\n      (completeMethod)=\"filterItems($event)\">\n    </freud-auto-complete>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudAutoCompleteExampleComponent {\n\n  allItems = [\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ];\n  items = [\n    'Adamantina',\n    'Abc',\n    'New York',\n    'Rome',\n    'London',\n    'Islanbul',\n    'São Paulo',\n    'Rio de Janeiro'\n  ]\n  selectedItem: string = '';\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() dropdown = false;\n  @Input() multiple = false;\n\n  @Input() invalid: boolean = false;\n  constructor() {}\n\n  filterItems(event: any) {\n    //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\n    let filtered : any[] = [];\n    let query = event.query;\n    for(let i = 0; i < this.allItems.length; i++) {\n      let item = this.allItems[i];\n      if (item.toLowerCase().indexOf(query.toLowerCase()) == 0) {\n        filtered.push(item);\n      }\n    }\n\n    this.items = filtered;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 49
            }
        },
        {
            "name": "FreudAvatarComponent",
            "id": "component-FreudAvatarComponent-368a66939c964baa1c416d8f355c9c1bcb6aed0e2fd3794cd5a0269ff4e8737b056d95a84028f70b4244f67a355da4528cf60cbfe624d1cf9ee9ceefb3dc551e",
            "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "template": "<p-avatar\n  [label]=\"(image || withIcon) ? '' : label\"\n  [icon]=\"(withIcon || !label) ? 'freud-icon freud-icon-user' : ''\"\n  shape=\"circle\"\n  [image]=\"image\">\n  <freud-badge *ngIf=\"badge\" [value]=\"badge\" color=\"error\"></freud-badge>\n</p-avatar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badge",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "avatarSizes",
                    "decorators": []
                },
                {
                    "name": "withIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\ntype avatarSizes = 'sm' | 'md' | 'lg';\n@Component({\n  selector: 'freud-avatar',\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-avatar\n      [label]=\"(image || withIcon) ? '' : label\"\n      [icon]=\"(withIcon || !label) ? 'freud-icon freud-icon-user' : ''\"\n      shape=\"circle\"\n      [image]=\"image\">\n      <freud-badge *ngIf=\"badge\" [value]=\"badge\" color=\"error\"></freud-badge>\n    </p-avatar>\n  `,\n  styleUrls: ['./avatar.component.scss'],\n  host: {\n    class: 'freud-avatar',\n    '[class.freud-avatar-bgcolor]': `bgColor`,\n\n    '[class.freud-avatar-size-small]': `size === 'sm'`,\n    '[class.freud-avatar-size-medium]': `size === 'md'`,\n    '[class.freud-avatar-size-large]': `size === 'lg'`,\n  }\n})\nexport class FreudAvatarComponent {\n\n  @Input() size: avatarSizes = 'md';\n  @Input() label: string = '';\n  @Input() withIcon: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() badge: string = '';\n  @Input() image: string = '';\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-avatar .p-avatar {\n    font-family: $font-family-base;\n}\n.freud-avatar {\n    position: relative;\n    display: block;\n}\n\n.freud-avatar.freud-avatar-size-small, .freud-avatar-size-small .p-avatar {\n    width: 28px;\n    height: 28px;\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\n}\n\n.freud-avatar.freud-avatar-size-medium, .freud-avatar-size-medium .p-avatar {\n    width: 42px;\n    height: 42px;\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\n}\n\n.freud-avatar.freud-avatar-size-large, .freud-avatar-size-large .p-avatar {\n    width: 56px;\n    height: 56px;\n    @include typography($font-size-md, $font-weight-semibold, 30px);\n}\n\n.freud-avatar.freud-avatar-size-medium {\n  .freud-icon {\n    font-size: 24px;\n  }\n}\n\n.freud-avatar.freud-avatar-size-large {\n  .freud-icon {\n    font-size: 30px;\n  }\n}\n\n\n.freud-avatar:not(.freud-avatar-bgcolor) .p-avatar {\n    background-color: $neutral-color-light-02;\n    color: $neutral-color-dark-03;\n}\n\n.freud-avatar.freud-avatar-bgcolor .p-avatar {\n    background-color: $brand-color-03;\n    color: $neutral-color-white;\n}\nfreud-badge {\n    position: absolute;\n    top: -12px;\n    right: -4px;\n}\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBadgeComponent",
            "id": "component-FreudBadgeComponent-3e56b19eb0afcc37a14dad00b1aa4b7be8192d04c9431ef1288126f4dad1e1bcf1ad5f6ade3003c18072d0383e7091ff5727b5be82205a7e0e0eaca755c386e5",
            "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "template": "<p-badge [value]=\"value!\" class=\"freud-color-{{color}}\"></p-badge>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "colors",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "sizes",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n\ntype sizes = 'default' | 'large';\ntype colors = 'primary' | 'success' | 'info' | 'warning' | 'error' | 'actived';\n\n@Component({\n  selector: 'freud-badge',\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-badge [value]=\"value!\" class=\"freud-color-{{color}}\"></p-badge>\n  `,\n  styleUrls: ['./badge.component.scss'],\n  host: {\n    class: 'freud-badge',\n    '[class.size-large]':  'size === \"large\"'\n  }\n})\nexport class FreudBadgeComponent {\n\n  @Input() value: string = '';\n  @Input() size: sizes = 'default';\n  @Input() color: colors = 'primary';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-badge span.p-badge {\n    background-color: $brand-color-pure;\n    font-weight: $font-weight-bold;\n    font-family: $font-family-base;\n    display: inline-block;\n}\n\n.freud-badge {\n  .freud-color-success span {\n    background-color: $feedback-color-positive-04;\n  }\n  .freud-color-info span {\n    background-color: $feedback-color-neutral-pure;\n  }\n  .freud-color-warning span {\n    background-color: $feedback-color-warning-pure;\n    color: $neutral-color-black;\n  }\n  .freud-color-error span {\n    background-color: $feedback-color-negative-04;\n  }\n  .freud-color-actived span {\n    background-color: $complementary-color-like-03;\n  }\n}\n\n.freud-badge:not(.size-large) span.p-badge {\n  border-radius: $border-radius-md;\n  min-width: 16px;\n  height: 16px;\n  line-height: $font-size-xs;\n  @include typography($font-size-xxxs, $font-weight-semibold, auto);\n}\n.freud-badge.size-large span.p-badge {\n  border-radius: 12px;\n  @include typography($font-size-xs, $font-weight-semibold, auto);\n  display: inline-block;\n}\n",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBlockExampleComponent",
            "id": "component-FreudBlockExampleComponent-2e52ea16ab9a4e4774f4d5536002b78d49927e9be05192bd831a07d01648e1c8ecd819e7541e7b1048d08b56bc2bc32cf1be5b2175649a11ba73d8518ca27ca0",
            "file": "stories/others/block-ui/block-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-block-ui-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-button (click)=\"onClick()\">Clique aqui!</freud-button>\n\n<ng-container *ngIf=\"!withTarget\">\n  <freud-block-ui [blocked]=\"blocked\">\n  </freud-block-ui>\n</ng-container>\n\n<ng-container *ngIf=\"withTarget\">\n  <br>\n  <freud-card [header]=\"'Card Title'\" #cardElement>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n    ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n    laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n    voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </freud-card>\n  <freud-block-ui [blocked]=\"blocked\" [target]=\"cardElement\">\n  </freud-block-ui>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "withTarget",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-block-ui-example',\n  template: `\n    <freud-button (click)=\"onClick()\">Clique aqui!</freud-button>\n\n    <ng-container *ngIf=\"!withTarget\">\n      <freud-block-ui [blocked]=\"blocked\">\n      </freud-block-ui>\n    </ng-container>\n\n    <ng-container *ngIf=\"withTarget\">\n      <br>\n      <freud-card [header]=\"'Card Title'\" #cardElement>\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n        ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n        laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n        voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n        non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n      </freud-card>\n      <freud-block-ui [blocked]=\"blocked\" [target]=\"cardElement\">\n      </freud-block-ui>\n    </ng-container>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudBlockExampleComponent {\n\n  public blocked: boolean = false;\n  @Input() withTarget: boolean = false;\n  onClick() {\n    this.blocked = true;\n    setTimeout(() => this.blocked = false, 5000);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBlockUIComponent",
            "id": "component-FreudBlockUIComponent-343db88218d97c2ee948a8940a4ee39ea4ce5de1b3c5979764c092c7e7c0c7c9c80e5f1db5295d97179f046e58c30681a6482b23b9a1f46e07e4949aeea19e25",
            "file": "projects/web-components/src/components/others/block-ui/block-ui.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-block-ui",
            "styleUrls": [
                "./block-ui.component.scss"
            ],
            "styles": [],
            "template": "<p-blockUI\n  [blocked]=\"blocked\"\n  [target]=\"target\">\n  <i class=\"freud-icon freud-icon-lock\" style=\"font-size: 24px\"></i>\n</p-blockUI>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "blocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-block-ui',\n  template: `\n    <p-blockUI\n      [blocked]=\"blocked\"\n      [target]=\"target\">\n      <i class=\"freud-icon freud-icon-lock\" style=\"font-size: 24px\"></i>\n    </p-blockUI>\n  `,\n  styleUrls: ['./block-ui.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-block-ui',\n  }\n})\nexport class FreudBlockUIComponent {\n\n  @Input() blocked: boolean = false;\n  @Input() target!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n//.p-component-overlay.p-blockui {\n//  background-color: $neutral-color-dark-03;\n//}\n//\n//.p-component-overlay-enter {\n//  //animation: unset;\n//}\n",
                    "styleUrl": "./block-ui.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBreadcrumbComponent",
            "id": "component-FreudBreadcrumbComponent-f1c27f4ad616d304c81146272068d81ea897eb5859c18340a988b2502855ef9d52bcc286bd5ecba403bfd0cbc860a9a19a1e6aa7cc1e8c09dfa096533d8fb9bc",
            "file": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "template": "<p-breadcrumb\n  [model]=\"items\"\n  [home]=\"home\"\n  styleClass=\"freud-typography h6RegularAuto\"\n  (onItemClick)=\"onItemClick.emit($event)\"></p-breadcrumb>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "home",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FreudMenuItem",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\n@Component({\n  selector: 'freud-breadcrumb',\n  template: `\n    <p-breadcrumb\n      [model]=\"items\"\n      [home]=\"home\"\n      styleClass=\"freud-typography h6RegularAuto\"\n      (onItemClick)=\"onItemClick.emit($event)\"></p-breadcrumb>\n  `,\n  styleUrls: ['./breadcrumb.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-breadcrumb',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudBreadcrumbComponent {\n  @Input() items!: FreudMenuItem[];\n  @Input() home!: FreudMenuItem;\n  @Input() bgColor: boolean = false;\n  @Output() onItemClick: EventEmitter<any> = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-breadcrumb:not(.freud-bgcolor) {\n  .p-breadcrumb ul li.p-breadcrumb-chevron {\n    font-size: $font-size-xxxs;\n    color: $neutral-color-dark-03;\n  }\n\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon, .p-breadcrumb ul li .p-menuitem-link .p-menuitem-text {\n    color: $neutral-color-dark-03;\n  }\n\n}\n.freud-breadcrumb.freud-bgcolor {\n  .p-breadcrumb ul li.p-breadcrumb-chevron {\n    font-size: $font-size-xxxs;\n    color: $neutral-color-white;\n  }\n\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon, .p-breadcrumb ul li .p-menuitem-link .p-menuitem-text {\n    color: $neutral-color-white;\n  }\n}\n\n.p-breadcrumb {\n  background: transparent;\n  border: none;\n}\n\n.p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon {\n  font-size: $font-size-sm;\n  line-height: $font-size-md;\n}\n\n.p-breadcrumb ul li .p-menuitem-link:focus {\n  box-shadow: unset;\n}\n",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudButtonComponent",
            "id": "component-FreudButtonComponent-1b9c426d516d690f6c00186a9fa7cd10dc6847bfeca5b6d91fda2fafe6fac0048b1d23e1b8f595a538b9d3c7ea95d2a33f620d92cc10c24d05f5802ac61ce2fe",
            "file": "projects/web-components/src/components/buttons/button/button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<p-button [disabled]=\"disabled\" [loading]=\"loading\" [icon]=\"icon\" [type]=\"type\">\n  <div class=\"button-content\"><ng-content></ng-content></div>\n</p-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "buttonColors",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "buttonSizes",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\ntype buttonSizes = 'sm' | 'md' | 'lg';\ntype buttonColors = 'primary' | 'secondary' | 'ghost';\n\n@Component({\n  selector: 'freud-button',\n  styleUrls: ['./button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-button [disabled]=\"disabled\" [loading]=\"loading\" [icon]=\"icon\" [type]=\"type\">\n      <div class=\"button-content\"><ng-content></ng-content></div>\n    </p-button>\n  `,\n  host: {\n    class: 'freud-btn',\n    '[class.freud-btn-color-primary]': `!['secondary', 'ghost'].includes(color)`,\n    '[class.freud-btn-color-secondary]': `color === 'secondary'`,\n    '[class.freud-btn-color-ghost]': `color === 'ghost'`,\n\n    '[class.freud-btn-bgcolor]': `bgColor`,\n    '[class.freud-btn-loading]': `loading`,\n\n    '[class.freud-btn-size-small]': `size === 'sm'`,\n    '[class.freud-btn-size-medium]': `size === 'md'`,\n    '[class.freud-btn-size-large]': `size === 'lg'`,\n  }\n})\nexport class FreudButtonComponent {\n\n  @Input() size: buttonSizes = 'md';\n  @Input() color: buttonColors = 'primary';\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() type!: string;\n  @Input() loading = false;\n  @Input() icon!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-btn:not(.freud-btn-bgcolor) {\n  &.freud-btn-color-primary {\n    .p-button {\n      background-color:  $brand-color-pure;\n      border-color: $brand-color-pure;\n      color: $neutral-color-white;\n    }\n  }\n\n  &.freud-btn-color-secondary {\n    $freud-btn-color: $brand-color-pure;\n    $freud-btn-border: $brand-color-pure;\n    .p-button {\n      background-color: transparent;\n      border-color: $freud-btn-border;\n      color: $freud-btn-color;\n    }\n  }\n\n  &.freud-btn-color-ghost {\n    $freud-btn-background: transparent;\n    $freud-btn-color: $brand-color-pure;\n    $freud-btn-border: transparent;\n    .p-button {\n      background-color: $freud-btn-background;\n      border-color: $freud-btn-border;\n      color: $freud-btn-color;\n    }\n  }\n\n  .p-button:enabled:hover {\n    background: $brand-color-01;\n    border-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n}\n\n.freud-btn.freud-btn-bgcolor {\n  &.freud-btn-color-primary {\n    .p-button {\n      background-color: $neutral-color-white;\n      border-color: $neutral-color-white;\n      color: $brand-color-pure;\n    }\n  }\n\n  &.freud-btn-color-secondary {\n    .p-button {\n      background-color: transparent;\n      border-color: $neutral-color-white;\n      color: $neutral-color-white;\n    }\n  }\n\n  &.freud-btn-color-ghost {\n    .p-button {\n      background-color: transparent;\n      border-color: transparent;\n      color: $neutral-color-white;\n    }\n  }\n\n  .p-button[disabled] {\n    opacity: $opacity-level-5;\n    color: $brand-color-pure;\n  }\n\n  .p-button:enabled:hover {\n    background: $brand-color-03;\n    border-color: $brand-color-03;\n    color: $neutral-color-white;\n  }\n}\n\n\n.freud-btn .p-button {\n  font-family: $font-family-base;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  border-radius: $border-radius-md;\n  @include typography($font-size-xs, $font-weight-semibold, auto);\n  &[disabled] {\n    opacity: $opacity-level-5;\n  }\n  &:focus {\n    box-shadow: unset;\n  }\n  &.p-button-icon-only {\n    width: auto;\n  }\n}\n\n\n.freud-btn-size-small {\n  .p-button {\n    font-size: $font-size-xxs;\n    padding: 0 $spacing-size-nano;\n    height: 32px;\n    &.p-button-icon-only {\n      padding: 0 3px;\n    }\n  }\n}\n\n.freud-btn-size-medium {\n  .p-button {\n    padding: 0 $spacing-size-xxxs;\n    height: 40px;\n    &.p-button-icon-only {\n      padding: 0 7px;\n    }\n  }\n}\n\n.freud-btn-size-large {\n  .p-button {\n    padding: 0 $spacing-size-xxs;\n    height: 48px;\n    &.p-button-icon-only {\n      padding: 0 11px;\n    }\n  }\n}\n\n.button-content:not(:empty) + .p-button-icon {\n  margin-left: $spacing-size-xxxs;\n}\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudCalendarComponent",
            "id": "component-FreudCalendarComponent-21c03d3b9c2b941c20fb49ce6af33960cd55b8b2de31a8213045c906512bc44b37f1d5554d657c1a28229e9df5c386d57a0684226ae2fb71a289f21c8cd58cf8",
            "file": "projects/web-components/src/components/others/calendar/calendar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "template": "<p-calendar\n  [(ngModel)]=\"value\"\n  [inline]=\"inline\"\n  [view]=\"view\"\n  [selectionMode]=\"selectionMode\"\n  [dateFormat]=\"dateFormat\"\n  [showOtherMonths]=\"showOtherMonths\"\n  [selectOtherMonths]=\"selectOtherMonths\"\n  [showWeek]=\"showWeek\"\n  [yearNavigator]=\"yearNavigator\"\n  [yearRange]=\"yearRange\"\n  [defaultDate]=\"defaultDate\"\n  [showTime]=\"showTime\"\n  [hourFormat]=\"hourFormat\"\n  [disabled]=\"disabled\"\n  [timeOnly]=\"timeOnly\"\n  [required]=\"required\"\n  [maxDate]=\"maxDate\"\n  [monthNavigator]=\"monthNavigator\"\n  [disabledDates]=\"disabledDates\"\n  [minDate]=\"minDate\"\n  (ngModelChange)=\"modelValueChange()\"\n  (onSelect)=\"onSelect.emit($event)\"\n  (onBlur)=\"onBlur.emit($event)\"\n  (onFocus)=\"onFocus.emit($event)\"\n  (onClose)=\"onClose.emit($event)\"\n  (onShow)=\"onShow.emit($event)\"\n  (onTodayClick)=\"onTodayClick.emit($event)\"\n  (onClearClick)=\"onClearClick.emit($event)\"\n>\n</p-calendar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dateFormat",
                    "defaultValue": "'dd/mm/yy'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "Date[]",
                    "decorators": []
                },
                {
                    "name": "disabledDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "hourFormat",
                    "defaultValue": "'24'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "\"12\" | \"24\"",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "monthNavigator",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"single\" | \"multiple\" | \"range\"",
                    "decorators": []
                },
                {
                    "name": "selectOtherMonths",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showOtherMonths",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTime",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showWeek",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "timeOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "view",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"date\" | \"month\"",
                    "decorators": []
                },
                {
                    "name": "yearNavigator",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "yearRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClearClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onTodayClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-calendar',\n  template: `\n    <p-calendar\n      [(ngModel)]=\"value\"\n      [inline]=\"inline\"\n      [view]=\"view\"\n      [selectionMode]=\"selectionMode\"\n      [dateFormat]=\"dateFormat\"\n      [showOtherMonths]=\"showOtherMonths\"\n      [selectOtherMonths]=\"selectOtherMonths\"\n      [showWeek]=\"showWeek\"\n      [yearNavigator]=\"yearNavigator\"\n      [yearRange]=\"yearRange\"\n      [defaultDate]=\"defaultDate\"\n      [showTime]=\"showTime\"\n      [hourFormat]=\"hourFormat\"\n      [disabled]=\"disabled\"\n      [timeOnly]=\"timeOnly\"\n      [required]=\"required\"\n      [maxDate]=\"maxDate\"\n      [monthNavigator]=\"monthNavigator\"\n      [disabledDates]=\"disabledDates\"\n      [minDate]=\"minDate\"\n      (ngModelChange)=\"modelValueChange()\"\n      (onSelect)=\"onSelect.emit($event)\"\n      (onBlur)=\"onBlur.emit($event)\"\n      (onFocus)=\"onFocus.emit($event)\"\n      (onClose)=\"onClose.emit($event)\"\n      (onShow)=\"onShow.emit($event)\"\n      (onTodayClick)=\"onTodayClick.emit($event)\"\n      (onClearClick)=\"onClearClick.emit($event)\"\n    >\n    </p-calendar>\n  `,\n  styleUrls: ['./calendar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-calendar',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudCalendarComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudCalendarComponent implements ControlValueAccessor {\n  @Input() dateFormat: string = 'dd/mm/yy';\n  @Input() showTime: boolean = true\n  @Input() hourFormat: '12' | '24' = '24';\n  @Input() selectionMode: \"single\" | \"multiple\" | \"range\" = 'single';\n  @Input() view: 'date' | 'month' = 'date';\n  @Input() inline: boolean = true;\n  @Input() yearRange!: string;\n  @Input() disabledDates!: Date[];\n  @Input() disabledDays!: number[];\n\n  @Input() yearNavigator: boolean = false;\n  @Input() monthNavigator: boolean = false;\n  @Input() timeOnly: boolean = false;\n  @Input() showOtherMonths: boolean = true;\n  @Input() selectOtherMonths: boolean = true;\n  @Input() showWeek: boolean = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n\n  @Input() minDate!: Date;\n  @Input() maxDate!: Date;\n  @Input() defaultDate!: Date;\n\n  @Output() onSelect: EventEmitter<any> = new EventEmitter();\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\n  @Output() onTodayClick: EventEmitter<any> = new EventEmitter();\n  @Output() onClearClick: EventEmitter<any> = new EventEmitter();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.modelValueChange();\n    this.onModelTouched();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-calendar {\n  .p-datepicker {\n    border: unset;\n    border-radius: $border-radius-md;\n    box-shadow: $shadow-level-3;\n  }\n\n  .p-datepicker .p-datepicker-header .p-datepicker-prev,\n  .p-datepicker .p-datepicker-header .p-datepicker-next {\n    width: 28px;\n    height: 28px;\n    border: 0 none;\n    background: transparent;\n    border-radius: 50%;\n    transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;\n    display: grid;\n    align-items: center;\n  }\n\n  .p-datepicker .p-datepicker-header .p-datepicker-prev:focus,\n  .p-datepicker .p-datepicker-header .p-datepicker-next:focus {\n    box-shadow: unset;\n  }\n\n  button.p-datepicker-next {\n    color: $neutral-color-dark-02;\n  }\n  button.p-datepicker-next:enabled:hover {\n    background: $neutral-color-light-02;\n  }\n\n  .p-datepicker .p-datepicker-header {\n    color: $neutral-color-dark-02;\n    @include typography($font-size-xs, $font-weight-bold, auto);\n  }\n\n  .p-datepicker:not(.p-disabled) table td span:not(.p-highlight):not(.p-disabled):hover {\n    color: $neutral-color-dark-02;\n    background-color: $neutral-color-light-03;\n  }\n\n  table {\n    td > span:focus {\n      box-shadow: unset;\n    }\n\n    thead {\n      color: $neutral-color-dark-04;\n      @include typography($font-size-xs, $font-weight-semibold, 24px);\n    }\n    tbody {\n      td:not(.p-datepicker-other-month) {\n        color: $neutral-color-dark-02;\n        @include typography($font-size-xs, $font-weight-regular, 24px);\n      }\n      td.p-datepicker-other-month {\n        color: $neutral-color-dark-01;\n        @include typography($font-size-xs, $font-weight-regular, 24px);\n      }\n    }\n    td.p-datepicker-today > span {\n      color: $neutral-color-dark-02;\n      background-color: $neutral-color-light-04;\n    }\n    td.p-datepicker-today > span.p-highlight,\n    td > span.p-highlight {\n      color: $neutral-color-white;\n      background-color: $brand-color-pure;\n    }\n  }\n  .p-datepicker .p-timepicker span {\n    @include typography($font-size-xs, $font-weight-regular, 19.2px);\n    color: $neutral-color-dark-02;\n  }\n\n  .p-datepicker:not(.p-disabled) .p-monthpicker .p-monthpicker-month:not(.p-highlight):not(.p-disabled):hover {\n    color: $neutral-color-white;\n    background-color: $brand-color-03;\n    border-radius: $border-radius-md;\n  }\n\n  .p-datepicker:not(.p-disabled) .p-monthpicker .p-monthpicker-month:not(.p-highlight):not(.p-disabled):focus {\n    box-shadow: unset;\n  }\n\n  .p-datepicker .p-monthpicker .p-monthpicker-month {\n    color: $neutral-color-dark-02;\n    @include typography($font-size-xs, $font-weight-bold, auto);\n  }\n\n  .p-datepicker .p-monthpicker .p-monthpicker-month.p-highlight {\n    border-radius: $border-radius-md;\n    background-color: $brand-color-pure;\n    color: $neutral-color-white;\n  }\n}\n",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                }
            }
        },
        {
            "name": "FreudCaptchaComponent",
            "id": "component-FreudCaptchaComponent-d922eb3a622c16ee3babaf75a2a90fdc9668c1f5d0603fa3e382701b0925de83cb16d340ffdaa93c732c4ba3008ea8dce3bf47c536b3043f16bc7f6010c6f19f",
            "file": "projects/web-components/src/components/others/captcha/captcha.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-captcha",
            "styleUrls": [
                "./captcha.component.scss"
            ],
            "styles": [],
            "template": "<p-captcha\n  [siteKey]=\"siteKey\"\n  [theme]=\"theme\"\n  [type]=\"type\"\n  [size]=\"size\"\n  [initCallback]=\"initCallback\"\n  (onExpire)=\"onExpire.emit($event)\"\n  (onResponse)=\"onResponse.emit($event)\"></p-captcha>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoLoadScript",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initCallback",
                    "defaultValue": "'initRecaptcha'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "siteKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "\"light\" | \"dark\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'image'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onExpire",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "onResponse",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loadScript",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-captcha',\n  template: `\n    <p-captcha\n      [siteKey]=\"siteKey\"\n      [theme]=\"theme\"\n      [type]=\"type\"\n      [size]=\"size\"\n      [initCallback]=\"initCallback\"\n      (onExpire)=\"onExpire.emit($event)\"\n      (onResponse)=\"onResponse.emit($event)\"></p-captcha>\n  `,\n  styleUrls: ['./captcha.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-captcha',\n  }\n})\nexport class FreudCaptchaComponent implements OnInit {\n\n  @Input() siteKey!: string;\n  @Input() type: string = 'image';\n  @Input() size: string = 'normal';\n  @Input() autoLoadScript: boolean = false;\n  @Input() theme: 'light' | 'dark' = 'light';\n  @Input() initCallback: string = 'initRecaptcha';\n  @Output() onResponse = new EventEmitter();\n  @Output() onExpire = new EventEmitter();\n\n  ngOnInit() {\n    if (this.autoLoadScript) {\n      this.loadScript();\n    }\n  }\n\n  public loadScript() {\n    let node = document.createElement('script');\n    node.src = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha';\n    node.type = 'text/javascript';\n    node.async = true;\n    node.charset = 'utf-8';\n    document.getElementsByTagName('head')[0].appendChild(node);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-card {\n  .p-card {\n    color: $neutral-color-dark-03;\n    border-radius: $border-radius-md;\n    box-shadow: $shadow-level-3;\n  }\n  .p-card .p-card-title {\n    @include typography($font-size-md, $font-weight-bold, 24px);\n  }\n\n  .p-card .p-card-content {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-card .p-card-subtitle {\n    color: $neutral-color-dark-02;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-card .p-card-footer {\n    padding: 0;\n  }\n\n  .p-card-header {\n    img {\n      border-top-left-radius: $border-radius-md;\n      border-top-right-radius: $border-radius-md;\n    }\n  }\n\n}\n",
                    "styleUrl": "./captcha.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "FreudCardComponent",
            "id": "component-FreudCardComponent-fa42908fc74c6248b755deca592648db1dcea2dc72b09b1b091ad5c0d0bf90ed8bead12e160a3ad7bed755eb775132879ffc6748d795db0e1a80436e9063ea8f",
            "file": "projects/web-components/src/components/others/card/card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "template": "<p-card\n  #cardElement\n  [header]=\"header\"\n  [subheader]=\"subheader\"\n  [style]=\"style\">\n  <ng-template pTemplate=\"header\">\n    <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n  </ng-template>\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"footer\">\n    <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n  </ng-template>\n</p-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subheader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cardElement'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getBlockableElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { Card } from \"primeng/card\";\n\n@Component({\n  selector: 'freud-card',\n  template: `\n    <p-card\n      #cardElement\n      [header]=\"header\"\n      [subheader]=\"subheader\"\n      [style]=\"style\">\n      <ng-template pTemplate=\"header\">\n        <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n      </ng-template>\n      <ng-content></ng-content>\n      <ng-template pTemplate=\"footer\">\n        <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n      </ng-template>\n    </p-card>\n  `,\n  styleUrls: ['./card.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-card',\n  }\n})\nexport class FreudCardComponent {\n\n  @Input() header!: string;\n  @Input() subheader!: string;\n  @Input() style!: string;\n  @ViewChild('cardElement') cardElement!: Card;\n\n  getBlockableElement() {\n    return this.cardElement.getBlockableElement();\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-card {\n  .p-card {\n    color: $neutral-color-dark-03;\n    border-radius: $border-radius-md;\n    box-shadow: $shadow-level-3;\n  }\n  .p-card .p-card-title {\n    @include typography($font-size-md, $font-weight-bold, 24px);\n  }\n\n  .p-card .p-card-content {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-card .p-card-subtitle {\n    color: $neutral-color-dark-02;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-card .p-card-footer {\n    padding: 0;\n  }\n\n  .p-card-header {\n    img {\n      border-top-left-radius: $border-radius-md;\n      border-top-right-radius: $border-radius-md;\n    }\n  }\n\n}\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudCascadeSelectComponent",
            "id": "component-FreudCascadeSelectComponent-4d8d6d8b3f30ce82cdb3684440a349e6efc854ebc7edeff065ef4bab687268e05eb99c111b7d467f76c289299b052d8416a3040728d4a40b802bd9f268bcce8d",
            "file": "projects/web-components/src/components/forms/cascade-select/cascade-select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCascadeSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-cascade-select",
            "styleUrls": [
                "./cascade-select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-cascadeSelect\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [dataKey]=\"dataKey\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    (onGroupChange)=\"onGroupChange.emit($event)\"\n    (onBeforeShow)=\"onBeforeShow.emit($event)\"\n    (onBeforeHide)=\"onBeforeHide.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n\n  ></p-cascadeSelect>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBeforeHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onBeforeShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onGroupChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-cascade-select',\n  styleUrls: ['./cascade-select.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-cascadeSelect\n        [id]=\"id\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [optionLabel]=\"optionLabel\"\n        [optionValue]=\"optionValue\"\n        [dataKey]=\"dataKey\"\n        [optionGroupLabel]=\"optionGroupLabel\"\n        [optionGroupChildren]=\"optionGroupChildren\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        [options]=\"options\"\n        (onGroupChange)=\"onGroupChange.emit($event)\"\n        (onBeforeShow)=\"onBeforeShow.emit($event)\"\n        (onBeforeHide)=\"onBeforeHide.emit($event)\"\n        (onChange)=\"onChange.emit($event)\"\n        (onShow)=\"onShow.emit($event)\"\n\n      ></p-cascadeSelect>\n      <small\n        [class.disabled]=\"disabled\"\n        *ngIf=\"helpText\"\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n    </div>\n  `,\n  host: {\n    class: 'freud-cascade-select',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudCascadeSelectComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudCascadeSelectComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() options!: any[];\n  @Input() helpText: string = '';\n  @Input() placeholder: string = '';\n  @Input() invalid: boolean = false;\n  @Input() optionLabel!: string;\n  @Input() optionValue!: string;\n  @Input() dataKey!: string;\n  @Input() optionGroupLabel: string = 'label';\n  @Input() optionGroupChildren!: string[];\n  @Input() characterPattern: string = '';\n  @Input() autoClear: boolean = true;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onGroupChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() onBeforeHide: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\n  @Output() onBeforeShow: EventEmitter<any> = new EventEmitter();\n\n\n  private _value!: any;\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onModelChange: any = () => { };\n\n  onModelTouched: any = () => { };\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.valueChange.emit(v);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-cascade-select:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-cascade-select.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-cascade-select {\n\n  .p-cascadeselect-panel {\n    box-shadow: $shadow-level-3;\n  }\n  .pi {\n    font-size: 14px;\n  }\n  .help-text {\n    margin-top: $spacing-size-quark;\n  }\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-inputtext {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-cascadeselect {\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-cascadeselect:not(.p-disabled).p-focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-cascadeselect:not(.p-disabled):hover {\n    border-color: $brand-color-pure;\n  }\n  .p-cascadeselect .p-cascadeselect-panel {\n    border-radius: $border-radius-md;\n    margin-top: 1px;\n  }\n\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item {\n    color: $neutral-color-dark-03;\n    transition: box-shadow 0.2s;\n    border-radius: 0;\n  }\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item:not(.p-highlight):not(.p-disabled):hover {\n    color: $brand-color-pure;\n    background-color: $brand-color-01;\n  }\n\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item.p-highlight {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item:focus,\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item .p-cascadeselect-item-content:focus {\n    box-shadow: unset;\n  }\n}\n\n",
                    "styleUrl": "./cascade-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 112
                    }
                }
            }
        },
        {
            "name": "FreudCheckboxComponent",
            "id": "component-FreudCheckboxComponent-ee552dcb274fae1f24d5917cad68e7b66bde2e00b7169d0387bba62ea733239994ddd1b3044b968db94894d5a126e7ab1d4a3e89c3da7188da96875ce8539f68",
            "file": "projects/web-components/src/components/forms/checkbox/checkbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCheckboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "template": "<p-checkbox\n  [id]=\"id\"\n  [class.ng-invalid]=\"invalid\"\n  [class.ng-dirty]=\"invalid\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  [trueValue]=\"trueValue\"\n  [falseValue]=\"falseValue\"\n  [name]=\"name\"\n  [binary]=\"binary\"\n  [label]=\"label\"\n  [checkboxIcon]=\"checkboxIcon\"\n  [inputId]=\"inputId\"\n  (onChange)=\"onChange.emit($event)\">\n</p-checkbox>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "binary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "checkboxIcon",
                    "defaultValue": "'freud-icon freud-icon-check'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-checkbox',\n  styleUrls: ['./checkbox.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-checkbox\n      [id]=\"id\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      [(ngModel)]=\"value\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      [trueValue]=\"trueValue\"\n      [falseValue]=\"falseValue\"\n      [name]=\"name\"\n      [binary]=\"binary\"\n      [label]=\"label\"\n      [checkboxIcon]=\"checkboxIcon\"\n      [inputId]=\"inputId\"\n      (onChange)=\"onChange.emit($event)\">\n    </p-checkbox>\n  `,\n  host: {\n    class: 'freud-checkbox',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudCheckboxComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudCheckboxComponent implements ControlValueAccessor {\n  @Input() invalid: boolean = false;\n  @Input() binary: boolean = true;\n  @Input() disabled = false;\n  @Input() label!: string;\n  @Input() bgColor: boolean = false;\n  @Input() name!: string;\n  @Input() falseValue: any = false;\n  @Input() trueValue: any = true;\n\n  @Input() checkboxIcon: string = 'freud-icon freud-icon-check';\n  @Input() inputId!: string;\n  @Input() required: boolean = false;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.modelValueChange();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-checkbox:not(.freud-bgcolor) {\n  .p-checkbox-label {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-checkbox.freud-bgcolor {\n  .p-checkbox-label {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-checkbox {\n  .p-checkbox .p-checkbox-box.p-highlight,\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n  }\n\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover,\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-focus {\n    border-color: $brand-color-pure;\n  }\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-focus {\n    box-shadow: $shadow-focused-zen !important;\n  }\n  .p-checkbox-label {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n    font-family: $font-family-base;\n  }\n}\n\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            }
        },
        {
            "name": "FreudChipComponent",
            "id": "component-FreudChipComponent-358948063d67e5e027ef65b768c49a1a3fc2da82db3703df313d72be4885004be14fe980b4b3efb8507ebd8f97cb21845f5c36a4183d1f1de632a93f2c464ee5",
            "file": "projects/web-components/src/components/others/chip/chip.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "template": "<p-chip\n  [label]=\"label\"\n  [removable]=\"removable\"\n  [removeIcon]=\"removeIcon\"\n  [styleClass]=\"styleClass\"\n  (onRemove)=\"onRemove.emit($event)\">\n</p-chip>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "removable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removeIcon",
                    "defaultValue": "'freud-icon freud-icon-times-circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-chip',\n  template: `\n    <p-chip\n      [label]=\"label\"\n      [removable]=\"removable\"\n      [removeIcon]=\"removeIcon\"\n      [styleClass]=\"styleClass\"\n      (onRemove)=\"onRemove.emit($event)\">\n    </p-chip>\n  `,\n  styleUrls: ['./chip.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-chip',\n  }\n})\nexport class FreudChipComponent {\n  @Input() removable: boolean = false;\n  @Input() styleClass!: string;\n  @Input() label!: string;\n  @Input() removeIcon: string = 'freud-icon freud-icon-times-circle';\n  @Output() onRemove = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-chip {\n  .p-chip {\n    border-radius: $border-radius-md;\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-chip .pi-chip-remove-icon:focus {\n    box-shadow: unset;\n  }\n  .p-chip .pi-chip-remove-icon {\n    font-size: 16px;\n  }\n\n}\n",
                    "styleUrl": "./chip.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmationDialogExampleComponent",
            "id": "component-FreudConfirmationDialogExampleComponent-790f03a1cfbcce123102c9df67836ba3cc01f8e4da679ab4e65c694a40dce4af022357f19500caf94b15d0aa319001c272a80bfcdb11f17eb17dc802d1b734af",
            "file": "stories/modal-and-popover/modal-and-popover-examples/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-dialog-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-confirm-dialog></freud-confirm-dialog>\n<freud-button (click)=\"confirm()\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudConfirmationService } from \"../../../projects/web-components/src/services/confirmation.service\";\n\n@Component({\n  selector: 'freud-confirm-dialog-example',\n  template: `\n    <freud-confirm-dialog></freud-confirm-dialog>\n    <freud-button (click)=\"confirm()\">Clique aqui!</freud-button>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudConfirmationDialogExampleComponent {\n\n  constructor(private confirmationService: FreudConfirmationService) {}\n\n  confirm() {\n    this.confirmationService.confirm({\n      header: 'Confirme',\n      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      acceptLabel: 'Aceitar',\n      rejectLabel: 'Rejeitar',\n\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudConfirmDialogComponent",
            "id": "component-FreudConfirmDialogComponent-ded65c589a40b410704d19e84bd914bb254f45f5c2a95b329699644d2f1133e0e1097360c8c819111b102786c6bccdfd5c1f7728278fde8792796fe7c6d7b0ff",
            "file": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "template": "<p-confirmDialog #cd\n  icon=\"freud-icon freud-icon-exclamation-triangle\">\n  <ng-template pTemplate=\"footer\">\n    <freud-button [color]=\"'secondary'\" (click)=\"cd.reject()\">{{cd.rejectButtonLabel}}</freud-button>\n    <freud-button (click)=\"cd.accept()\">{{cd.acceptButtonLabel}}</freud-button>\n  </ng-template>\n</p-confirmDialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-confirm-dialog',\n  template: `\n    <p-confirmDialog #cd\n      icon=\"freud-icon freud-icon-exclamation-triangle\">\n      <ng-template pTemplate=\"footer\">\n        <freud-button [color]=\"'secondary'\" (click)=\"cd.reject()\">{{cd.rejectButtonLabel}}</freud-button>\n        <freud-button (click)=\"cd.accept()\">{{cd.acceptButtonLabel}}</freud-button>\n      </ng-template>\n    </p-confirmDialog>\n  `,\n  styleUrls: ['./confirm-dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-confirm-dialog'\n  }\n})\nexport class FreudConfirmDialogComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-confirm-dialog {\n  .p-dialog.p-confirm-dialog {\n    max-width: 700px;\n    border-radius: 8px;\n  }\n  .p-dialog-footer {\n    display: flex;\n    place-content: flex-end;\n  }\n\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-icon {\n    font-size: 24px;\n  }\n\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-message {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-dialog .p-dialog-header .p-dialog-title, .p-dialog .p-dialog-header {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\n    border-top-right-radius: 8px;\n    border-top-left-radius: 8px;\n  }\n  .p-dialog .p-dialog-footer {\n    border-bottom-right-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n  .p-dialog .p-dialog-content {\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n}\n",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmPopupComponent",
            "id": "component-FreudConfirmPopupComponent-3d336357388302198435564f344d023b1418f05fb37f44c2dc7757a33dd2769b1c5d8f5640c3f34156e4c19ad3e13d14b53d3af42f69d787cdb1192e0dcb7037",
            "file": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-popup",
            "styleUrls": [
                "./confirm-popup.component.scss"
            ],
            "styles": [],
            "template": "<p-confirmPopup\n  styleClass=\"freud-confirm-popup\">\n</p-confirmPopup>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-confirm-popup',\n  template: `\n    <p-confirmPopup\n      styleClass=\"freud-confirm-popup\">\n    </p-confirmPopup>\n  `,\n  styleUrls: ['./confirm-popup.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-confirm-popup'\n  }\n})\nexport class FreudConfirmPopupComponent { }\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-confirm-popup {\n  &.p-confirm-popup {\n    max-width: 700px;\n    border-radius: 8px;\n    box-shadow: $shadow-level-3;\n  }\n  .p-dialog-footer {\n    display: flex;\n    place-content: flex-end;\n  }\n\n  &.p-confirm-popup .p-confirm-popup-icon {\n    font-size: 24px;\n  }\n\n  .p-confirm-popup-message {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-confirm-popup-header .p-confirm-popup-title {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\n    border-top-right-radius: 8px;\n    border-top-left-radius: 8px;\n  }\n  .p-confirm-popup-footer {\n    border-bottom-right-radius: 8px;\n    border-bottom-left-radius: 8px;\n    padding-bottom: $spacing-size-xxxs;\n\n    .p-confirm-popup-reject {\n      background-color: transparent;\n      border-color: $brand-color-pure;\n      color: $brand-color-pure;\n    }\n\n    .p-confirm-popup-accept {\n      background-color:  $brand-color-pure;\n      border-color: $brand-color-pure;\n      color: $neutral-color-white;\n    }\n\n    .p-button:enabled:hover {\n      background: $brand-color-01;\n      border-color: $brand-color-01;\n      color: $brand-color-pure;\n    }\n\n    .p-button {\n      font-family: $font-family-base;\n      border-radius: $border-radius-md;\n      @include typography($font-size-xs, $font-weight-semibold, auto);\n      &[disabled] {\n        opacity: $opacity-level-5;\n      }\n      &:focus {\n        box-shadow: unset;\n      }\n      &.p-button-icon-only {\n        width: auto;\n      }\n    }\n  }\n}\n",
                    "styleUrl": "./confirm-popup.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmPopupExampleComponent",
            "id": "component-FreudConfirmPopupExampleComponent-0e6729a3470e25a340c65bb70fc4a3945b54fa54c9ee0d3193de568cf49c5dfe32ade84b30e002eb93c4e1e73489e93a95907810629a34e61f6ea4e272880f68",
            "file": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-popup-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-confirm-popup></freud-confirm-popup>\n<freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudConfirmationService } from \"../../../../projects/web-components/src/services/confirmation.service\";\n\n@Component({\n  selector: 'freud-confirm-popup-example',\n  template: `\n    <freud-confirm-popup></freud-confirm-popup>\n    <freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudConfirmPopupExampleComponent {\n\n  constructor(private confirmationService: FreudConfirmationService) {}\n\n  confirm(event: any) {\n    this.confirmationService.confirm({\n      target: event.target,\n      icon: 'freud-icon freud-icon-exclamation-triangle',\n      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\n      acceptLabel: 'Aceitar',\n      rejectLabel: 'Rejeitar',\n\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudDialogComponent",
            "id": "component-FreudDialogComponent-4bafcc9a10060cd7d2de4a72fa88b71b894c343ef4cfb33089025c79b27ce4181d0040f49542a13d56bbad628df1315f858a94cdb6f1f5113814ec745527d53b",
            "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudDialogComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "template": "<p-dialog\n  [(visible)]=\"visible\"\n  [modal]=\"modal\"\n  [draggable]=\"draggable\"\n  [closable]=\"closable\"\n  [showHeader]=\"showHeader\"\n  [position]=\"position\"\n  [resizable]=\"resizable\"\n  [closeIcon]=\"closeIcon\"\n  [minimizeIcon]=\"minimizeIcon\"\n  [maximizeIcon]=\"maximizeIcon\"\n  [maximizable]=\"maximizable\"\n  [header]=\"header\">\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"footer\">\n    <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n  </ng-template>\n</p-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeIcon",
                    "defaultValue": "'freud-icon freud-icon-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maximizable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maximizeIcon",
                    "defaultValue": "'freud-icon freud-icon-window-maximize'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "minimizeIcon",
                    "defaultValue": "'freud-icon freud-icon-window-minimize'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "modal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "positions",
                    "decorators": []
                },
                {
                    "name": "resizable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "visibleChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\ntype positions = \"center\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\";\n@Component({\n  selector: 'freud-dialog',\n  template: `\n    <p-dialog\n      [(visible)]=\"visible\"\n      [modal]=\"modal\"\n      [draggable]=\"draggable\"\n      [closable]=\"closable\"\n      [showHeader]=\"showHeader\"\n      [position]=\"position\"\n      [resizable]=\"resizable\"\n      [closeIcon]=\"closeIcon\"\n      [minimizeIcon]=\"minimizeIcon\"\n      [maximizeIcon]=\"maximizeIcon\"\n      [maximizable]=\"maximizable\"\n      [header]=\"header\">\n      <ng-content></ng-content>\n      <ng-template pTemplate=\"footer\">\n        <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n      </ng-template>\n    </p-dialog>\n  `,\n  styleUrls: ['./dialog.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-dialog'\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudDialogComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudDialogComponent implements ControlValueAccessor {\n\n  @Input() header!: string;\n  @Input() modal: boolean = false;\n  @Input() draggable: boolean = true;\n  @Input() resizable: boolean = false;\n  @Input() showHeader: boolean = true;\n  @Input() maximizable: boolean = false;\n  @Input() closable: boolean = true;\n  @Input() position:\tpositions\t= 'center';\n  @Input() closeIcon: string = 'freud-icon freud-icon-times';\n  @Input() minimizeIcon: string = 'freud-icon freud-icon-window-minimize';\n  @Input() maximizeIcon: string = 'freud-icon freud-icon-window-maximize';\n  @Output() visibleChange: EventEmitter<any> = new EventEmitter();\n  private _visible!: boolean;\n\n  modelValueChange() {\n    this.visibleChange.emit(this.visible);\n  }\n\n  onChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  @Input() get visible(){\n    return this._visible;\n  }\n\n  public set visible(v){\n    this._visible = v;\n    this.onChange(this._visible);\n    this.modelValueChange();\n    this.onModelTouched();\n  }\n\n  writeValue(obj: any): void {\n    this._visible = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n$maxDialogWidth: 700px;\n.freud-dialog {\n  .p-dialog {\n    &:not(.p-dialog-maximized) {\n      max-width: $maxDialogWidth;\n    }\n    border-radius: 8px;\n    box-shadow: $shadow-level-3;\n  }\n  .p-dialog-footer {\n    display: flex;\n    place-content: flex-end;\n  }\n\n  .p-dialog .p-dialog-content {\n    color: $neutral-color-dark-03;\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-dialog .p-dialog-header .p-dialog-header-icon:focus {\n    box-shadow: unset;\n  }\n\n  .p-dialog .p-dialog-header .p-dialog-title, .p-dialog .p-dialog-header {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\n    border-top-right-radius: 8px;\n    border-top-left-radius: 8px;\n  }\n  .p-dialog .p-dialog-footer {\n    border-bottom-right-radius: 8px;\n    border-bottom-left-radius: 8px;\n  }\n}\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "visible": {
                    "name": "visible",
                    "setSignature": {
                        "name": "visible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "visible",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                }
            }
        },
        {
            "name": "FreudDialogExampleComponent",
            "id": "component-FreudDialogExampleComponent-d171ef1c255987c30269205a7c924533362d93c04e2ae129ff6bc5b6a7becf67b85472ef2951e2339c4c688ad47a465544d8725b03e58f2a914032071173319f",
            "file": "stories/modal-and-popover/dialog/dialog-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-dialog-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "view",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"basic\" | \"modal\" | \"maximizable\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayBasic",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "displayBasic2",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "displayMaximizable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "displayModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "showBasicDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showBasicDialog2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMaximizableDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-dialog-example',\n  templateUrl: './example.component.html',\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudDialogExampleComponent {\n\n  @Input() view: 'basic' | 'modal' | 'maximizable' = 'basic';\n  displayModal: boolean = false;\n\n  displayBasic: boolean = false;\n\n  displayBasic2: boolean = false;\n\n  displayMaximizable: boolean = false;\n\n  showModalDialog() {\n    this.displayModal = true;\n  }\n\n  showBasicDialog() {\n    this.displayBasic = true;\n  }\n\n  showBasicDialog2() {\n    this.displayBasic2 = true;\n  }\n\n  showMaximizableDialog() {\n    this.displayMaximizable = true;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"view === 'basic'\">\n  <freud-button (click)=\"showBasicDialog()\" label=\"Show\">Clique para abrir modal!</freud-button>\n  <freud-dialog header=\"Header\" [(visible)]=\"displayBasic\" [style]=\"{width: '50vw'}\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n      cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n    <ng-container freudTemplatefooter>\n      <freud-button color=\"secondary\" (click)=\"displayBasic=false\" styleClass=\"freud-button-text\">Cancelar</freud-button>\n      <freud-button (click)=\"displayBasic=false\" styleClass=\"freud-button-text\">Ok</freud-button>\n    </ng-container>\n  </freud-dialog>\n\n  <br>\n\n  <freud-button (click)=\"showBasicDialog2()\" label=\"Long Content\">Clique para abrir dialog 2!</freud-button>\n  <freud-dialog header=\"Long Content\" [(visible)]=\"displayBasic2\" [style]=\"{width: '50vw'}\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\n      ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\n      culpa qui officia deserunt mollit anim id est laborum.</p>\n\n    <p>\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae\n      dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est,\n      qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam,\n      quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,\n      vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?</p>\n\n    <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident,\n      similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio\n      cumque nihil impedit quo minus id quod maxime aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.</p>\n    <ng-container freudTemplatefooter>\n      <freud-button (click)=\"displayBasic2=false\" styleClass=\"freud-button-text\">Ok</freud-button>\n    </ng-container>\n  </freud-dialog>\n</ng-container>\n\n<ng-container *ngIf=\"view === 'modal'\">\n  <freud-button (click)=\"showModalDialog()\" label=\"Show\">Clique para abrir modal!</freud-button>\n  <freud-dialog header=\"Header\" [(visible)]=\"displayModal\" [modal]=\"true\" [style]=\"{width: '50vw'}\"\n                [draggable]=\"false\" [resizable]=\"false\">\n    <p class=\"p-m-0\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n      laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n    <ng-container freudTemplatefooter>\n      <freud-button (click)=\"displayModal=false\" styleClass=\"freud-button-text\">Ok</freud-button>\n    </ng-container>\n  </freud-dialog>\n</ng-container>\n\n<ng-container *ngIf=\"view === 'maximizable'\">\n  <freud-button (click)=\"showMaximizableDialog()\" label=\"Show\">Clique para abrir modal!</freud-button>\n  <freud-dialog header=\"Godfather I\" [(visible)]=\"displayMaximizable\" [modal]=\"true\" [style]=\"{width: '50vw'}\" [maximizable]=\"true\"\n                [draggable]=\"false\" [resizable]=\"false\">\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\n      cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n    <ng-container freudTemplatefooter>\n      <freud-button (click)=\"displayMaximizable=false\" styleClass=\"freud-button-text\"> Ok</freud-button>\n    </ng-container>\n  </freud-dialog>\n</ng-container>\n\n"
        },
        {
            "name": "FreudDividerComponent",
            "id": "component-FreudDividerComponent-881befdc199dcca2fecb22c76acec3b98d251db47e8950d5519069b050c052a3cf2433ceef07e84d591beacb6f840332ba2e0e3c396e490c7e401b8da9f06564",
            "file": "projects/web-components/src/components/others/divider/divider.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-divider",
            "styleUrls": [
                "./divider.component.scss"
            ],
            "styles": [],
            "template": "<p-divider\n  [type]=\"type\"\n  [layout]=\"layout\"\n  [align]=\"align\"\n  [style]=\"style\">\n  <ng-content></ng-content>\n</p-divider>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "\"left\" | \"center\" | \"right\" | \"top\" | \"bottom\"",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'solid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"dashed\" | \"dotted\" | \"solid\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-divider',\n  template: `\n    <p-divider\n      [type]=\"type\"\n      [layout]=\"layout\"\n      [align]=\"align\"\n      [style]=\"style\">\n      <ng-content></ng-content>\n    </p-divider>\n  `,\n  styleUrls: ['./divider.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-divider',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudDividerComponent {\n\n  @Input() type: \"dashed\" | \"dotted\" | 'solid' = 'solid';\n  @Input() bgColor: boolean = false;\n  @Input() style!: string;\n  @Input() layout: 'horizontal' | 'vertical' = 'horizontal';\n  @Input() align!: \"left\" | \"center\" | \"right\" | \"top\" | \"bottom\";\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-divider {\n  .p-divider.p-divider-horizontal .p-divider-content,\n  .p-divider.p-divider-vertical .p-divider-content {\n    @include typography($font-size-xs, $font-weight-bold, auto);\n  }\n}\n\n.freud-divider:not(.freud-bgcolor) {\n  .p-divider.p-divider-vertical .p-divider-content,\n  .p-divider.p-divider-horizontal .p-divider-content {\n    color: $neutral-color-dark-04;\n  }\n  .p-divider.p-divider-horizontal:before {\n    border-top-color: $neutral-color-light-03;\n  }\n}\n\n.freud-divider.freud-bgcolor {\n  .p-divider.p-divider-vertical .p-divider-content,\n  .p-divider.p-divider-horizontal .p-divider-content {\n    color: $neutral-color-white;\n  }\n  .p-divider.p-divider-horizontal:before {\n    border-top-color: $neutral-color-light-02;\n  }\n\n  .p-divider.p-divider-vertical .p-divider-content,\n  .p-divider.p-divider-horizontal .p-divider-content {\n    background-color: $brand-color-06;\n  }\n}\n",
                    "styleUrl": "./divider.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudDynamicDialogExampleComponent",
            "id": "component-FreudDynamicDialogExampleComponent-3856e3d1b67eda54880e89cd43f5f80d1e0eb4262a31a85b6a8881b03a11a7742251fd8e79505212d7adc6e6baaeab70279e923ec120d0da8df29c4b82533e0b",
            "file": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-dynamic-dialog-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudDialogService } from \"@freud-ds/web-components\";\n\n\n@Component({\n  selector: 'freud-dynamic-dialog-component-example',\n  template: `\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n    <br>\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n    <br>\n    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudDynamicExampleComponent {\n\n  constructor() {}\n\n}\n\n@Component({\n  selector: 'freud-dynamic-dialog-example',\n  template: `\n    <freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudDynamicDialogExampleComponent {\n\n  constructor(private dialogService: FreudDialogService) {}\n\n  confirm(event: any) {\n    this.dialogService.open(FreudDynamicExampleComponent, {\n      header: 'Dynamic Dialog Header',\n      width: '70%'\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "FreudDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "FreudDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudDynamicExampleComponent",
            "id": "component-FreudDynamicExampleComponent-3856e3d1b67eda54880e89cd43f5f80d1e0eb4262a31a85b6a8881b03a11a7742251fd8e79505212d7adc6e6baaeab70279e923ec120d0da8df29c4b82533e0b",
            "file": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-dynamic-dialog-component-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n<br>\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n<br>\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudDialogService } from \"@freud-ds/web-components\";\n\n\n@Component({\n  selector: 'freud-dynamic-dialog-component-example',\n  template: `\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n    <br>\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n    <br>\n    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudDynamicExampleComponent {\n\n  constructor() {}\n\n}\n\n@Component({\n  selector: 'freud-dynamic-dialog-example',\n  template: `\n    <freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudDynamicDialogExampleComponent {\n\n  constructor(private dialogService: FreudDialogService) {}\n\n  confirm(event: any) {\n    this.dialogService.open(FreudDynamicExampleComponent, {\n      header: 'Dynamic Dialog Header',\n      width: '70%'\n    })\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            }
        },
        {
            "name": "FreudFileUploadComponent",
            "id": "component-FreudFileUploadComponent-68c2e1d7ef880f98af21633012fb0e688c9e7f684077c834a78fa6329b782df677de51e0d82b7226a29f1b47fed9f1a4e2409c1867d2754872a21f50189adb75",
            "file": "projects/web-components/src/components/media/fille-upload/file-upload.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "template": "<p-fileUpload [name]=\"name\"\n              [url]=\"url\"\n              [auto]=\"auto\"\n              [accept]=\"accept\"\n              [multiple]=\"multiple\"\n              [method]=\"method\"\n              [fileLimit]=\"fileLimit\"\n              [chooseLabel]=\"chooseLabel\"\n              [uploadLabel]=\"uploadLabel\"\n              [cancelLabel]=\"cancelLabel\"\n              [chooseIcon]=\"chooseIcon\"\n              [uploadIcon]=\"uploadIcon\"\n              [cancelIcon]=\"cancelIcon\"\n              [withCredentials]=\"withCredentials\"\n              [mode]=\"mode\"\n              [customUpload]=\"customUpload\"\n              [showUploadButton]=\"showUploadButton\"\n              [showCancelButton]=\"showCancelButton\"\n              [headers]=\"headers\"\n              [invalidFileSizeMessageSummary]=\"invalidFileSizeMessageSummary\"\n              [invalidFileSizeMessageDetail]=\"invalidFileSizeMessageDetail\"\n              [invalidFileTypeMessageSummary]=\"invalidFileTypeMessageSummary\"\n              [invalidFileLimitMessageDetail]=\"invalidFileLimitMessageDetail\"\n              [invalidFileLimitMessageSummary]=\"invalidFileLimitMessageSummary\"\n              [invalidFileTypeMessageDetail]=\"invalidFileTypeMessageDetail\"\n              (onBeforeUpload)=\"onBeforeUpload.emit($event)\"\n              (onSend)=\"onSend.emit($event)\"\n              (onError)=\"onError.emit($event)\"\n              (onRemove)=\"onRemove.emit($event)\"\n              (onSelect)=\"onSelect.emit($event)\"\n              (onProgress)=\"onProgress.emit($event)\"\n              (uploadHandler)=\"uploadHandler.emit($event)\"\n              (onUpload)=\"onUpload.emit($event)\">\n</p-fileUpload>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "auto",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cancelIcon",
                    "defaultValue": "'freud-icon freud-icon-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cancelLabel",
                    "defaultValue": "'Cancelar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseLabel",
                    "defaultValue": "'Escolha'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customUpload",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fileLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "HttpHeaders",
                    "decorators": []
                },
                {
                    "name": "invalidFileLimitMessageDetail",
                    "defaultValue": "'limite é de {0} no máximo.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileLimitMessageSummary",
                    "defaultValue": "'Número máximo de arquivos excedido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileSizeMessageDetail",
                    "defaultValue": "'o tamanho máximo de upload é {0}.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileSizeMessageSummary",
                    "defaultValue": "'{0}: Tamanho do arquivo inválido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileTypeMessageDetail",
                    "defaultValue": "'tipos de arquivo permitidos: {0}.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileTypeMessageSummary",
                    "defaultValue": "'{0}: tipo de arquivo inválido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "method",
                    "defaultValue": "'post'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"post\" | \"put\"",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'advanced'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"advanced\" | \"basic\"",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'file[]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCancelButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showUploadButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "uploadIcon",
                    "defaultValue": "'freud-icon freud-icon-upload'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uploadLabel",
                    "defaultValue": "'Enviar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "withCredentials",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBeforeUpload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter"
                },
                {
                    "name": "onError",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "onProgress",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSend",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onUpload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "uploadHandler",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, EventEmitter, Output } from '@angular/core';\nimport { HttpHeaders } from \"@angular/common/http\";\n\n\n@Component({\n  selector: 'freud-file-upload',\n  template: `\n    <p-fileUpload [name]=\"name\"\n                  [url]=\"url\"\n                  [auto]=\"auto\"\n                  [accept]=\"accept\"\n                  [multiple]=\"multiple\"\n                  [method]=\"method\"\n                  [fileLimit]=\"fileLimit\"\n                  [chooseLabel]=\"chooseLabel\"\n                  [uploadLabel]=\"uploadLabel\"\n                  [cancelLabel]=\"cancelLabel\"\n                  [chooseIcon]=\"chooseIcon\"\n                  [uploadIcon]=\"uploadIcon\"\n                  [cancelIcon]=\"cancelIcon\"\n                  [withCredentials]=\"withCredentials\"\n                  [mode]=\"mode\"\n                  [customUpload]=\"customUpload\"\n                  [showUploadButton]=\"showUploadButton\"\n                  [showCancelButton]=\"showCancelButton\"\n                  [headers]=\"headers\"\n                  [invalidFileSizeMessageSummary]=\"invalidFileSizeMessageSummary\"\n                  [invalidFileSizeMessageDetail]=\"invalidFileSizeMessageDetail\"\n                  [invalidFileTypeMessageSummary]=\"invalidFileTypeMessageSummary\"\n                  [invalidFileLimitMessageDetail]=\"invalidFileLimitMessageDetail\"\n                  [invalidFileLimitMessageSummary]=\"invalidFileLimitMessageSummary\"\n                  [invalidFileTypeMessageDetail]=\"invalidFileTypeMessageDetail\"\n                  (onBeforeUpload)=\"onBeforeUpload.emit($event)\"\n                  (onSend)=\"onSend.emit($event)\"\n                  (onError)=\"onError.emit($event)\"\n                  (onRemove)=\"onRemove.emit($event)\"\n                  (onSelect)=\"onSelect.emit($event)\"\n                  (onProgress)=\"onProgress.emit($event)\"\n                  (uploadHandler)=\"uploadHandler.emit($event)\"\n                  (onUpload)=\"onUpload.emit($event)\">\n    </p-fileUpload>\n  `,\n  styleUrls: ['./file-upload.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-file-upload',\n  }\n})\nexport class FreudFileUploadComponent {\n  @Input() name: string = 'file[]';\n  @Input() url!: string;\n  @Input() accept!: string;\n  @Input() auto: boolean = false;\n  @Input() multiple: boolean = false;\n  @Input() withCredentials: boolean = false;\n  @Input() method: 'post' | 'put' = 'post';\n  @Input() mode: 'advanced' | 'basic' = 'advanced';\n  @Input() fileLimit!: number;\n  @Input() customUpload: boolean = false;\n  @Input() showUploadButton: boolean = true;\n  @Input() showCancelButton: boolean = true;\n  @Input() headers!: HttpHeaders;\n  @Input() chooseIcon: string = 'freud-icon freud-icon-plus';\n  @Input() uploadIcon: string = 'freud-icon freud-icon-upload';\n  @Input() cancelIcon: string = 'freud-icon freud-icon-times';\n  @Input() chooseLabel: string = 'Escolha';\n  @Input() uploadLabel: string = 'Enviar';\n  @Input() cancelLabel: string = 'Cancelar';\n  @Input() invalidFileSizeMessageSummary: string = '{0}: Tamanho do arquivo inválido, ';\n  @Input() invalidFileSizeMessageDetail: string = 'o tamanho máximo de upload é {0}.';\n  @Input() invalidFileTypeMessageSummary: string = '{0}: tipo de arquivo inválido, ';\n  @Input() invalidFileLimitMessageDetail: string = 'limite é de {0} no máximo.';\n  @Input() invalidFileLimitMessageSummary: string = 'Número máximo de arquivos excedido, ';\n  @Input() invalidFileTypeMessageDetail: string = 'tipos de arquivo permitidos: {0}.';\n  @Output() onUpload = new EventEmitter();\n  @Output() uploadHandler = new EventEmitter();\n  @Output() onBeforeUpload = new EventEmitter();\n  @Output() onSend = new EventEmitter();\n  @Output() onError = new EventEmitter();\n  @Output() onRemove = new EventEmitter();\n  @Output() onSelect = new EventEmitter();\n  @Output() onProgress = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-file-upload {\n  .p-fileupload .p-fileupload-buttonbar {\n    border: 1px solid $neutral-color-light-03;\n    background-color: 1px solid $neutral-color-light-03;\n    border-top-right-radius: $border-radius-md;\n    border-top-left-radius: $border-radius-md;\n  }\n  .p-fileupload .p-fileupload-content {\n    border: 1px solid $neutral-color-light-03;\n    border-bottom-right-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n  }\n  .p-fileupload-advanced .p-button .p-button-icon-left {\n    margin-right: 0;\n    margin-left: 8px;\n  }\n\n  .p-button {\n    background-color:  $brand-color-pure;\n    border-color: $brand-color-pure;\n    color: $neutral-color-white;\n    padding: 0 $spacing-size-xxxs;\n    height: 40px;\n    border-radius: $border-radius-md;\n    display: inline-flex;\n    flex-direction: row-reverse;\n    @include typography($font-size-xs, $font-weight-bold, auto);\n    &[disabled] {\n      opacity: $opacity-level-5;\n    }\n    &:focus {\n      box-shadow: unset;\n    }\n  }\n\n  .p-button:enabled:hover, .p-fileupload-choose:not(.p-disabled):hover {\n    background: $brand-color-01;\n    border-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n}\n",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudFullCalendarComponent",
            "id": "component-FreudFullCalendarComponent-ad59d59077da07758bc8b25b38a2bfffa1cea9b9ddd6a5809544f3ce67be10a420c0f3c645b814543a0d70c44cf121111864b58eea31fdd5b206cc1be311e7d6",
            "file": "projects/web-components/src/components/others/full-calendar/full-calendar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudFullCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-full-calendar",
            "styleUrls": [
                "./full-calendar.component.scss"
            ],
            "styles": [],
            "template": "<full-calendar\n  #calendarRef\n  [id]=\"id\"\n  [deepChangeDetection]=\"deepChangeDetection\"\n  [eventSources]=\"eventSources\"\n  [resources]=\"resources\"\n  [events]=\"events\"\n  [options]=\"options\">\n</full-calendar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "deepChangeDetection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "CalendarOption<events> | null | undefined",
                    "decorators": []
                },
                {
                    "name": "eventSources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "CalendarOption<eventSources> | null | undefined",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "CalendarOptions",
                    "decorators": []
                },
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "CalendarOption<resources> | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calendarComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FullCalendarComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'calendarRef'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\nimport { FullCalendarComponent } from \"@fullcalendar/angular\";\nimport { CalendarOptions } from \"@fullcalendar/core\";\nimport { CalendarOption } from \"@fullcalendar/angular/private-types\";\n\n@Component({\n  selector: 'freud-full-calendar',\n  template: `\n    <full-calendar\n      #calendarRef\n      [id]=\"id\"\n      [deepChangeDetection]=\"deepChangeDetection\"\n      [eventSources]=\"eventSources\"\n      [resources]=\"resources\"\n      [events]=\"events\"\n      [options]=\"options\">\n    </full-calendar>\n  `,\n  styleUrls: ['./full-calendar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-full-calendar',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudFullCalendarComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudFullCalendarComponent {\n  @Input() events!: CalendarOption<'events'> | null | undefined;\n  @Input() options!: CalendarOptions;\n  @Input() bgColor: boolean = false;\n  @Input() deepChangeDetection?: boolean;\n  @Input() eventSources?: CalendarOption<'eventSources'> | null | undefined;\n  @Input() resources?: CalendarOption<'resources'> | null | undefined;\n  @Input() id!: string;\n  @ViewChild('calendarRef') calendarComponent!: FullCalendarComponent;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-full-calendar {\n  font-family: $font-family-base;\n\n  .fc .fc-daygrid-day.fc-day-today {\n    background-color: $brand-color-01;\n  }\n  &.freud-bgcolor {\n    .fc-toolbar-title {\n      @include typography(30px, $font-weight-semibold, 36px);\n      color: $neutral-color-white;\n    }\n    .fc.fc-theme-standard .fc-toolbar {\n      .fc-prev-button,\n      .fc-next-button,\n      .fc-today-button.fc-button {\n        background-color: $neutral-color-white;\n        border-color: $neutral-color-white;\n        color: $brand-color-pure;\n        &:focus {\n          box-shadow: unset;\n        }\n      }\n      .fc-today-button.fc-button {\n        border-radius: $border-radius-md;\n      }\n\n      .fc-button.fc-dayGridMonth-button,\n      .fc-button.fc-timeGridWeek-button,\n      .fc-button.fc-timeGridDay-button {\n        background-color: $brand-color-04;\n        border-color: $brand-color-05;\n        color: $neutral-color-white;\n        &.fc-button-active {\n          background-color: $neutral-color-white;\n          border-color: $neutral-color-light-04;\n          color: $neutral-color-dark-03;\n        }\n        &:focus {\n          box-shadow: unset;\n        }\n      }\n    }\n\n  }\n  &:not(.freud-bgcolor) {\n    .fc-toolbar-title {\n      @include typography(30px, $font-weight-semibold, 36px);\n      color: $neutral-color-dark-04;\n    }\n\n    .fc.fc-theme-standard .fc-toolbar {\n      .fc-prev-button,\n      .fc-next-button,\n      .fc-today-button.fc-button {\n        background-color: $brand-color-pure;\n        border-color: $brand-color-pure;\n        color: $neutral-color-white;\n        &:focus {\n          box-shadow: unset;\n        }\n      }\n      .fc-today-button.fc-button {\n        border-radius: $border-radius-md;\n      }\n\n      .fc-button.fc-dayGridMonth-button,\n      .fc-button.fc-timeGridWeek-button,\n      .fc-button.fc-timeGridDay-button {\n        background-color: $neutral-color-white;\n        border-color: $neutral-color-light-04;\n        color: $neutral-color-dark-03;\n        &.fc-button-active {\n          background-color: $brand-color-pure;\n          border-color: $brand-color-pure;\n          color: $neutral-color-white;\n        }\n        &:focus {\n          box-shadow: unset;\n        }\n      }\n    }\n  }\n  .fc.fc-theme-standard .fc-toolbar .fc-button {\n    @include typography($font-size-xxs, $font-weight-bold, $font-size-xxs);\n    height: 40px;\n  }\n  .fc.fc-theme-standard .fc-toolbar .fc-today-button.fc-button {\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n  }\n\n  .fc.fc-theme-standard .fc-toolbar .fc-button-group .fc-button:first-child {\n    border-top-left-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n  }\n  .fc.fc-theme-standard .fc-toolbar .fc-button-group .fc-button:last-child {\n    border-top-right-radius: $border-radius-md;\n    border-bottom-right-radius: $border-radius-md;\n  }\n\n  .fc.fc-theme-standard .fc-view-harness .fc-event.fc-daygrid-block-event {\n    border-radius: 0;\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n    color: $neutral-color-white;\n    padding-left: 4px;\n    @include typography($font-size-xxxs, $font-weight-regular, 14.4px);\n  }\n\n  .fc.fc-theme-standard .fc-toolbar .fc-button:not(:disabled):hover {\n    background: $brand-color-01;\n    border-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .fc .fc-col-header-cell-cushion {\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\n    color: $neutral-color-dark-03;\n  }\n  .fc .fc-daygrid-day-number {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n  .fc.fc-theme-standard a {\n    color: $neutral-color-dark-03;\n  }\n}\n",
                    "styleUrl": "./full-calendar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudGalleryComponent",
            "id": "component-FreudGalleryComponent-4e39a53dc2dcbe9d62dac336ab6995a97f6833f372e18121dc84ae87450d37f391852c810acc1f92e9f995216ccb05a55056cd2e7b4bfd71b878467ea44f8297",
            "file": "projects/web-components/src/components/media/gallery/gallery.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-gallery",
            "styleUrls": [
                "./gallery.component.scss"
            ],
            "styles": [],
            "template": "<p-galleria [value]=\"images\" [numVisible]=\"10\" [responsiveOptions]=\"responsiveOptions\" [showThumbnails]=\"showThumbnails\" [showIndicators]=\"!showThumbnails\">\n  <ng-template pTemplate=\"item\" let-item>\n    <img [src]=\"item.previewImageSrc\" style=\"width: 100%;\" />\n  </ng-template>\n  <ng-template pTemplate=\"thumbnail\" let-item>\n    <div class=\"p-grid p-nogutter p-justify-center\">\n      <img [src]=\"item.thumbnailImageSrc\" style=\"width: 80px;height: 60px\"/>\n    </div>\n  </ng-template>\n</p-galleria>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "GalleryPhoto[]",
                    "decorators": []
                },
                {
                    "name": "responsiveOptions",
                    "defaultValue": "[\n    {\n      breakpoint: '1366px',\n      numVisible: 9\n    },\n    {\n      breakpoint: '1024px',\n      numVisible: 8\n    },\n    {\n      breakpoint: '960px',\n      numVisible: 5\n    },\n    {\n      breakpoint: '768px',\n      numVisible: 4\n    },\n    {\n      breakpoint: '560px',\n      numVisible: 2\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "showThumbnails",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { GalleryPhoto } from \"../../../api/gallery-photo.interface\";\n\n@Component({\n  selector: 'freud-gallery',\n  template: `\n    <p-galleria [value]=\"images\" [numVisible]=\"10\" [responsiveOptions]=\"responsiveOptions\" [showThumbnails]=\"showThumbnails\" [showIndicators]=\"!showThumbnails\">\n      <ng-template pTemplate=\"item\" let-item>\n        <img [src]=\"item.previewImageSrc\" style=\"width: 100%;\" />\n      </ng-template>\n      <ng-template pTemplate=\"thumbnail\" let-item>\n        <div class=\"p-grid p-nogutter p-justify-center\">\n          <img [src]=\"item.thumbnailImageSrc\" style=\"width: 80px;height: 60px\"/>\n        </div>\n      </ng-template>\n    </p-galleria>\n  `,\n  styleUrls: ['./gallery.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-gallery',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudGalleryComponent {\n  @Input() images: GalleryPhoto[] = [];\n  @Input() bgColor: boolean = false;\n  @Input() showThumbnails: boolean = true;\n\n  @Input() responsiveOptions = [\n    {\n      breakpoint: '1366px',\n      numVisible: 9\n    },\n    {\n      breakpoint: '1024px',\n      numVisible: 8\n    },\n    {\n      breakpoint: '960px',\n      numVisible: 5\n    },\n    {\n      breakpoint: '768px',\n      numVisible: 4\n    },\n    {\n      breakpoint: '560px',\n      numVisible: 2\n    }\n  ];\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-gallery:not(.freud-bgcolor) {\n\n}\n.freud-gallery.freud-bgcolor {\n}\n\n.freud-gallery {\n  .p-link:focus {\n    box-shadow: unset;\n  }\n  .p-galleria .p-galleria-indicators .p-galleria-indicator.p-highlight button {\n    background-color: $brand-color-pure;\n  }\n  .p-galleria .p-galleria-indicators .p-galleria-indicator button {\n    background-color: $neutral-color-light-03;\n  }\n  .p-galleria .p-galleria-thumbnail-container .p-galleria-thumbnail-item-content:focus {\n    box-shadow: 0 0 0 0.2rem $brand-color-pure;\n  }\n}\n",
                    "styleUrl": "./gallery.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudHeaderComponent",
            "id": "component-FreudHeaderComponent-9b7bfa49224a9e8c7e600ed32c9713e6aad67aa3da17694f47d0728a4e620326aeac2bcdb09ee372e57d3f1474480ac5f3f9e787401776aeb0091be87ec0c263",
            "file": "stories/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"header\">\n  <div class=\"container\">\n    <h2 class=\"title\">{{title}}</h2>\n    <p>{{description}}</p>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-header',\n  template: `\n    <div class=\"header\">\n      <div class=\"container\">\n        <h2 class=\"title\">{{title}}</h2>\n        <p>{{description}}</p>\n      </div>\n    </div>\n  `,\n  styleUrls: ['./header.component.scss']\n})\nexport class FreudHeaderComponent {\n\n  @Input() title!: string;\n  @Input() description!: string;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// TODO: Verificar o import\n@import '../../../tokens/dist/style/scss/_variables.scss';\n\ndiv.header {\n  font-family: $font-family-base;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  margin-bottom: 32px;\n  background: url(./bg.png) center no-repeat;\n  background-size: 100% 300px;\n  z-index: 0;\n\n  & > div {\n    width: 100%;\n    z-index: 1;\n  }\n}\n\n.container {\n  margin: 0 auto;\n  max-width: 87%;\n  padding-bottom: 90px;\n}\n\nh2.title {\n  align-items: center;\n  color: white;\n  display: flex;\n  flex-direction: row;\n  font-size: 40px;\n  font-weight: 700;\n  letter-spacing: -1px;\n  line-height: 60px;\n  margin: 0 0 30px 0;\n  padding: 90px 0 0 0;\n  text-align: left;\n}\n\np {\n  color: white;\n}\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudImageComponent",
            "id": "component-FreudImageComponent-8785e43ed31f52dff59c77e889b1dba90ab76a97cf81d52b74cba1afde78ea106ae2dbcc7f649f3e4670cb8098c5ff754da4b5f3d43eefe2a57622807cf6eee0",
            "file": "projects/web-components/src/components/media/image/image.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-image",
            "styleUrls": [
                "./image.component.scss"
            ],
            "styles": [],
            "template": "<p-image\n  [width]=\"width\"\n  [height]=\"height\"\n  [src]=\"src\"\n  [alt]=\"alt\"\n  [preview]=\"preview\"\n  (onShow)=\"onShow.emit($event)\"\n  (onHide)=\"onHide.emit($event)\"></p-image>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'100px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preview",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-image',\n  template: `\n    <p-image\n      [width]=\"width\"\n      [height]=\"height\"\n      [src]=\"src\"\n      [alt]=\"alt\"\n      [preview]=\"preview\"\n      (onShow)=\"onShow.emit($event)\"\n      (onHide)=\"onHide.emit($event)\"></p-image>\n  `,\n  styleUrls: ['./image.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-image'\n  }\n})\nexport class FreudImageComponent {\n  @Input() width: string = '100%';\n  @Input() height: string = '100px';\n  @Input() alt!: string;\n  @Input() src!: string;\n  @Input() preview: boolean = false;\n  @Output() onShow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onHide: EventEmitter<void> = new EventEmitter<void>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-image {\n  .p-image-toolbar {\n    z-index: 100000;\n  }\n  .p-link:focus {\n    box-shadow: 0 0 0 0.2rem $brand-color-pure;\n  }\n  .p-image-preview-container:hover > .p-image-preview-indicator {\n    background-color: rgba(0, 0, 0, 0.64);\n  }\n  .p-image-preview-icon {\n    color: $neutral-color-light-01;\n  }\n  .p-image-preview {\n    max-height: calc(100vh - 115px);\n  }\n}\n",
                    "styleUrl": "./image.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudInputMaskComponent",
            "id": "component-FreudInputMaskComponent-b092f4f6fe802cb18c76e506ee692b380d13763f5364781b1b7943cc8d8bb76c4a009dc405c03741d5467e08a5f1b1c18ada74d665f2672d8a823b78da107f82",
            "file": "projects/web-components/src/components/forms/input-mask/input-mask.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputMaskComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-mask",
            "styleUrls": [
                "./input-mask.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-inputMask\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [mask]=\"mask\"\n    [unmask]=\"unmask\"\n    [slotChar]=\"slotChar\"\n    [characterPattern]=\"characterPattern\"\n    [placeholder]=\"placeholder || ''\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [autoClear]=\"false\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onInput)=\"onInput.emit($event)\"\n    (onComplete)=\"onComplete.emit($event)\"\n    (onKeydown)=\"onKeydown.emit($event)\"\n  ></p-inputMask>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mask",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "slotChar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "unmask",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onComplete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 99
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-input-mask',\n  styleUrls: ['./input-mask.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-inputMask\n        [id]=\"id\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [mask]=\"mask\"\n        [unmask]=\"unmask\"\n        [slotChar]=\"slotChar\"\n        [characterPattern]=\"characterPattern\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        [autoClear]=\"false\"\n        (onFocus)=\"onFocus.emit($event)\"\n        (onBlur)=\"onBlur.emit($event)\"\n        (onInput)=\"onInput.emit($event)\"\n        (onComplete)=\"onComplete.emit($event)\"\n        (onKeydown)=\"onKeydown.emit($event)\"\n      ></p-inputMask>\n      <small\n        [class.disabled]=\"disabled\"\n        *ngIf=\"helpText\"\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n    </div>\n  `,\n  host: {\n    class: 'freud-input-mask',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudInputMaskComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudInputMaskComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() helpText: string = '';\n  @Input() placeholder: string = '';\n  @Input() invalid: boolean = false;\n  @Input() mask: string = '';\n  @Input() unmask: boolean = false;\n  @Input() slotChar: string = '';\n  @Input() characterPattern: string = '';\n  @Input() autoClear: boolean = true;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\n\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n  @Output() onComplete: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  private _value!: string;\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onModelChange: any = () => { };\n\n  onModelTouched: any = () => { };\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.valueChange.emit(this._value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-input-mask:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-input-mask.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-input-mask {\n  .help-text {\n    margin-top: $spacing-size-quark;\n  }\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-inputtext {\n    height: 40px;\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    &::placeholder {\n      color: $feedback-color-negative-04;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n}\n",
                    "styleUrl": "./input-mask.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 109,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                }
            }
        },
        {
            "name": "FreudInputNumberComponent",
            "id": "component-FreudInputNumberComponent-dcd4f3bde491fdccc4f55966ebdfb1b3eb5dae3ee123d22dd8526a39806f6cab9892a3b9fe6145754ae54bdc6ddbf855217b63128ee5a589738ee8b716097a99",
            "file": "projects/web-components/src/components/forms/input-number/input-number.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputNumberComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-number",
            "styleUrls": [
                "./input-number.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-inputNumber\n        [id]=\"id\"\n        [inputId]=\"id\"\n        type=\"text\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n\n        [format]=\"format\"\n        [buttonLayout]=\"buttonLayout\"\n        [incrementButtonIcon]=\"incrementButtonIcon\"\n        [decrementButtonIcon]=\"decrementButtonIcon\"\n        [showButtons]=\"showButtons\"\n        [locale]=\"locale\"\n        [localeMatcher]=\"localeMatcher\"\n        [mode]=\"mode\"\n\n        [prefix]=\"prefix\"\n        [useGrouping]=\"useGrouping\"\n        [suffix]=\"suffix\"\n        [currency]=\"currency\"\n        [currencyDisplay]=\"currencyDisplay\"\n\n        [minFractionDigits]=\"minFractionDigits\"\n        [maxFractionDigits]=\"maxFractionDigits\"\n\n        [min]=\"min\"\n        [max]=\"max\"\n\n        [step]=\"step\"\n        [allowEmpty]=\"allowEmpty\"\n\n        (ngModelChange)=\"modelValueChange()\"\n        (focus)=\"onFocus.emit($event)\"\n        (blur)=\"onBlur.emit($event)\"\n        (input)=\"onInput.emit($event)\"\n        (keydown)=\"onKeydown.emit($event)\"\n      ></p-inputNumber>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowEmpty",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonLayout",
                    "defaultValue": "'stacked'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "\"stacked\" | \"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currencyDisplay",
                    "defaultValue": "\"symbol\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "decrementButtonIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "format",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "incrementButtonIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "localeMatcher",
                    "defaultValue": "'best fit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"lookup\" | \"best fit\"",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxFractionDigits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minFractionDigits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "\"decimal\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "\"decimal\" | \"currency\"",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "prefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showButtons",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "suffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useGrouping",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-input-number',\n  styleUrls: ['./input-number.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n          <p-inputNumber\n            [id]=\"id\"\n            [inputId]=\"id\"\n            type=\"text\"\n            [class.ng-invalid]=\"invalid\"\n            [class.ng-dirty]=\"invalid\"\n            [(ngModel)]=\"value\"\n            [placeholder]=\"placeholder || ''\"\n            [disabled]=\"disabled\"\n            [required]=\"required\"\n\n            [format]=\"format\"\n            [buttonLayout]=\"buttonLayout\"\n            [incrementButtonIcon]=\"incrementButtonIcon\"\n            [decrementButtonIcon]=\"decrementButtonIcon\"\n            [showButtons]=\"showButtons\"\n            [locale]=\"locale\"\n            [localeMatcher]=\"localeMatcher\"\n            [mode]=\"mode\"\n\n            [prefix]=\"prefix\"\n            [useGrouping]=\"useGrouping\"\n            [suffix]=\"suffix\"\n            [currency]=\"currency\"\n            [currencyDisplay]=\"currencyDisplay\"\n\n            [minFractionDigits]=\"minFractionDigits\"\n            [maxFractionDigits]=\"maxFractionDigits\"\n\n            [min]=\"min\"\n            [max]=\"max\"\n\n            [step]=\"step\"\n            [allowEmpty]=\"allowEmpty\"\n\n            (ngModelChange)=\"modelValueChange()\"\n            (focus)=\"onFocus.emit($event)\"\n            (blur)=\"onBlur.emit($event)\"\n            (input)=\"onInput.emit($event)\"\n            (keydown)=\"onKeydown.emit($event)\"\n          ></p-inputNumber>\n    </div>\n  `,\n  host: {\n    class: 'freud-input-number',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudInputNumberComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class FreudInputNumberComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() format: boolean = true;\n  @Input() allowEmpty: boolean = true;\n  @Input() useGrouping: boolean = true;\n  @Input() showButtons: boolean = false;\n  @Input() buttonLayout: 'stacked' | 'horizontal' | 'vertical' = 'stacked';\n  @Input() incrementButtonIcon: string = 'freud-icon freud-icon-chevron-up';\n  @Input() decrementButtonIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() locale!: string;\n  @Input() localeMatcher: \"lookup\" | \"best fit\" = 'best fit';\n  @Input() mode: \"decimal\" | \"currency\" = \"decimal\";\n  @Input() currencyDisplay: string = \"symbol\";\n  @Input() currency!: string;\n  @Input() prefix!: string;\n  @Input() suffix!: string;\n  @Input() minFractionDigits!: number;\n  @Input() maxFractionDigits!: number;\n  @Input() min!: number;\n  @Input() max!: number;\n  @Input() step: number = 1;\n\n  @Input() placeholder: string = '';\n  @Input() invalid: boolean = false;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\n\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n\n  private _value!: string;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.modelValueChange();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-input-number:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-input-number.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-input-number {\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-inputnumber:not(.p-inputnumber-buttons-vertical) {\n    width: 100%;\n  }\n\n  .p-inputnumber-button-group .p-inputnumber-button .freud-icon {\n    font-size: 14px;\n  }\n\n  .p-inputnumber-buttons-horizontal .p-inputnumber-input {\n    text-align: center;\n  }\n\n  .p-button.p-button-icon-only {\n    padding: 7px 0;\n  }\n\n  .p-inputtext {\n    height: 40px;\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    &::placeholder {\n      color: $feedback-color-negative-04;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n  .p-button:hover {\n    background: $brand-color-03;\n    border-radius: $border-radius-md;\n    border: 1px solid $brand-color-03;\n  }\n  .p-button {\n    border-radius: $border-radius-md;\n    background-color: $brand-color-pure;\n    border: 1px solid $brand-color-pure;\n  }\n}\n\n",
                    "styleUrl": "./input-number.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 124,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                }
            }
        },
        {
            "name": "FreudInputPasswordComponent",
            "id": "component-FreudInputPasswordComponent-ee2304e49ce3ac064f09b6453d78418c73e2ff030580f561b0765d92ba923b25661f4509d9f627fb59162738b23241a9f2d53d30af5e21c23d869702b2cf4c6d",
            "file": "projects/web-components/src/components/forms/input-password/input-password.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputPasswordComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-password",
            "styleUrls": [
                "./input-password.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <p-password\n      [id]=\"id\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder || ''\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      [toggleMask]=\"toggleMask\"\n      [feedback]=\"feedback\"\n\n      [promptLabel]=\"promptLabel\"\n      [mediumRegex]=\"mediumRegex\"\n      [strongRegex]=\"strongRegex\"\n      [weakLabel]=\"weakLabel\"\n      [mediumLabel]=\"mediumLabel\"\n      [strongLabel]=\"strongLabel\"\n\n      (ngModelChange)=\"modelValueChange()\"\n      (focus)=\"onFocus.emit($event)\"\n      (blur)=\"onBlur.emit($event)\"\n      (input)=\"onInput.emit($event)\"\n      (keydown)=\"onKeydown.emit($event)\">\n        <ng-template pTemplate=\"header\">\n          <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n        </ng-template>\n        <ng-template pTemplate=\"footer\">\n          <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n        </ng-template>\n    </p-password>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "feedback",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headerLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumRegex",
                    "defaultValue": "'^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "strongRegex",
                    "defaultValue": "'^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "toggleMask",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 95
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-input-password',\n  styleUrls: ['./input-password.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n        <p-password\n          [id]=\"id\"\n          [class.ng-invalid]=\"invalid\"\n          [class.ng-dirty]=\"invalid\"\n          [(ngModel)]=\"value\"\n          [placeholder]=\"placeholder || ''\"\n          [disabled]=\"disabled\"\n          [required]=\"required\"\n          [toggleMask]=\"toggleMask\"\n          [feedback]=\"feedback\"\n\n          [promptLabel]=\"promptLabel\"\n          [mediumRegex]=\"mediumRegex\"\n          [strongRegex]=\"strongRegex\"\n          [weakLabel]=\"weakLabel\"\n          [mediumLabel]=\"mediumLabel\"\n          [strongLabel]=\"strongLabel\"\n\n          (ngModelChange)=\"modelValueChange()\"\n          (focus)=\"onFocus.emit($event)\"\n          (blur)=\"onBlur.emit($event)\"\n          (input)=\"onInput.emit($event)\"\n          (keydown)=\"onKeydown.emit($event)\">\n            <ng-template pTemplate=\"header\">\n              <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n            </ng-template>\n            <ng-template pTemplate=\"footer\">\n              <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n            </ng-template>\n        </p-password>\n    </div>\n  `,\n  host: {\n    class: 'freud-input-password',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudInputPasswordComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudInputPasswordComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() placeholder: string = '';\n  @Input() promptLabel!: string;\n  @Input() mediumRegex: string = '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).';\n  @Input() strongRegex: string = '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})';\n  @Input() weakLabel!: string;\n  @Input() mediumLabel!: string;\n  @Input() strongLabel!: string;\n  @Input() headerLabel!: string;\n  @Input() invalid: boolean = false;\n  @Input() toggleMask: boolean = true;\n  @Input() feedback: boolean = true;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\n\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n\n  private _value!: string;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.modelValueChange();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-input-password:not(.freud-bgcolor) {\n  .freud-label {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-input-password.freud-bgcolor {\n  .freud-label {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-input-password {\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-password {\n    width: 100%;\n  }\n\n  hr {\n    border: 1px solid $neutral-color-light-03;\n  }\n\n  .p-inputtext {\n    height: 40px;\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    &::placeholder {\n      color: $feedback-color-negative-04;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n\n  .p-password-panel {\n    border-radius: $border-radius-md;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n    color: $neutral-color-dark-03;\n    box-shadow: $shadow-level-3;\n  }\n\n  .p-password-panel .p-password-meter {\n    margin-bottom: 0.5rem;\n    background: $neutral-color-light-03;\n  }\n  .p-password-panel .p-password-meter .p-password-strength.weak {\n    background: $feedback-color-negative-03;\n  }\n  .p-password-panel .p-password-meter .p-password-strength.medium {\n    background: $feedback-color-warning-03;\n  }\n  .p-password-panel .p-password-meter .p-password-strength.strong {\n    background: $feedback-color-positive-03;\n  }\n}\n\n",
                    "styleUrl": "./input-password.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                }
            }
        },
        {
            "name": "FreudInputTextAreaComponent",
            "id": "component-FreudInputTextAreaComponent-5ade15f8b9e06a68fa3c83bafe9867f5b1ef81805f0c89f64b72bc0c52605ddeaf4ce6de08b299d6c2ce006d57ed3479fa328ba320ace86c7b94d0bd1eb016d0",
            "file": "projects/web-components/src/components/forms/input-textarea/input-textarea.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputTextAreaComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-textarea",
            "styleUrls": [
                "./input-textarea.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <textarea\n      [id]=\"id\"\n      type=\"text\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      [(ngModel)]=\"value\"\n      [rows]=\"rows\"\n      [cols]=\"cols\"\n      [autoResize]=\"autoResize\"\n      pInputTextarea\n      [placeholder]=\"placeholder || ''\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      (focus)=\"onFocus.emit($event)\"\n      (blur)=\"onBlur.emit($event)\"\n      (input)=\"onInput.emit($event)\"\n      (keydown)=\"onKeydown.emit($event)\"\n    ></textarea>\n  <small id=\"{{id}}-help\"\n         [class.disabled]=\"disabled\"\n         class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoResize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-input-textarea',\n  styleUrls: ['./input-textarea.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n        <textarea\n          [id]=\"id\"\n          type=\"text\"\n          [class.ng-invalid]=\"invalid\"\n          [class.ng-dirty]=\"invalid\"\n          [(ngModel)]=\"value\"\n          [rows]=\"rows\"\n          [cols]=\"cols\"\n          [autoResize]=\"autoResize\"\n          pInputTextarea\n          [placeholder]=\"placeholder || ''\"\n          [disabled]=\"disabled\"\n          [required]=\"required\"\n          (focus)=\"onFocus.emit($event)\"\n          (blur)=\"onBlur.emit($event)\"\n          (input)=\"onInput.emit($event)\"\n          (keydown)=\"onKeydown.emit($event)\"\n        ></textarea>\n      <small id=\"{{id}}-help\"\n             [class.disabled]=\"disabled\"\n             class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n    </div>\n  `,\n  host: {\n    class: 'freud-input-textarea',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudInputTextAreaComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudInputTextAreaComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() helpText: string = '';\n  @Input() placeholder: string = '';\n  @Input() cols!: number;\n  @Input() rows!: number;\n  @Input() invalid: boolean = false;\n  @Input() autoResize: boolean = false;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id!: string;\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\n\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  private _value!: string;\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onChange(this._value);\n    this.onTouched();\n    this.valueChange.emit(v);\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onChange: any = () => { };\n\n  onTouched: any = () => { };\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-input-textarea:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-input-textarea.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-input-textarea {\n  .help-text {\n    margin-top: $spacing-size-quark;\n  }\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-inputtext {\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    &::placeholder {\n      color: $feedback-color-negative-04;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n}\n\n",
                    "styleUrl": "./input-textarea.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                }
            }
        },
        {
            "name": "FreudInputTextComponent",
            "id": "component-FreudInputTextComponent-500a838c5bff94aa9c5c77884e74d888f5634298f39de35e63d312c2add516c45e35067407b6dc7dc529e89300c2125ee1bf84ea53ed8449d8ca4ce4d640b5e2",
            "file": "projects/web-components/src/components/forms/input-text/input-text.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputTextComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-text",
            "styleUrls": [
                "./input-text.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <span [class.p-input-icon-right]=\"rightIcon\">\n      <i class=\"{{rightIcon}}\" *ngIf=\"rightIcon\"></i>\n      <input\n        [id]=\"id\"\n        type=\"text\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        pInputText\n        [(ngModel)]=\"value\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        (ngModelChange)=\"modelValueChange()\"\n        (focus)=\"onFocus.emit($event)\"\n        (blur)=\"onBlur.emit($event)\"\n        (input)=\"onInput.emit($event)\"\n        (keydown)=\"onKeydown.emit($event)\"\n      />\n    </span>\n  <small [class.disabled]=\"disabled\"\n         class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rightIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-input-text',\n  styleUrls: ['./input-text.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n        <span [class.p-input-icon-right]=\"rightIcon\">\n          <i class=\"{{rightIcon}}\" *ngIf=\"rightIcon\"></i>\n          <input\n            [id]=\"id\"\n            type=\"text\"\n            [class.ng-invalid]=\"invalid\"\n            [class.ng-dirty]=\"invalid\"\n            pInputText\n            [(ngModel)]=\"value\"\n            [placeholder]=\"placeholder || ''\"\n            [disabled]=\"disabled\"\n            [required]=\"required\"\n            (ngModelChange)=\"modelValueChange()\"\n            (focus)=\"onFocus.emit($event)\"\n            (blur)=\"onBlur.emit($event)\"\n            (input)=\"onInput.emit($event)\"\n            (keydown)=\"onKeydown.emit($event)\"\n          />\n        </span>\n      <small [class.disabled]=\"disabled\"\n             class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n    </div>\n  `,\n  host: {\n    class: 'freud-input-text',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudInputTextComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudInputTextComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() helpText: string = '';\n  @Input() placeholder: string = '';\n  @Input() rightIcon!: string;\n  @Input() invalid: boolean = false;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id: string = Math.random().toString(36).substring(2);\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\n\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\n\n  private _value!: string;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.modelValueChange();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-input-text:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-input-text.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-input-text {\n  .help-text {\n    margin-top: $spacing-size-quark;\n  }\n  .p-input-icon-left>i, .p-input-icon-right>i {\n    margin-top: -10px;\n    font-size: 24px;\n  }\n\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-inputtext {\n    height: 40px;\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    &::placeholder {\n      color: $feedback-color-negative-04;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n}\n\n",
                    "styleUrl": "./input-text.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                }
            }
        },
        {
            "name": "FreudKnobComponent",
            "id": "component-FreudKnobComponent-4f42f07abdef731ada1836a0e793a1abf18efc5667791bce90e1f64bbbdc053f05f308f72244395a3660ac9c6022760fb658505a11dc62a672ffa7f7adfb24a5",
            "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-knob",
            "styleUrls": [
                "./knob.component.scss"
            ],
            "styles": [],
            "template": "<p-knob\n  [(ngModel)]=\"value\"\n  (onChange)=\"onChangeValue($event)\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [size]=\"size === 'large' ? 200 : 100\"\n  [step]=\"step\"\n  [valueColor]=\"bgColor ? 'white' : '#6732D1'\"\n  [rangeColor]=\"bgColor ? '#5127A4' : '#F0F2F5'\"\n  [textColor]=\"bgColor ? 'white' : '#6B7280'\"\n  [disabled]=\"disabled\"></p-knob>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "sizes",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChangeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';\n\ntype sizes = 'default' | 'large';\n@Component({\n  selector: 'freud-knob',\n  template: `\n    <p-knob\n      [(ngModel)]=\"value\"\n      (onChange)=\"onChangeValue($event)\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [size]=\"size === 'large' ? 200 : 100\"\n      [step]=\"step\"\n      [valueColor]=\"bgColor ? 'white' : '#6732D1'\"\n      [rangeColor]=\"bgColor ? '#5127A4' : '#F0F2F5'\"\n      [textColor]=\"bgColor ? 'white' : '#6B7280'\"\n      [disabled]=\"disabled\"></p-knob>\n  `,\n  styleUrls: ['./knob.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-knob freud-typography',\n    '[class.freud-knob-bgcolor]': `bgColor`,\n    '[class.h1Regular1-2]': `size === 'large'`,\n    '[class.h5Regular1-2]': `size === 'default'`,\n  }\n})\nexport class FreudKnobComponent {\n\n  @Input() value: number = 0;\n  @Input() max: number = 100;\n  @Input() min: number = 0;\n  @Input() step: number = 1;\n  @Input() size: sizes = 'default';\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Output() valueChange: EventEmitter<number> = new EventEmitter<number>();\n\n  onChangeValue(value: number) {\n    this.value = value;\n    this.valueChange.emit(this.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/typography';\n\n",
                    "styleUrl": "./knob.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudListboxComponent",
            "id": "component-FreudListboxComponent-d849697f89b5a2f05fda9957434657ecf79aada35234c65497be04ea03ceb9c9b9c06c1d0aeebb54b2d49f5520ea60729926d72f1207e685016194b85972c640",
            "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudListboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-listbox",
            "styleUrls": [
                "./listbox.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <p-listbox\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [checkbox]=\"checkbox\"\n    [filter]=\"filter\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [group]=\"group\"\n    [multiple]=\"multiple\"\n    [emptyFilterMessage]=\"emptyFilterMessage\"\n    [emptyMessage]=\"emptyMessage\"\n    [showToggleAll]=\"showToggleAll\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    [filterPlaceHolder]=\"filterPlaceHolder\"\n    (onDblClick)=\"onDblClick.emit($event)\"\n    (onClick)=\"onClick.emit($event)\"\n    (onChange)=\"onChange.emit($event)\">\n  </p-listbox>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "checkbox",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "emptyFilterMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterMatchMode",
                    "defaultValue": "'contains'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "listboxFilterMatchModes",
                    "decorators": []
                },
                {
                    "name": "filterPlaceHolder",
                    "defaultValue": "'Filtrar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showToggleAll",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onDblClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filterValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\nexport type listboxFilterMatchModes = \"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\";\n\n@Component({\n  selector: 'freud-listbox',\n  styleUrls: ['./listbox.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <p-listbox\n        [id]=\"id\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [checkbox]=\"checkbox\"\n        [filter]=\"filter\"\n        [optionLabel]=\"optionLabel\"\n        [optionValue]=\"optionValue\"\n        [optionDisabled]=\"optionDisabled\"\n        [optionGroupLabel]=\"optionGroupLabel\"\n        [optionGroupChildren]=\"optionGroupChildren\"\n        [group]=\"group\"\n        [multiple]=\"multiple\"\n        [emptyFilterMessage]=\"emptyFilterMessage\"\n        [emptyMessage]=\"emptyMessage\"\n        [showToggleAll]=\"showToggleAll\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        [options]=\"options\"\n        [filterPlaceHolder]=\"filterPlaceHolder\"\n        (onDblClick)=\"onDblClick.emit($event)\"\n        (onClick)=\"onClick.emit($event)\"\n        (onChange)=\"onChange.emit($event)\">\n      </p-listbox>\n    </div>\n  `,\n  host: {\n    class: 'freud-listbox',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudListboxComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudListboxComponent implements ControlValueAccessor {\n  @Input() checkbox: boolean = false;\n  @Input() options!: any[];\n  @Input() showToggleAll: boolean = true;\n  @Input() group!: boolean;\n  @Input() filterPlaceHolder: string = 'Filtrar';\n  @Input() filter: boolean = false;\n  @Input() invalid: boolean = false;\n  @Input() multiple: boolean = false;\n  @Input() emptyFilterMessage: string = 'Sem resultados';\n  @Input() emptyMessage: string = 'Sem resultados';\n  @Input() filterMatchMode: listboxFilterMatchModes = 'contains';\n  @Input() optionLabel!: string;\n  @Input() optionValue!: string;\n  @Input() optionDisabled: string = 'disabled';\n  @Input() optionGroupLabel: string = 'label';\n  @Input() optionGroupChildren: string = 'items';\n  @Input() characterPattern: string = '';\n  @Input() autoClear: boolean = true;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id!: string;\n\n  @Output() onDblClick: EventEmitter<any> = new EventEmitter();\n  @Output() onClick: EventEmitter<any> = new EventEmitter();\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  filterValue = '';\n\n  private _value!: any;\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onModelChange: any = () => { };\n\n  onModelTouched: any = () => { };\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.valueChange.emit(v);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n\n.freud-listbox {\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n\n  .p-inputtext {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-listbox {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n    border-radius: $border-radius-md;\n    border: unset;\n    width: 100%;\n    box-shadow: $shadow-level-3;\n  }\n\n  .p-listbox:not(.p-disabled) .p-listbox-item:not(.p-highlight):not(.p-disabled):hover {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .p-listbox .p-listbox-list .p-listbox-item {\n    color: $neutral-color-dark-03;\n  }\n  .p-listbox .p-listbox-list .p-listbox-item:focus {\n    box-shadow: unset;\n  }\n\n  .p-listbox .p-listbox-list .p-listbox-item.p-highlight {\n    color: $brand-color-pure;\n    background-color: $brand-color-01;\n  }\n\n  // Input\n  .p-inputtext {\n    height: 40px;\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n\n  .p-listbox .p-listbox-header {\n    background-color: $neutral-color-light-01;\n  }\n\n  // Checkbox\n  .p-checkbox .p-checkbox-box.p-highlight,\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n  }\n\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\n    border-color: $brand-color-pure;\n  }\n\n}\n\n",
                    "styleUrl": "./listbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 112
                    }
                }
            }
        },
        {
            "name": "FreudLoaderComponent",
            "id": "component-FreudLoaderComponent-da13a9a68b328efc3f26ea409c21f421da9c0d01892ff2547ce6d00299a344202f035862f24b6f4ad5536ca9d15f57c6bc7bddab4e5fc2ace78a61b027152df3",
            "file": "projects/web-components/src/components/feedback/loader/loader.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-loader",
            "styleUrls": [
                "./loader.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"spinner\">\n  <div></div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'sm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "loaderSizes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, Input, ViewEncapsulation } from '@angular/core';\n\ntype loaderSizes = 'sm' | 'lg';\n\n@Component({\n  selector: 'freud-loader',\n  styleUrls: ['./loader.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"spinner\">\n      <div></div>\n    </div>\n  `,\n  host: {\n    class: 'freud-loader',\n    '[class.freud-loader-size-small]': `size === 'sm'`,\n    '[class.freud-loader-size-large]': `size === 'lg'`,\n    '[class.freud-loader-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudLoaderComponent {\n\n  @Input() size: loaderSizes = 'sm';\n  @Input() bgColor = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/styles.scss';\n\n@keyframes spin {\n  to { transform: rotate(1turn); }\n}\n\n.freud-loader {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.freud-loader .spinner {\n  position: relative;\n  display: inline-block;\n  width: 5em;\n  height: 5em;\n  font-size: 8px;\n  text-indent: 999em;\n  overflow: hidden;\n  animation: spin 0.8s infinite steps(8);\n}\n\n.freud-loader-size {\n  &-small .spinner {\n    font-size: 4px;\n  }\n\n  &-large .spinner {\n    font-size: 8px;\n  }\n}\n\n.spinner:before,\n.spinner:after,\n.spinner > div:before,\n.spinner > div:after {\n  content: '';\n  position: absolute;\n  top: 0;\n  left: 2.35em; /* (largura - largura da barra)/2  */\n  width: .3em;\n  height: 1.2em;\n  border-radius: .2em;\n  background: $brand-color-pure;\n  box-shadow: 0 3.8em $brand-color-01; /* altura - altura da barra */\n  transform-origin: 50% 2.5em; /* altura / 2 */\n}\n\n.freud-loader.freud-loader-bgcolor {\n  .spinner:before,\n  .spinner:after,\n  .spinner > div:before,\n  .spinner > div:after {\n    background: $neutral-color-white; /* altura - altura da barra */\n    box-shadow: 0 3.8em $brand-color-02; /* altura / 2 */\n  }\n}\n\n.spinner:after {\n  transform: rotate(-45deg);\n}\n\n.spinner > div:before {\n  transform: rotate(-90deg);\n}\n\n.spinner > div:after {\n  transform: rotate(-135deg);\n}\n",
                    "styleUrl": "./loader.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudMenubarComponent",
            "id": "component-FreudMenubarComponent-ad9a9fa09035acd07b38592ae8650c9c6fd59a866f6b1a1c0ee7943778db13d4b57db5d25c0c955964c212b790ceb15d76fcbf0e946bf1c7511cfecfb5e96c2c",
            "file": "projects/web-components/src/components/structure/menubar/menubar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-menubar",
            "styleUrls": [
                "./menubar.component.scss"
            ],
            "styles": [],
            "template": "<p-menubar [model]=\"items\" [autoDisplay]=\"autoDisplay\">\n  <ng-template pTemplate=\"start\">\n    <a class=\"menubar-home-logo\" [href]=\"startImgHref\">\n      <img [src]=\"startImgSrc\" height=\"32\" class=\"mr-2\" [alt]=\"startImgAlt\">\n    </a>\n  </ng-template>\n</p-menubar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoDisplay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "startImgAlt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "startImgHref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "startImgSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\n@Component({\n  selector: 'freud-menubar',\n  template: `\n    <p-menubar [model]=\"items\" [autoDisplay]=\"autoDisplay\">\n      <ng-template pTemplate=\"start\">\n        <a class=\"menubar-home-logo\" [href]=\"startImgHref\">\n          <img [src]=\"startImgSrc\" height=\"32\" class=\"mr-2\" [alt]=\"startImgAlt\">\n        </a>\n      </ng-template>\n    </p-menubar>\n  `,\n  styleUrls: ['./menubar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-menubar',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudMenubarComponent {\n  @Input() items!: FreudMenuItem[];\n  @Input() startImgSrc!: string;\n  @Input() startImgAlt!: string;\n  @Input() startImgHref!: string;\n  @Input() bgColor: boolean = false;\n  @Input() autoDisplay: boolean = false;\n  @Output() onItemClick: EventEmitter<any> = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n\n.freud-menubar:not(.freud-bgcolor) {\n  .p-menubar {\n    background-color: $neutral-color-white;\n  }\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-text,\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-submenu-icon,\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-icon {\n    color: $neutral-color-dark-03;\n    user-select: unset;\n  }\n\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover {\n    @media screen and (min-width: 961px) {\n      background-color: $neutral-color-light-02;\n    }\n  }\n\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-submenu-icon {\n    @media screen and (min-width: 961px) {\n      color: $brand-color-pure !important;\n    }\n  }\n\n  @media screen and (max-width: 960px) {\n    .p-menubar .p-menubar-button:focus {\n      box-shadow: unset;\n    }\n  }\n}\n.freud-menubar.freud-bgcolor {\n  .p-menubar {\n    background-color: $brand-color-pure;\n  }\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-text,\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-submenu-icon,\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-icon,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-text,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-icon,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-submenu-icon,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-submenu-icon {\n    @media screen and (min-width: 961px) {\n      color: $neutral-color-white;\n    }\n  }\n\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link,\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover {\n    @media screen and (min-width: 961px) {\n      background-color: $brand-color-03;\n    }\n  }\n\n  @media screen and (max-width: 960px) {\n    .p-menubar .p-menubar-button {\n      color: $neutral-color-white;\n    }\n    .p-menubar .p-menubar-button:focus {\n      box-shadow: unset;\n    }\n\n    .p-menubar .p-menubar-button:hover {\n      background-color: $brand-color-03;\n    }\n\n  }\n}\n.p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:focus {\n  box-shadow: unset;\n}\n\n.freud-menubar {\n  .p-menubar {\n    border: unset;\n    height: 60px;\n    padding: 0 $spacing-size-xxs;\n    border-radius: 0;\n  }\n  .menubar-home-logo {\n    text-align: center;\n    display: flex;\n  }\n\n  p-menubarsub {\n    width: 100%;\n    ul {\n      float: right;\n    }\n  }\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link {\n    height: 60px;\n    border-radius: 0;\n    @include typography($font-size-xxs, $font-weight-regular, auto);\n  }\n\n  .p-menubar .p-submenu-list .p-menuitem.p-menuitem-active > .p-menuitem-link,\n  .p-menubar .p-submenu-list .p-menuitem.p-menuitem-active > .p-menuitem-link span.p-submenu-icon,\n  .p-menubar .p-submenu-list .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-icon,\n  .p-menubar .p-submenu-list .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-text {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .p-menubar .p-menuitem.p-menuitem-active > .p-menuitem-link .p-submenu-icon {\n    font-size: 14px;\n  }\n\n  .p-menubar .p-menuitem > .p-menuitem-link .p-menuitem-icon {\n    font-size: 14px;\n    color: $neutral-color-dark-02;\n  }\n\n  @media screen and (min-width: 961px) {\n    .p-menubar .p-submenu-list {\n      border-radius: $border-radius-md;\n      border: unset;\n      box-shadow: $shadow-level-3;\n    }\n  }\n\n  .p-menubar .p-menuitem-link:focus {\n    box-shadow: unset;\n  }\n\n  @media screen and (max-width: 960px) {\n    .p-menubar-root-list {\n      border-radius: $border-radius-md;\n      border: unset;\n      box-shadow: $shadow-level-3;\n    }\n\n    .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\n    .p-menubar .p-menuitem-link:not(.p-disabled):hover,\n    .p-menubar .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\n    .p-menubar .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text {\n      background-color: $brand-color-01;\n      color: $brand-color-pure;\n    }\n  }\n}\n\n\n@media screen and (max-width: 960px) {\n  .menubar-home-logo {\n    display: none !important;\n  }\n}\n",
                    "styleUrl": "./menubar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudMenuComponent",
            "id": "component-FreudMenuComponent-26d0879d792f4e65763e145bd77456305941f750f4f760a65cc805e245495fb89c01b615827a84b8f3ae49604c86cabea6ad7548edbb34b542cf1daf535f7d92",
            "file": "projects/web-components/src/components/structure/menu/menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "template": "<p-menu\n  #pMenu\n  [model]=\"items\"\n  [appendTo]=\"appendTo\"\n  [popup]=\"popup\"\n  (onHide)=\"onHide.emit($event)\"\n  (onShow)=\"onShow.emit($event)\"\n></p-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "popup",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "reference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pMenu'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\n@Component({\n  selector: 'freud-menu',\n  template: `\n    <p-menu\n      #pMenu\n      [model]=\"items\"\n      [appendTo]=\"appendTo\"\n      [popup]=\"popup\"\n      (onHide)=\"onHide.emit($event)\"\n      (onShow)=\"onShow.emit($event)\"\n    ></p-menu>\n  `,\n  styleUrls: ['./menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-menu',\n  }\n})\nexport class FreudMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @Input() popup: boolean = false;\n  @Input() appendTo!: string;\n\n  @Output() onShow: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onHide: EventEmitter<any> = new EventEmitter<any>();\n  @ViewChild('pMenu') reference!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-menu {\n  .p-menu .p-menuitem-link .p-menuitem-text {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-regular, 16px);\n  }\n\n  .p-menu .p-submenu-header {\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n    color: $neutral-color-dark-03;\n  }\n\n  .p-menu .p-menuitem-link:not(.p-disabled):hover {\n    background-color: $brand-color-01;\n  }\n\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon {\n    color: $brand-color-pure;\n  }\n\n  .p-menu .p-menuitem-link:focus {\n    box-shadow: unset;\n  }\n\n  .p-menu {\n    border-radius: $border-radius-md;\n    border: unset;\n    box-shadow: $shadow-level-3;\n  }\n\n  .freud-icon {\n    font-size: 14px;\n  }\n\n}\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudMultiSelectComponent",
            "id": "component-FreudMultiSelectComponent-ec4c1651eeb26cf95033e7dcb8568276f62c1a55c314dd0ca1766fce7a0ff65e2d3ac311d95acdd2b9d519eefcbf608f39b328db71916f93494b1b0d32a82072",
            "file": "projects/web-components/src/components/forms/multi-select/multi-select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudMultiSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-multi-select",
            "styleUrls": [
                "./multi-select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-multiSelect\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [display]=\"display\"\n    [options]=\"options\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onFilter)=\"onFilter.emit($event)\"\n    (onPanelShow)=\"onPanelShow.emit($event)\"\n    (onPanelHide)=\"onPanelHide.emit($event)\"\n  ></p-multiSelect>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "display",
                    "defaultValue": "'comma'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "\"comma\" | \"chip\"",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPanelHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPanelShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 114
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-multi-select',\n  styleUrls: ['./multi-select.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-multiSelect\n        [id]=\"id\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [optionLabel]=\"optionLabel\"\n        [optionValue]=\"optionValue\"\n        [optionDisabled]=\"optionDisabled\"\n        [optionGroupLabel]=\"optionGroupLabel\"\n        [optionGroupChildren]=\"optionGroupChildren\"\n        [placeholder]=\"placeholder || ''\"\n        [virtualScroll]=\"virtualScroll\"\n        [dropdownIcon]=\"dropdownIcon\"\n        [emptyMessage]=\"emptyMessage\"\n        [itemSize]=\"itemSize\"\n        [disabled]=\"disabled\"\n        [display]=\"display\"\n        [options]=\"options\"\n        (onFocus)=\"onFocus.emit($event)\"\n        (onBlur)=\"onBlur.emit($event)\"\n        (onChange)=\"onChange.emit($event)\"\n        (onFilter)=\"onFilter.emit($event)\"\n        (onPanelShow)=\"onPanelShow.emit($event)\"\n        (onPanelHide)=\"onPanelHide.emit($event)\"\n      ></p-multiSelect>\n      <small\n        [class.disabled]=\"disabled\"\n        *ngIf=\"helpText\"\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n    </div>\n  `,\n  host: {\n    class: 'freud-multi-select',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudMultiSelectComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudMultiSelectComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() options!: any[];\n  @Input() helpText: string = '';\n  @Input() placeholder: string = '';\n  @Input() invalid: boolean = false;\n  @Input() virtualScroll: boolean = false;\n  @Input() itemSize!: number;\n  @Input() emptyMessage: string = 'Sem resultados';\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() optionLabel!: string;\n  @Input() optionValue!: string;\n  @Input() optionDisabled: string = 'disabled';\n  @Input() optionGroupLabel: string = 'label';\n  @Input() optionGroupChildren: string = 'items';\n  @Input() characterPattern: string = '';\n  @Input() display: 'comma' | 'chip' = 'comma';\n  @Input() autoClear: boolean = true;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id!: string;\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\n  @Output() onPanelShow: EventEmitter<any> = new EventEmitter();\n  @Output() onPanelHide: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  private _value!: any;\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onModelChange: any = () => { };\n\n  onModelTouched: any = () => { };\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.valueChange.emit(v);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-multi-select:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-multi-select.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-multi-select {\n  .help-text {\n    margin-top: $spacing-size-quark;\n  }\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-inputtext {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-multiselect {\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-multiselect:not(.p-disabled).p-focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-multiselect:not(.p-disabled):hover {\n    border-color: $brand-color-pure;\n  }\n  .p-multiselect .p-multiselect-panel {\n    border-radius: $border-radius-md;\n    box-shadow: $shadow-level-3;\n    margin-top: 1px;\n  }\n\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item {\n    padding: 12px 1rem;\n    color: $neutral-color-dark-03;\n    transition: box-shadow 0.2s;\n    border-radius: 0;\n  }\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item:not(.p-highlight):not(.p-disabled):hover {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .p-multiselect-panel .p-multiselect-header {\n    border-top-right-radius: $border-radius-md;\n    border-top-left-radius: $border-radius-md;\n  }\n\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item.p-highlight {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .p-checkbox .p-checkbox-box.p-highlight,\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n  }\n\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\n    border-color: $brand-color-pure;\n  }\n\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item:focus {\n    box-shadow: unset;\n  }\n\n  // Input\n  .p-inputtext {\n    height: 40px;\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n    &::placeholder {\n      color: $neutral-color-dark-02;\n      opacity: 1;\n      @include typography($font-size-xs, $font-weight-regular, 24px);\n    }\n  }\n\n  .p-inputtext:enabled:focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-inputtext:enabled:hover {\n    border-color: $brand-color-pure;\n  }\n  .p-multiselect-panel .p-multiselect-header {\n    background-color: $neutral-color-light-01;\n    border-bottom: 1px solid $neutral-color-light-03;\n  }\n\n  // Chip\n  .p-multiselect.p-multiselect-chip .p-multiselect-token {\n    padding: 0.25rem 0.5rem;\n    margin-right: 0.5rem;\n    @include typography($font-size-xxs, $font-weight-regular, 21px);\n    background: $brand-color-01;\n    color: $brand-color-pure;\n    border-radius: $border-radius-md;\n  }\n}\n\n",
                    "styleUrl": "./multi-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 124,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                }
            }
        },
        {
            "name": "FreudPaginatorComponent",
            "id": "component-FreudPaginatorComponent-c372f6c1fc980daaf03d2794372c7704bffea1f7a4c73c33b009211d34ca3009aa93e9c2784660176440c9285e22497eb2b9951dc716de378dad1db601a94c28",
            "file": "projects/web-components/src/components/others/paginator/paginator.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "template": "<p-paginator\n  [totalRecords]=\"totalRecords\"\n  [rows]=\"rows\"\n  [first]=\"first\"\n  [alwaysShow]=\"alwaysShow\"\n  [showFirstLastIcon]=\"showFirstLastIcon\"\n  [pageLinkSize]=\"pageLinkSize\"\n  [currentPageReportTemplate]=\"currentPageReportTemplate\"\n  [showCurrentPageReport]=\"showCurrentPageReport\"\n  (onPageChange)=\"onPageChange.emit($event)\">\n</p-paginator>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alwaysShow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "currentPageReportTemplate",
                    "defaultValue": "'({currentPage} de {totalPages})'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "first",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageLinkSize",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showCurrentPageReport",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showFirstLastIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-paginator',\n  template: `\n    <p-paginator\n      [totalRecords]=\"totalRecords\"\n      [rows]=\"rows\"\n      [first]=\"first\"\n      [alwaysShow]=\"alwaysShow\"\n      [showFirstLastIcon]=\"showFirstLastIcon\"\n      [pageLinkSize]=\"pageLinkSize\"\n      [currentPageReportTemplate]=\"currentPageReportTemplate\"\n      [showCurrentPageReport]=\"showCurrentPageReport\"\n      (onPageChange)=\"onPageChange.emit($event)\">\n    </p-paginator>\n  `,\n  styleUrls: ['./paginator.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-paginator',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudPaginatorComponent {\n\n  @Input() totalRecords: number = 0;\n  @Input() rows: number = 0;\n  @Input() first: number = 0;\n  @Input() pageLinkSize: number = 5;\n  @Input() bgColor: boolean = false;\n  @Input() showCurrentPageReport: boolean = false;\n  @Input() currentPageReportTemplate: string = '({currentPage} de {totalPages})';\n  @Input() showFirstLastIcon: boolean = true;\n  @Input() alwaysShow: boolean = true;\n  @Output() onPageChange = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-paginator {\n  .p-link:focus {\n    box-shadow: unset;\n  }\n  .p-paginator .p-paginator-pages .p-paginator-page {\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n  .p-paginator .p-paginator-pages .p-paginator-page:not(.p-highlight):hover,\n  .p-paginator .p-paginator-first:not(.p-disabled):not(.p-highlight):hover,\n  .p-paginator .p-paginator-prev:not(.p-disabled):not(.p-highlight):hover,\n  .p-paginator .p-paginator-next:not(.p-disabled):not(.p-highlight):hover,\n  .p-paginator .p-paginator-last:not(.p-disabled):not(.p-highlight):hover {\n    background-color: $brand-color-03;\n    color: $neutral-color-white;\n    border-radius: 50%;\n  }\n}\n\n.freud-paginator:not(.freud-bgcolor) {\n  .p-paginator .p-paginator-pages .p-paginator-page {\n    color: $neutral-color-dark-02;\n  }\n  .p-paginator .p-paginator-first,\n  .p-paginator .p-paginator-last {\n    color: $neutral-color-black;\n  }\n  .p-paginator .p-paginator-pages .p-paginator-page.p-highlight {\n    background-color: transparent;\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n    color: $brand-color-pure;\n  }\n}\n\n.freud-paginator.freud-bgcolor {\n  .p-paginator {\n    background-color: transparent;\n  }\n\n  .p-paginator .p-paginator-pages .p-paginator-page {\n    color: $neutral-color-white;\n  }\n  .p-paginator .p-paginator-first,\n  .p-paginator .p-paginator-prev,\n  .p-paginator .p-paginator-next,\n  .p-paginator .p-paginator-last {\n    color: $neutral-color-white;\n  }\n  .p-paginator .p-paginator-first,\n  .p-paginator .p-paginator-last {\n    color: $neutral-color-white;\n  }\n  .p-paginator .p-paginator-pages .p-paginator-page.p-highlight {\n    background-color: transparent;\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n    color: $brand-color-03;\n  }\n}\n",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudPanelComponent",
            "id": "component-FreudPanelComponent-1ba04c8eec8ea3455e1c0da8f576c0f2f30ff250a48cfad9992be496c670dae4c5d9ae3da3ec4462d71d744528c0a9f781838fe16127bee984961f9015578796",
            "file": "projects/web-components/src/components/structure/panel/panel.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "template": "<p-panel\n  [header]=\"header\"\n  [collapsed]=\"collapsed\"\n  [expandIcon]=\"expandIcon\"\n  [showHeader]=\"showHeader\"\n  [toggler]=\"toggler\"\n  [style]=\"style\"\n  [collapseIcon]=\"collapseIcon\"\n  [toggleable]=\"toggleable\"\n  (onBeforeToggle)=\"onBeforeToggle.emit($event)\"\n  (onAfterToggle)=\"onAfterToggle.emit($event)\"\n  >\n  <ng-template pTemplate=\"icons\">\n    <ng-content select=\"[freudTemplateIcons]\"></ng-content>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n  </ng-template>\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"footer\">\n    <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n  </ng-template>\n</p-panel>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "collapseIcon",
                    "defaultValue": "'freud-icon freud-icon-minus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "expandIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "toggleable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "toggler",
                    "defaultValue": "'icon'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "\"icon\" | \"header\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAfterToggle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter"
                },
                {
                    "name": "onBeforeToggle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-panel',\n  template: `\n    <p-panel\n      [header]=\"header\"\n      [collapsed]=\"collapsed\"\n      [expandIcon]=\"expandIcon\"\n      [showHeader]=\"showHeader\"\n      [toggler]=\"toggler\"\n      [style]=\"style\"\n      [collapseIcon]=\"collapseIcon\"\n      [toggleable]=\"toggleable\"\n      (onBeforeToggle)=\"onBeforeToggle.emit($event)\"\n      (onAfterToggle)=\"onAfterToggle.emit($event)\"\n      >\n      <ng-template pTemplate=\"icons\">\n        <ng-content select=\"[freudTemplateIcons]\"></ng-content>\n      </ng-template>\n\n      <ng-template pTemplate=\"header\">\n        <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n      </ng-template>\n      <ng-content></ng-content>\n      <ng-template pTemplate=\"footer\">\n        <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n      </ng-template>\n    </p-panel>\n  `,\n  styleUrls: ['./panel.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-panel',\n  }\n})\nexport class FreudPanelComponent {\n\n  @Input() header!: string;\n  @Input() toggleable: boolean = false;\n  @Input() collapsed: boolean = false;\n  @Input() showHeader: boolean = true;\n  @Input() toggler: 'icon' | 'header' = 'icon';\n  @Input() style!: any;\n  @Input() expandIcon: string = 'freud-icon freud-icon-plus';\n  @Input() collapseIcon: string = 'freud-icon freud-icon-minus';\n  @Output() onBeforeToggle = new EventEmitter();\n  @Output() onAfterToggle = new EventEmitter();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-panel {\n  .p-panel .p-panel-header .p-panel-title {\n    font-weight: 700;\n  }\n  .p-panel .p-panel-header .p-panel-header-icon:focus {\n    box-shadow: unset;\n  }\n  .p-toggleable-content {\n    background-color: white;\n  }\n  .p-panel .p-panel-header .p-panel-header-icon,\n  .p-panel-icons .freud-btn:not(.freud-btn-bgcolor).freud-btn-color-ghost .p-button {\n    color: $neutral-color-dark-02;\n  }\n  .p-panel .p-panel-header .p-panel-header-icon:enabled:hover {\n    background: #EEE6FC;\n    border-color: #EEE6FC;\n  }\n  .p-panel-icons freud-button .p-button-label {\n    display: none;\n  }\n  .p-panel .p-panel-header {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-bold, 16px);\n    border-top-right-radius: $border-radius-md;\n    border-top-left-radius: $border-radius-md;\n    background-color: $neutral-color-light-01;\n    border-color: $neutral-color-light-02;\n  }\n  .p-panel .p-panel-content {\n    border-bottom: 0 none;\n    border-color: $neutral-color-light-02;\n    color: $neutral-color-dark-02;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n    border-bottom-right-radius: 0;\n    border-bottom-left-radius: 0;\n  }\n  .p-panel .p-panel-footer {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n    padding: 16px;\n    border-radius: 0 0 $border-radius-md $border-radius-md;\n    border-color: $neutral-color-light-02;\n    color: $neutral-color-dark-04;\n    &:empty {\n      padding: 8px;\n      margin-top: -16px;\n    }\n    &:not(:empty) {\n      border-top: 1px solid $neutral-color-light-02;\n    }\n  }\n}\n",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudPanelMenuComponent",
            "id": "component-FreudPanelMenuComponent-d5ac49791d4bd3d7419f744766f59fda2823a0440281aee4f176672c9ba33f0f6ca1fd26eeac9408289a9c34c464655e78556a17aa29e45dd1d54c85f3344aee",
            "file": "projects/web-components/src/components/structure/panel-menu/panel-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-panel-menu",
            "styleUrls": [
                "./panel-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-panelMenu\n  [model]=\"items\"\n  [style]=\"styleParams\">\n</p-panelMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "styleParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\n@Component({\n  selector: 'freud-panel-menu',\n  template: `\n    <p-panelMenu\n      [model]=\"items\"\n      [style]=\"styleParams\">\n    </p-panelMenu>\n  `,\n  styleUrls: ['./panel-menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-panel-menu'\n  }\n})\nexport class FreudPanelMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @Input() styleParams!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-panel-menu {\n\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link .p-menuitem-icon,\n  .p-panelmenu .p-panelmenu-header > a .p-menuitem-icon {\n    font-size: 14px;\n  }\n\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link .p-menuitem-icon {\n    color: $neutral-color-dark-02;\n  }\n\n  .p-panelmenu .p-panelmenu-panel {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-panelmenu .p-panelmenu-panel:first-child .p-panelmenu-header > a, {\n    border-top-right-radius: $border-radius-md;\n    border-top-left-radius: $border-radius-md;\n  }\n\n  .p-panelmenu .p-panelmenu-panel:last-child .p-panelmenu-header:not(.p-highlight) > a {\n    border-bottom-right-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n  }\n\n  .p-panelmenu .p-panelmenu-header:not(.p-highlight):not(.p-disabled) > a:hover {\n    background-color: $neutral-color-light-01;\n  }\n\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link:not(.p-disabled):hover,\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link:not(.p-disabled):hover span {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .p-panelmenu .p-panelmenu-header:not(.p-highlight) > a {\n    border-radius: $border-radius-md;\n  }\n\n  .p-panelmenu .p-panelmenu-header.p-highlight > a {\n    border-top-right-radius: $border-radius-md;\n    border-top-left-radius: $border-radius-md;\n  }\n\n  .p-panelmenu .p-panelmenu-panel .p-panelmenu-content {\n    border-bottom-right-radius: $border-radius-md;\n    border-bottom-left-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-02;\n  }\n\n  .p-panelmenu .p-panelmenu-header > a {\n    color: $neutral-color-dark-03;\n    border: unset;\n    @include typography($font-size-xs, $font-weight-bold, 16px);\n  }\n\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link .p-menuitem-text {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n\n  .p-panelmenu .p-panelmenu-header > a:focus,\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link:focus {\n    box-shadow: unset;\n  }\n\n}\n",
                    "styleUrl": "./panel-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudProgressBarComponent",
            "id": "component-FreudProgressBarComponent-e578c8ca162299910bd59dbd1863758d22e3074c3bfffdac92f8f9ad714019a566ba2a467b1b29affecb52ae802b94c6bcd894528cde4d36ea4c65e60360bf27",
            "file": "projects/web-components/src/components/feedback/progress-bar/progress-bar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "template": "<p-progressBar\n  [value]=\"value\"\n  [showValue]=\"showValue\"\n  [unit]=\"unit\"\n  [mode]=\"mode\">\n</p-progressBar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'determinate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"determinate\" | \"indeterminate\"",
                    "decorators": []
                },
                {
                    "name": "showValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "unit",
                    "defaultValue": "'%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n  selector: 'freud-progress-bar',\n  template: `\n    <p-progressBar\n      [value]=\"value\"\n      [showValue]=\"showValue\"\n      [unit]=\"unit\"\n      [mode]=\"mode\">\n    </p-progressBar>\n  `,\n  styleUrls: ['./progress-bar.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-progress-bar',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudProgressBarComponent {\n  @Input() value: number = 0;\n  @Input() showValue:\tboolean\t= true;\n  @Input() mode: 'determinate' | 'indeterminate' = 'determinate';\n  @Input() unit: string = '%';\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-progress-bar:not(.freud-bgcolor) {\n  .p-progressbar {\n    background-color: $neutral-color-light-02;\n  }\n  .p-progressbar-value {\n    background-color: $brand-color-pure;\n  }\n  .p-progressbar-determinate .p-progressbar-label {\n    color: $neutral-color-white;\n  }\n}\n.freud-progress-bar.freud-bgcolor {\n  .p-progressbar {\n    background-color: $brand-color-04;\n  }\n  .p-progressbar-value {\n    background-color: $neutral-color-white;\n  }\n  .p-progressbar-determinate .p-progressbar-label {\n    color: $brand-color-05;\n  }\n}\n\n.freud-progress-bar {\n  .p-progressbar {\n    border-radius: $border-radius-md;\n  }\n  .p-progressbar-determinate .p-progressbar-label {\n    @include typography($font-size-xs, $font-weight-regular, 20px);\n  }\n  .p-progressbar-determinate {\n    height: 21px;\n  }\n  .p-progressbar-indeterminate {\n    height: 6px;\n  }\n}\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudProgressSpinnerComponent",
            "id": "component-FreudProgressSpinnerComponent-db31596600bbde38e11d6435fe62bf062b3d97f2ae3459c1eccd64ed8bc33d61d03c6fc05a86dfc0eeb16537c20fb6137e9e00f67aeceaf8f0b7f09ff0cd15e9",
            "file": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-progress-spinner",
            "styleUrls": [
                "./progress-spinner.component.scss"
            ],
            "styles": [],
            "template": "<p-progressSpinner animationDuration=\"1s\"></p-progressSpinner>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n\n@Component({\n  selector: 'freud-progress-spinner',\n  template: `\n    <p-progressSpinner animationDuration=\"1s\"></p-progressSpinner>\n  `,\n  styleUrls: ['./progress-spinner.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-progress-spinner',\n    '[class.freud-progress-spinner-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudProgressSpinnerComponent {\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n@keyframes freud-progress-spinner-color {\n  100%,\n  0% {\n    stroke: $feedback-color-negative-03;\n  }\n  33% {\n    stroke: $feedback-color-warning-03;\n  }\n  66% {\n    stroke: $feedback-color-positive-03;\n  }\n}\n\n.freud-progress-spinner .p-progress-spinner-circle {\n  animation: p-progress-spinner-dash 1.5s ease-in-out infinite, freud-progress-spinner-color 6s ease-in-out infinite;\n\n}\n",
                    "styleUrl": "./progress-spinner.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudRadioButtonComponent",
            "id": "component-FreudRadioButtonComponent-069dae62cab03542a83f5acd4632a74c710f5834cf66517ad89d1410c0b2c0516d2644c60f30b684153d08348b11f972afaa165e0730e6d5835dee82e0f35ddf",
            "file": "projects/web-components/src/components/forms/radio-button/radio-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudRadioButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "template": "<p-radioButton\n  [id]=\"id\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [name]=\"name\"\n  [value]=\"radioValue\"\n  [label]=\"label\"\n  [inputId]=\"inputId\"\n\n  (focus)=\"onFocus.emit($event)\"\n  (blur)=\"onBlur.emit($event)\">\n</p-radioButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radioValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-radio-button',\n  styleUrls: ['./radio-button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-radioButton\n      [id]=\"id\"\n      [(ngModel)]=\"value\"\n      [disabled]=\"disabled\"\n      [name]=\"name\"\n      [value]=\"radioValue\"\n      [label]=\"label\"\n      [inputId]=\"inputId\"\n\n      (focus)=\"onFocus.emit($event)\"\n      (blur)=\"onBlur.emit($event)\">\n    </p-radioButton>\n  `,\n  host: {\n    class: 'freud-radio-button',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudRadioButtonComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudRadioButtonComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() bgColor: boolean = false;\n  @Input() inputId!: string;\n  @Input() name!: string;\n  @Input() disabled = false;\n  @Input() radioValue!: any;\n  @Input() required: boolean = false;\n  @Input() id!: string;\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.modelValueChange();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-radio-button:not(.freud-bgcolor) {\n  .p-radiobutton-label {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-radio-button.freud-bgcolor {\n  .p-radiobutton-label {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-radio-button {\n  .p-radiobutton .p-radiobutton-box.p-highlight,\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-highlight:hover {\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n  }\n\n  .p-radiobutton .p-radiobutton-box {\n    width: 20px;\n    height: 20px;\n  }\n  .p-radiobutton .p-radiobutton-box .p-radiobutton-icon {\n    width: 8px;\n    height: 8px\n  }\n\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box:hover,\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-focus {\n    border-color: $brand-color-pure;\n  }\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-focus {\n    box-shadow: $shadow-focused-zen !important;\n  }\n  .p-radiobutton-label {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n    font-family: $font-family-base;\n  }\n}\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            }
        },
        {
            "name": "FreudRadioButtonExampleComponent",
            "id": "component-FreudRadioButtonExampleComponent-8687cae6064707699923813a9d03659274f20c76caf7cff122c668c25ebd6635d6ee929e19d3b5a6be4806a9ac68a2be221a7563497de6113983b095a098693c",
            "file": "stories/forms/radio-button/radio-button-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-radio-button-example",
            "styleUrls": [],
            "styles": [],
            "template": "<freud-radio-button\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [label]=\"label ? (label + ' 1'): ''\"\n  [name]=\"'label'\"\n  [radioValue]=\"'item2'\"\n  [bgColor]=\"bgColor\">\n</freud-radio-button>\n<br><br>\n<freud-radio-button\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [label]=\"label ? (label + ' 2'): ''\"\n  [name]=\"'label'\"\n  [radioValue]=\"'item1'\"\n  [bgColor]=\"bgColor\">\n</freud-radio-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedItem",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\n\n@Component({\n  selector: 'freud-radio-button-example',\n  template: `\n    <freud-radio-button\n      [(ngModel)]=\"value\"\n      [disabled]=\"disabled\"\n      [label]=\"label ? (label + ' 1'): ''\"\n      [name]=\"'label'\"\n      [radioValue]=\"'item2'\"\n      [bgColor]=\"bgColor\">\n    </freud-radio-button>\n    <br><br>\n    <freud-radio-button\n      [(ngModel)]=\"value\"\n      [disabled]=\"disabled\"\n      [label]=\"label ? (label + ' 2'): ''\"\n      [name]=\"'label'\"\n      [radioValue]=\"'item1'\"\n      [bgColor]=\"bgColor\">\n    </freud-radio-button>\n  `\n})\nexport class FreudRadioButtonExampleComponent {\n\n  selectedItem: string = '';\n  @Input() value!: any;\n  @Input() label!: string;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "FreudRatingComponent",
            "id": "component-FreudRatingComponent-1410af4fb5fb78a9fd98c8d785a918f7c03014c1b2e24b5dc2e0c409a9d8a19a407ab5020b56a3eb5023d5ca77fac50bd880cab4d3b76fb5687517fbcabb7595",
            "file": "projects/web-components/src/components/feedback/rating/rating.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-rating",
            "styleUrls": [
                "./rating.component.scss"
            ],
            "styles": [],
            "template": "<p-rating\n  [(ngModel)]=\"value\"\n  [stars]=\"stars\"\n  [disabled]=\"disabled\"\n  [iconOnClass]=\"iconOnClass\"\n  [iconOffClass]=\"iconOffClass\"\n  [cancel]=\"false\"\n  (onRate)=\"onRateChange($event)\">\n</p-rating>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconOffClass",
                    "defaultValue": "'freud-icon freud-icon-star'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconOnClass",
                    "defaultValue": "'freud-icon freud-icon-star-fill'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "stars",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onRate",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onRateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-rating',\n  template: `\n    <p-rating\n      [(ngModel)]=\"value\"\n      [stars]=\"stars\"\n      [disabled]=\"disabled\"\n      [iconOnClass]=\"iconOnClass\"\n      [iconOffClass]=\"iconOffClass\"\n      [cancel]=\"false\"\n      (onRate)=\"onRateChange($event)\">\n    </p-rating>\n  `,\n  styleUrls: ['./rating.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-rating',\n    '[class.freud-rating-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudRatingComponent {\n\n  @Input() value: number = 0;\n  @Input() stars: number = 5;\n  @Input() disabled: boolean = false;\n  @Input() iconOnClass: string = 'freud-icon freud-icon-star-fill';\n  @Input() iconOffClass: string = 'freud-icon freud-icon-star';\n  @Input() bgColor: boolean = false;\n  @Output() onRate: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onCancel: EventEmitter<any> = new EventEmitter<any>();\n\n  onRateChange(event: any) {\n    this.onRate.emit(event);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-rating {\n  .p-rating:not(.p-disabled):not(.p-readonly) .p-rating-icon:hover,\n  .p-rating .p-rating-icon.freud-icon-star-fill {\n    color: $feedback-color-warning-pure;\n  }\n  .p-rating .p-rating-icon:not(.freud-icon-star-fill) {\n    color: $neutral-color-dark-01;\n  }\n\n  .p-rating .p-rating-icon {\n    font-size: 16px;\n  }\n}\n.freud-rating.freud-rating-bgcolor {\n  .p-rating .p-rating-icon:not(.freud-icon-star-fill) {\n    color: $neutral-color-dark-01;\n  }\n}\n\n.freud-rating .p-rating .p-rating-icon:focus {\n  box-shadow: unset;\n}\n",
                    "styleUrl": "./rating.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudReactiveFormExampleComponent",
            "id": "component-FreudReactiveFormExampleComponent-c9c5a3684b1ddaa20d1f0042d16a3abb9ccb3be13a873aea9675fcaf95820c966a16cb8b0caaa14efb6bb33aea6e00d51a188f2879f39c80dbbd15e38b6bcf89",
            "file": "stories/forms/reactive-form-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-reactive-form-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<form [formGroup]=\"formParams\" (ngSubmit)=\"onSubmit()\">\n  <freud-input-text label=\"Name\" formControlName=\"name\"></freud-input-text>\n  <freud-input-text label=\"email\" formControlName=\"email\"></freud-input-text>\n  <button type=\"submit\">Enviar</button>\n  <div>\n    <p>FormValid: {{formParams.valid}}</p>\n    <p>FormParams: {{formParams.value | json}}</p>\n  </div>\n</form>\n<freud-input-text label=\"ngModel\" [(ngModel)]=\"nameNgModel\"></freud-input-text>\n<p>Value NgModel {{nameNgModel}}</p>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nameNgModel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-reactive-form-example',\n  template: `\n    <form [formGroup]=\"formParams\" (ngSubmit)=\"onSubmit()\">\n      <freud-input-text label=\"Name\" formControlName=\"name\"></freud-input-text>\n      <freud-input-text label=\"email\" formControlName=\"email\"></freud-input-text>\n      <button type=\"submit\">Enviar</button>\n      <div>\n        <p>FormValid: {{formParams.valid}}</p>\n        <p>FormParams: {{formParams.value | json}}</p>\n      </div>\n    </form>\n    <freud-input-text label=\"ngModel\" [(ngModel)]=\"nameNgModel\"></freud-input-text>\n    <p>Value NgModel {{nameNgModel}}</p>\n\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudReactiveFormExampleComponent implements OnInit {\n\n  formParams!: FormGroup;\n  nameNgModel: string = '';\n  constructor() {}\n\n  ngOnInit() {\n    this.formParams = new FormGroup({\n      name: new FormControl('', [Validators.required, Validators.minLength(2)]),\n      email: new FormControl('', [Validators.email])\n    })\n  }\n\n  onSubmit() {\n    this.formParams.markAsUntouched();\n    console.log('formParams', this.formParams);\n    console.log('formParams >>> Value', this.formParams.value);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "FreudScrollPanelComponent",
            "id": "component-FreudScrollPanelComponent-ac33355ed1b11e05c680998a0ade352461dfb94ad7eabc8e33bb8eccd72c73a2b35952f50a96bdade16dcf082e94a83ea8607b8da06066345ac58413fb0c092d",
            "file": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-panel",
            "styleUrls": [
                "./scroll-panel.component.scss"
            ],
            "styles": [],
            "template": "<p-scrollPanel [style]=\"style\">\n  <ng-content></ng-content>\n</p-scrollPanel>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-scroll-panel',\n  template: `\n      <p-scrollPanel [style]=\"style\">\n        <ng-content></ng-content>\n      </p-scrollPanel>\n  `,\n  styleUrls: ['./scroll-panel.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-scroll-panel',\n  }\n})\nexport class FreudScrollPanelComponent {\n\n  @Input() style!: any;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-scroll-panel {\n\n  .p-scrollpanel, p-scrollpanel-bar {\n    background-color: $neutral-color-white;\n    padding: 14px 14px 14px 14px;\n    border-radius: $border-radius-md;\n  }\n  .p-scrollpanel .p-scrollpanel-bar {\n    margin-left: -20px;\n    background-color: $neutral-color-dark-01;\n  }\n  .p-scrollpanel-content {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n}\n",
                    "styleUrl": "./scroll-panel.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudScrollTopComponent",
            "id": "component-FreudScrollTopComponent-71db91ba597d1851186b22179777b7491ae2c8d370d4db58ee4d1bde09431df9d5fe39f953f05fe52d80b8916ed7fa57047dd227d220118b75e26fe280df2f52",
            "file": "projects/web-components/src/components/others/scroll-top/scroll-top.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-top",
            "styleUrls": [
                "./scroll-top.component.scss"
            ],
            "styles": [],
            "template": "<p-scrollTop #element [threshold]=\"threshold\"\n             [target]=\"target\"\n             [icon]=\"icon\"\n             styleClass=\"freud-scrolltop\"\n             [behavior]=\"behavior\"></p-scrollTop>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "behavior",
                    "defaultValue": "'smooth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"smooth\" | \"auto\"",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "defaultValue": "'window'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"window\" | \"parent\"",
                    "decorators": []
                },
                {
                    "name": "threshold",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollTop",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'element'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "bindParentScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindParentScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { ScrollTop } from \"primeng/scrolltop\";\n\n@Component({\n  selector: 'freud-scroll-top',\n  template: `\n    <p-scrollTop #element [threshold]=\"threshold\"\n                 [target]=\"target\"\n                 [icon]=\"icon\"\n                 styleClass=\"freud-scrolltop\"\n                 [behavior]=\"behavior\"></p-scrollTop>\n  `,\n  styleUrls: ['./scroll-top.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-scroll-top',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudScrollTopComponent implements AfterViewInit {\n  @Input() threshold: number = 400;\n  @Input() target: 'window' | 'parent' = 'window';\n  @Input() behavior: 'smooth' | 'auto' = 'smooth';\n  @Input() bgColor: boolean = false;\n  @Input() icon: string = 'freud-icon freud-icon-chevron-up';\n  @ViewChild('element') element!: ScrollTop;\n\n  ngAfterViewInit() {\n    if (this.target === 'parent') {\n      this.element.bindParentScrollListener = this.bindParentScrollListener.bind(this);\n      this.element.unbindParentScrollListener = this.unbindParentScrollListener.bind(this);\n      this.element.onClick = this.onClick.bind(this);\n      this.element.bindParentScrollListener();\n    }\n  }\n\n  bindParentScrollListener() {\n    this.element.scrollListener = () => {\n      this.element.checkVisibility(this.element.el.nativeElement.parentElement.parentElement.scrollTop);\n    };\n\n    this.element.el.nativeElement.parentElement.parentElement.addEventListener('scroll', this.element.scrollListener);\n  }\n\n  onClick() {\n    let scrollElement = this.target === 'window' ? window : this.element.el.nativeElement.parentElement.parentElement;\n    scrollElement.scroll({\n      top: 0,\n      behavior: this.behavior\n    });\n  }\n\n  unbindParentScrollListener() {\n    if (this.element.scrollListener) {\n      this.element.el.nativeElement.parentElement.parentElement.removeEventListener('scroll', this.element.scrollListener);\n      this.element.scrollListener = null;\n    }\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-scroll-top {\n  .p-link:focus {\n    box-shadow: unset;\n  }\n}\n\n.freud-scroll-top.freud-bgcolor {\n  .p-scrolltop.p-link {\n    background-color: $neutral-color-white;\n  }\n  .p-scrolltop .p-scrolltop-icon {\n    color: $brand-color-pure;\n  }\n  .p-scrolltop.p-link:hover {\n    background-color: $brand-color-04;\n    .p-scrolltop-icon {\n      color: $neutral-color-white;\n    }\n  }\n}\n\n.freud-scroll-top:not(.freud-bgcolor) {\n  .p-scrolltop.p-link {\n    background-color: $brand-color-pure;\n    color: $neutral-color-white;\n  }\n  .p-scrolltop .p-scrolltop-icon {\n    color: $neutral-color-white;\n  }\n  .p-scrolltop.p-link:hover {\n    background-color: $brand-color-04;\n    .p-scrolltop-icon {\n      color: $neutral-color-white;\n    }\n  }\n}\n",
                    "styleUrl": "./scroll-top.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "FreudScrollTopComponent",
            "id": "component-FreudScrollTopComponent-5e0a3bc4a2aca1d8a80ee563edf6f602f44bde5fc3daf3b251478d34a423e12d5375dc7c3bfbb0d96893c45995da018d240e341aa278548c5b46ebcb751afe76-1",
            "file": "projects/web-components/src/components/others/timeline/timeline.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-top",
            "styleUrls": [
                "./timeline.component.scss"
            ],
            "styles": [],
            "template": "<p-timeline [threshold]=\"threshold\" [target]=\"target\" [behavior]=\"behavior\"></p-timeline>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "behavior",
                    "defaultValue": "'smooth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"smooth\" | \"auto\"",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "defaultValue": "'window'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"window\" | \"parent\"",
                    "decorators": []
                },
                {
                    "name": "threshold",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-scroll-top',\n  template: `\n    <p-timeline [threshold]=\"threshold\" [target]=\"target\" [behavior]=\"behavior\"></p-timeline>\n  `,\n  styleUrls: ['./timeline.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-scroll-top',\n  }\n})\nexport class FreudScrollTopComponent {\n\n  @Input() threshold: number = 400;\n  @Input() target: 'window' | 'parent' = 'window';\n  @Input() behavior: 'smooth' | 'auto' = 'smooth';\n  @Input() icon: string = 'freud-icon freud-icon-chevron-up';\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n",
                    "styleUrl": "./timeline.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FreudScrollTopComponent-1"
        },
        {
            "name": "FreudSelectButtonComponent",
            "id": "component-FreudSelectButtonComponent-9d992c9589a436a15d00e60ff7f20a709d51a2be90a5b698da95cad9ea71b04effdafd9641ef2d07552e49938ea4d862433bb93dec614b201ef795c2892c0e2f",
            "file": "projects/web-components/src/components/others/select-button/select-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSelectButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-select-button",
            "styleUrls": [
                "./select-button.component.scss"
            ],
            "styles": [],
            "template": "<p-selectButton\n  [options]=\"options\"\n  [(ngModel)]=\"selectedOption\"\n  [multiple]=\"multiple\"\n  [tabindex]=\"tabindex\"\n  [optionDisabled]=\"optionDisabled\"\n  [optionLabel]=\"optionLabel\"\n  [disabled]=\"disabled\"\n  (onChange)=\"selectedOptionChange.emit($event)\">\n</p-selectButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-select-button',\n  template: `\n    <p-selectButton\n      [options]=\"options\"\n      [(ngModel)]=\"selectedOption\"\n      [multiple]=\"multiple\"\n      [tabindex]=\"tabindex\"\n      [optionDisabled]=\"optionDisabled\"\n      [optionLabel]=\"optionLabel\"\n      [disabled]=\"disabled\"\n      (onChange)=\"selectedOptionChange.emit($event)\">\n    </p-selectButton>\n  `,\n  styleUrls: ['./select-button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-select-button',\n    '[class.freud-select-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudSelectButtonComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudSelectButtonComponent implements ControlValueAccessor {\n\n  @Input() options!: any[];\n  @Input() optionLabel!: string;\n  @Input() selectedOption!: any;\n  @Input() multiple: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() optionDisabled!: string;\n  @Input() tabindex: number = 0;\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() selectedOptionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.modelValueChange();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-select-button.freud-select-bgcolor {\n  .p-selectbutton .p-button.p-highlight {\n    color: $brand-color-04;\n    background: $neutral-color-white;\n    border: 1px solid $neutral-color-white;\n  }\n  .p-selectbutton .p-button {\n    border: 1px solid $brand-color-05;\n    background: $brand-color-04;\n    color: $neutral-color-white;\n  }\n}\n\n.freud-select-button {\n  .p-selectbutton .p-button {\n    @include typography($font-size-xxs, $font-weight-bold, $font-size-xxs);\n    border-radius: $border-radius-md;\n  }\n}\n\n.p-button:focus {\n  box-shadow: 0 0 0 1px $brand-color-pure;\n}\n\n\n.freud-select-button:not(.freud-select-bgcolor) {\n  .p-selectbutton .p-button.p-highlight {\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n    color: $neutral-color-white;\n  }\n  .p-selectbutton .p-button {\n    border: 1px solid $neutral-color-light-04;\n    color: $neutral-color-dark-03;\n  }\n}\n",
                    "styleUrl": "./select-button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            }
        },
        {
            "name": "FreudSelectComponent",
            "id": "component-FreudSelectComponent-98d4832aece73b58440fc13b2d693cc684b606e424bba374a80bf74f8fe34070d89b511399fc6ec8b749ea344ffb8e8abedbfbcc0dee51f14a8f3ba1077f7795",
            "file": "projects/web-components/src/components/forms/select/select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-dropdown\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onFilter)=\"onFilter.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n    (onHide)=\"onHide.emit($event)\"\n    (onClear)=\"onClear.emit($event)\"\n\n  ></p-dropdown>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-select',\n  styleUrls: ['./select.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-dropdown\n        [id]=\"id\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [optionLabel]=\"optionLabel\"\n        [optionValue]=\"optionValue\"\n        [optionDisabled]=\"optionDisabled\"\n        [optionGroupLabel]=\"optionGroupLabel\"\n        [optionGroupChildren]=\"optionGroupChildren\"\n        [placeholder]=\"placeholder || ''\"\n        [virtualScroll]=\"virtualScroll\"\n        [dropdownIcon]=\"dropdownIcon\"\n        [emptyMessage]=\"emptyMessage\"\n        [itemSize]=\"itemSize\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        [options]=\"options\"\n        (onFocus)=\"onFocus.emit($event)\"\n        (onBlur)=\"onBlur.emit($event)\"\n        (onChange)=\"onChange.emit($event)\"\n        (onFilter)=\"onFilter.emit($event)\"\n        (onShow)=\"onShow.emit($event)\"\n        (onHide)=\"onHide.emit($event)\"\n        (onClear)=\"onClear.emit($event)\"\n\n      ></p-dropdown>\n      <small\n        [class.disabled]=\"disabled\"\n        *ngIf=\"helpText\"\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n    </div>\n  `,\n  host: {\n    class: 'freud-select',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudSelectComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudSelectComponent implements ControlValueAccessor {\n  @Input() label: string = '';\n  @Input() options!: any[];\n  @Input() helpText: string = '';\n  @Input() placeholder: string = '';\n  @Input() invalid: boolean = false;\n  @Input() virtualScroll: boolean = false;\n  @Input() itemSize!: number;\n  @Input() emptyMessage: string = 'Sem resultados';\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\n  @Input() optionLabel!: string;\n  @Input() optionValue!: string;\n  @Input() optionDisabled: string = 'disabled';\n  @Input() optionGroupLabel: string = 'label';\n  @Input() optionGroupChildren: string = 'items';\n  @Input() characterPattern: string = '';\n  @Input() autoClear: boolean = true;\n  @Input() bgColor = false;\n  @Input() disabled = false;\n  @Input() required: boolean = false;\n  @Input() id!: string;\n\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\n\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\n\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\n  @Output() onHide: EventEmitter<any> = new EventEmitter();\n  @Output() onClear: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n\n  private _value!: string;\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onModelChange: any = () => { };\n\n  onModelTouched: any = () => { };\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.valueChange.emit(v);\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-select:not(.freud-bgcolor) {\n  .freud-label, .help-text {\n    color: $neutral-color-dark-04;\n  }\n}\n\n.freud-select.freud-bgcolor {\n  .freud-label, .help-text {\n    color: $neutral-color-white;\n  }\n}\n\n.freud-select {\n  .help-text {\n    margin-top: $spacing-size-quark;\n  }\n  .freud-field {\n    display: flex;\n    flex-flow: column;\n  }\n  .freud-label {\n    margin-bottom: $spacing-size-quark;\n  }\n\n  .p-dropdown-panel {\n    box-shadow: $shadow-level-3;\n  }\n\n  .p-inputtext {\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-dropdown {\n    border-radius: $border-radius-md;\n    border: 1px solid $neutral-color-light-03;\n    width: 100%;\n  }\n\n  .p-inputtext.ng-invalid {\n    border: 1px solid $feedback-color-negative-04;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n\n  .p-dropdown:not(.p-disabled).p-focus {\n    box-shadow: $shadow-focused-zen;\n    border-color: $brand-color-pure;\n  }\n\n  .p-dropdown:not(.p-disabled):hover {\n    border-color: $brand-color-pure;\n  }\n  .p-dropdown .p-dropdown-panel {\n    border-radius: $border-radius-md;\n    margin-top: 1px;\n  }\n\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item {\n    padding: 12px 1rem;\n    color: $neutral-color-dark-03;\n    transition: box-shadow 0.2s;\n    border-radius: 0;\n  }\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item:not(.p-highlight):not(.p-disabled):hover {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item.p-highlight {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n}\n\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 127,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 123
                    }
                }
            }
        },
        {
            "name": "FreudSkeletonComponent",
            "id": "component-FreudSkeletonComponent-c93669ce5126df2e9cf53b500f9e6f6cf185717940e437b34d58ab4c811600e9dc815f3c7b85ca3f6a7016da8d9bf461c2a8dd45077bbb9781a7404ba5123bb5",
            "file": "projects/web-components/src/components/feedback/skeleton/skeleton.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-skeleton",
            "styleUrls": [
                "./skeleton.component.scss"
            ],
            "styles": [],
            "template": "<p-skeleton\n  [width]=\"width\"\n  [height]=\"height\"\n></p-skeleton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'100px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\n@Component({\n  selector: 'freud-skeleton',\n  template: `\n    <p-skeleton\n      [width]=\"width\"\n      [height]=\"height\"\n    ></p-skeleton>\n  `,\n  styleUrls: ['./skeleton.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-skeleton',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudSkeletonComponent {\n  @Input() width: string = '100%';\n  @Input() height: string = '100px';\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-skeleton:not(.freud-bgcolor) {\n  .p-skeleton {\n    background-color: $neutral-color-light-02;\n  }\n}\n.freud-skeleton.freud-bgcolor {\n  .p-skeleton {\n    background-color: $brand-color-06;\n  }\n  .p-skeleton:after {\n    background: linear-gradient(\n        90deg, rgba(255, 255, 255, 0),\n        rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));\n  }\n}\n",
                    "styleUrl": "./skeleton.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSlideMenuComponent",
            "id": "component-FreudSlideMenuComponent-c30a3c5a8918374bd84beb2e00a9c055bece52b76960380841ed4e9dcdbb525c9c4250332f43be3057c9e90d1b919fce29dd1af074174716522ef602fceaf20b",
            "file": "projects/web-components/src/components/structure/slide-menu/slide-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-slide-menu",
            "styleUrls": [
                "./slide-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-slideMenu #slideMenu [model]=\"items\"></p-slideMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "slide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SlideMenu",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slideMenu'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\nimport { SlideMenu } from \"primeng/slidemenu\";\n\n@Component({\n  selector: 'freud-slide-menu',\n  template: `\n    <p-slideMenu #slideMenu [model]=\"items\"></p-slideMenu>\n  `,\n  styleUrls: ['./slide-menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-slide-menu',\n  }\n})\nexport class FreudSlideMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @ViewChild('slideMenu') slide!: SlideMenu;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-slide-menu {\n  .p-slidemenu .p-menuitem-link .p-menuitem-text {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-regular, 16px);\n  }\n  .p-slidemenu {\n    border-radius: $border-radius-md;\n    box-shadow: $shadow-level-1;\n  }\n  .p-slidemenu .p-slidemenu-wrapper, .p-slidemenu .p-slidemenu-rootlist {\n    width: 100% !important;\n  }\n  .p-slidemenu .p-menuitem-link:focus {\n    box-shadow: unset;\n  }\n  .freud-icon {\n    color: $neutral-color-dark-02;\n    font-size: 14px;\n  }\n  .p-slidemenu .p-menuitem-link:not(.p-disabled):hover,\n  .p-slidemenu .p-menuitem-link:not(.p-disabled):hover .freud-icon,\n  .p-slidemenu .p-menuitem-link:not(.p-disabled):hover .p-submenu-icon,\n  .p-slidemenu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text {\n    color: $brand-color-pure;\n    background-color: $brand-color-01;\n  }\n}\n",
                    "styleUrl": "./slide-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSliderComponent",
            "id": "component-FreudSliderComponent-2e58e5359136b0904a7a5027aae280e78582b55c0660a1049c6e2fabdabaf59a4f1eb6d8c4afcdfd49b71e88d8ce00271c2e10d57c6753b66f72b1b339868e86",
            "file": "projects/web-components/src/components/others/slider/slider.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSliderComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "template": "<p-slider\n  [(ngModel)]=\"value\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [step]=\"step\"\n  [range]=\"range\"\n  [orientation]=\"orientation\"\n  [tabindex]=\"tabindex\"\n  [disabled]=\"disabled\"\n  (ngModelChange)=\"modelValueChange()\"\n  (onChange)=\"selectedOptionChange.emit($event)\">\n</p-slider>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "range",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-slider',\n  template: `\n    <p-slider\n      [(ngModel)]=\"value\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [step]=\"step\"\n      [range]=\"range\"\n      [orientation]=\"orientation\"\n      [tabindex]=\"tabindex\"\n      [disabled]=\"disabled\"\n      (ngModelChange)=\"modelValueChange()\"\n      (onChange)=\"selectedOptionChange.emit($event)\">\n    </p-slider>\n  `,\n  styleUrls: ['./slider.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-slider',\n    '[class.freud-bgcolor]': `bgColor`,\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudSliderComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudSliderComponent implements ControlValueAccessor {\n  @Input() min: number = 0;\n  @Input() max: number = 100;\n  @Input() step: number = 1;\n  @Input() range: boolean = false;\n  @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() tabindex: number = 0;\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n  @Output() selectedOptionChange: EventEmitter<any> = new EventEmitter<any>();\n\n  private _value!: any;\n\n  modelValueChange() {\n    this.valueChange.emit(this.value);\n  }\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.modelValueChange();\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: string){\n    this.value = newValue;\n  }\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-slider:not(.freud-bgcolor) {\n  .p-slider .p-slider-range {\n    background-color: $brand-color-pure;\n  }\n  .p-slider .p-slider-handle {\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n  }\n  .p-slider {\n    background: $neutral-color-light-02;\n  }\n}\n\n.freud-slider.freud-bgcolor {\n  .p-slider .p-slider-range {\n    background-color: $neutral-color-white;\n  }\n  .p-slider .p-slider-handle {\n    background-color: $neutral-color-white;\n    border-color: $neutral-color-white;\n  }\n  .p-slider {\n    background: $brand-color-04;\n  }\n}\n.freud-slider {\n  .p-slider .p-slider-handle {\n    width: 16px;\n    height: 16px;\n  }\n  .p-slider.p-slider-vertical .p-slider-handle {\n    margin-left: -8px;\n    margin-bottom: -8px;\n  }\n\n  .p-slider .p-slider-range {\n    border-radius: $border-radius-md;\n  }\n\n  .p-slider .p-slider-handle:focus {\n    box-shadow: unset;\n  }\n}\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "FreudSortIcon",
            "id": "component-FreudSortIcon-75d5f4adfccce92c032e6247d1ac233e7c93d2b66fd7b7027dbccfb696af9163fd45b3ae097655c0d80c323e1d93c2d87f0b79dec2283f2220ebf347d828ee83",
            "file": "projects/web-components/src/components/others/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-sortIcon",
            "styleUrls": [],
            "styles": [],
            "template": "<i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\n   [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\n<span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 176,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 182,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 182,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortOrder",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 178
                }
            ],
            "methodsClass": [
                {
                    "name": "getBadgeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMultiSortMetaIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMultiSorted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSortState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  ContentChildren, Directive, HostListener,\n  Input, OnDestroy, OnInit,\n  QueryList,\n  TemplateRef, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FreudTemplate } from \"../../directive/template\";\nimport { Table } from \"primeng/table\";\nimport { Subscription } from \"rxjs\";\nimport { DomHandler } from \"primeng/dom\";\n\n@Component({\n  selector: 'freud-table',\n  template: `\n    <p-table\n      #tableRef\n      [value]=\"value\"\n      [columns]=\"columns\"\n      [style]=\"style\">\n\n      <ng-template pTemplate=\"caption\">\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n      </ng-template>\n\n      <ng-template pTemplate=\"header\" let-columns>\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\n      </ng-template>\n      <ng-content></ng-content>\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n        <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\n      </ng-template>\n\n      <ng-template pTemplate=\"summary\">\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n      </ng-template>\n    </p-table>\n  `,\n  styleUrls: ['./table.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-table',\n  }\n})\nexport class FreudTableComponent implements AfterContentInit {\n\n  @Input() value!: any[];\n  @Input() style!: string;\n  @Input() columns!: any[];\n  headerTemplate!: TemplateRef<any>;\n  headerGroupedTemplate!: TemplateRef<any>;\n  bodyTemplate!: TemplateRef<any>;\n  captionTemplate!: TemplateRef<any>;\n  summaryTemplate!: TemplateRef<any>;\n  @ContentChildren(FreudTemplate) templates!: QueryList<FreudTemplate>;\n  @ViewChild('tableRef') tableRef!: Table;\n\n  ngAfterContentInit() {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n\n        case 'headergrouped':\n          this.headerGroupedTemplate = item.template;\n          break;\n\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n      }\n    });\n  }\n}\n\n@Directive({\n  selector: '[freudSortableColumn]',\n  host: {\n    class: 'p-element',\n    '[class.p-sortable-column]': 'isEnabled()',\n    '[class.p-highlight]': 'sorted',\n    '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n    '[attr.role]': '\"columnheader\"',\n    '[attr.aria-sort]': 'sortOrder'\n  }\n})\nexport class FreudSortableColumn implements AfterViewInit, OnDestroy {\n  @Input('freudSortableColumn') field!: string;\n\n  @Input() freudSortableColumnDisabled!: boolean;\n\n  sorted!: boolean;\n\n  sortOrder!: string;\n\n  subscription!: Subscription;\n\n  constructor(public dt: FreudTableComponent) {\n    if (this.isEnabled()) {\n      setTimeout(() => {\n        this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta) => {\n          this.updateSortState();\n        });\n      }, 3000)\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n\n  updateSortState() {\n    this.sorted = this.dt.tableRef?.isSorted(this.field);\n    this.sortOrder = this.sorted ? (this.dt.tableRef.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent) {\n    if (this.isEnabled() && !this.isFilterElement(<HTMLElement>event.target)) {\n      this.updateSortState();\n      this.dt.tableRef.sort({\n        originalEvent: event,\n        field: this.field\n      });\n\n      DomHandler.clearSelection();\n    }\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  onEnterKey(event: MouseEvent) {\n    this.onClick(event);\n  }\n\n  isEnabled() {\n    return !this.freudSortableColumnDisabled;\n  }\n\n  isFilterElement(element: HTMLElement) {\n    return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n@Component({\n  selector: 'freud-sortIcon',\n  template: `\n        <i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\n           [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\n    `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'p-element'\n  }\n})\nexport class FreudSortIcon implements AfterViewInit, OnDestroy {\n  @Input() field!: string;\n\n  subscription!: Subscription;\n\n  sortOrder: number = 0;\n\n  constructor(public dt: FreudTableComponent, public cd: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit() {\n    this.cd.detectChanges();\n    setTimeout(() => {\n      this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta: any) => {\n        this.updateSortState();\n      });\n    }, 3000);\n    this.updateSortState();\n  }\n\n  onClick(event: any) {\n    event.preventDefault();\n  }\n\n  updateSortState() {\n    if (this.dt.tableRef?.sortMode === 'single') {\n      this.sortOrder = this.dt.tableRef?.isSorted(this.field) ? this.dt.tableRef.sortOrder : 0;\n    } else if (this.dt.tableRef?.sortMode === 'multiple') {\n      let sortMeta = this.dt.tableRef.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  getMultiSortMetaIndex() {\n    let multiSortMeta = this.dt.tableRef._multiSortMeta;\n    let index = -1;\n\n    if (multiSortMeta && this.dt.tableRef.sortMode === 'multiple' && (this.dt.tableRef.showInitialSortBadge || multiSortMeta.length > 1)) {\n      for (let i = 0; i < multiSortMeta.length; i++) {\n        let meta = multiSortMeta[i];\n        if (meta.field === this.field || meta.field === this.field) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  getBadgeValue() {\n    let index = this.getMultiSortMetaIndex();\n\n    return this.dt.tableRef.groupRowsBy && index > -1 ? index : index + 1;\n  }\n\n  isMultiSorted() {\n    return this.dt.tableRef?.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 180,
                "jsdoctags": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ]
        },
        {
            "name": "FreudSpeedDialComponent",
            "id": "component-FreudSpeedDialComponent-c251ff9e7f864f98ae81713f3a608ed75addd6270f7eaf32429d7dff99e7e511d447254e8cdc7b404f4a27f226300ea4d02f0b2f7fc1e091543d7148e0054510",
            "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-speed-dial",
            "styleUrls": [
                "./speed-dial.component.scss"
            ],
            "styles": [],
            "template": "<p-speedDial\n  [id]=\"id\"\n  [visible]=\"visible\"\n  [mask]=\"mask\"\n  [disabled]=\"disabled\"\n  [showIcon]=\"showIcon\"\n  [hideIcon]=\"hideIcon\"\n  [type]=\"type\"\n  [direction]=\"direction\"\n  [model]=\"items\"\n  (onShow)=\"onShow.emit()\"\n  (onHide)=\"onHide.emit()\"\n  (onVisibleChange)=\"onVisibleChange.emit()\">\n</p-speedDial>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "defaultValue": "'up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "directions",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "mask",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'linear'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "types",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onVisibleChange",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\ntype directions = 'up' | 'down' | 'left' | 'right' | 'up-left' | 'up-right' | 'down-left' | 'down-right';\ntype types = 'linear' | 'circle' | 'semi-circle' | 'quarter-circle';\n@Component({\n  selector: 'freud-speed-dial',\n  template: `\n    <p-speedDial\n      [id]=\"id\"\n      [visible]=\"visible\"\n      [mask]=\"mask\"\n      [disabled]=\"disabled\"\n      [showIcon]=\"showIcon\"\n      [hideIcon]=\"hideIcon\"\n      [type]=\"type\"\n      [direction]=\"direction\"\n      [model]=\"items\"\n      (onShow)=\"onShow.emit()\"\n      (onHide)=\"onHide.emit()\"\n      (onVisibleChange)=\"onVisibleChange.emit()\">\n    </p-speedDial>\n  `,\n  styleUrls: ['./speed-dial.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-speed-dial',\n    '[class.freud-speed-dial-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudSpeedDialComponent {\n\n  @Input() id: string = '';\n  @Input() visible: boolean = false;\n  @Input() mask: boolean = false;\n  @Input() items!: FreudMenuItem[];\n  @Input() disabled: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() showIcon: string = 'freud-icon freud-icon-plus';\n  @Input() hideIcon: string = '';\n  @Input() type: types = 'linear';\n  @Input() direction: directions = 'up';\n  @Output() onVisibleChange: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onShow: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onHide: EventEmitter<void> = new EventEmitter<void>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-speed-dial:not(.freud-speed-dial-bgcolor) {\n  .p-button, .p-button:hover {\n    background: $brand-color-pure;\n    border: 1px solid $brand-color-pure;\n    box-shadow: 0 0 0 2px $brand-color-pure;\n  }\n  .p-speeddial-action {\n    background-color: $brand-color-05;\n    width: 42px;\n    height: 42px;\n  }\n}\n\n.freud-speed-dial {\n  .p-speeddial-button.p-button.p-button-icon-only {\n    width: 56px;\n    height: 56px;\n  }\n  .p-speeddial-button.p-button.p-button-icon-only .p-button-icon {\n    font-size: $font-size-lg;\n  }\n  .p-speeddial-action-icon {\n    font-size: $font-size-lg;\n  }\n}\n\n.freud-speed-dial.freud-speed-dial-bgcolor {\n  .p-button, .p-button:hover {\n    background: $neutral-color-white;\n    border: 1px solid $neutral-color-white;\n    box-shadow: 0 0 0 2px $neutral-color-white;\n    color: $brand-color-pure;\n  }\n  .p-speeddial-action {\n    background-color: $brand-color-pure;\n    color: $neutral-color-white;\n    width: 42px;\n    height: 42px;\n  }\n}\n",
                    "styleUrl": "./speed-dial.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSplitButtonComponent",
            "id": "component-FreudSplitButtonComponent-dc3471449f04812a9b49204280ad7ed7993431cd38d6e890a68193caa3aa160424f34a1e0919f829bfa3ccc72e960a492bc41fbc311558c599b94b0c3f849551",
            "file": "projects/web-components/src/components/buttons/split-button/split-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-split-button",
            "styleUrls": [
                "./split-button.component.scss"
            ],
            "styles": [],
            "template": "<p-splitButton\n  [label]=\"label\"\n  [disabled]=\"disabled\"\n  [model]=\"items\"\n  (onDropdownClick)=\"onDropdownClick.emit($event)\"\n  (onClick)=\"onClick.emit($event)\">\n</p-splitButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onDropdownClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\n@Component({\n  selector: 'freud-split-button',\n  template: `\n    <p-splitButton\n      [label]=\"label\"\n      [disabled]=\"disabled\"\n      [model]=\"items\"\n      (onDropdownClick)=\"onDropdownClick.emit($event)\"\n      (onClick)=\"onClick.emit($event)\">\n    </p-splitButton>\n  `,\n  styleUrls: ['./split-button.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-split-button',\n    '[class.freud-split-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudSplitButtonComponent {\n\n  @Input() label!: string;\n  @Input() disabled: boolean = false;\n  @Input() items!: FreudMenuItem[];\n  @Input() bgColor: boolean = false;\n  @Output() onClick: EventEmitter<void> = new EventEmitter<void>();\n  @Output() onDropdownClick: EventEmitter<any> = new EventEmitter<any>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-split-button:not(.freud-split-bgcolor) {\n  .p-button {\n    background-color: $brand-color-pure;\n    border-color: $brand-color-pure;\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n  }\n  .p-button:focus {\n    box-shadow: unset;\n  }\n}\n\n.freud-split-button.freud-split-bgcolor {\n  .p-button {\n    background-color: $neutral-color-white;\n    border-color: $neutral-color-white;\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n    color: $brand-color-pure;\n  }\n  .p-button:focus {\n    box-shadow: unset;\n  }\n}\n\n.freud-split-button {\n  .p-menu .p-menuitem-link:hover,\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text {\n    background-color: $brand-color-01;\n    color: $brand-color-pure;\n  }\n  .p-splitbutton-defaultbutton {\n    border-radius: $border-radius-md 0 0 $border-radius-md;\n  }\n  .p-splitbutton-menubutton {\n    border-radius: 0 $border-radius-md $border-radius-md 0;\n  }\n\n  .p-button-icon {\n    font-size: 14px;\n  }\n\n  .p-menu .p-menuitem-link .p-menuitem-icon {\n    font-size: 14px;\n    color: $neutral-color-dark-02;\n  }\n\n  .p-menu a.p-menuitem-link .p-menuitem-text{\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-regular, 24px);\n  }\n  .p-menuitem-link:focus {\n    box-shadow: 0 0 0 1px $brand-color-01;\n    background-color: $brand-color-01;\n  }\n  .p-menu-overlay {\n    border-radius: $border-radius-md;\n    box-shadow: $shadow-level-3;\n  }\n}\n",
                    "styleUrl": "./split-button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSplitterComponent",
            "id": "component-FreudSplitterComponent-41f119bcee8f0ceb0ba81dbf3d25c9eb0d1d3e0b5b78b2ec02843d57fb8a9aa700b3182f408761a75acffc8a40cb431a4ff5fee032df6e974728537afcbddd0f",
            "file": "projects/web-components/src/components/structure/splitter/splitter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-splitter",
            "styleUrls": [
                "./splitter.component.scss"
            ],
            "styles": [],
            "template": "<p-splitter\n  [panelSizes]=\"panelSizes\"\n  [style]=\"style\"\n  [layout]=\"layout || 'horizontal'\"\n  [minSizes]=\"minSizes\"\n  [panelStyleClass]=\"panelStyleClass\"\n  [panelStyle]=\"panelStyle\"\n  (onResizeEnd)=\"onResizeEnd.emit($event)\"\n  (onResizeStart)=\"onResizeStart.emit($event)\">\n  <ng-container *ngIf=\"templates\">\n    <ng-template ngFor let-panel let-i=\"index\" [ngForOf]=\"templates\">\n      <ng-template pTemplate>\n        <ng-container *ngTemplateOutlet=\"panel.template\"></ng-container>\n      </ng-template>\n    </ng-template>\n  </ng-container>\n</p-splitter>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "gutterSize",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "minSizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "panelSizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "panelStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "Object",
                    "decorators": []
                },
                {
                    "name": "panelStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onResizeEnd",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onResizeStart",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<any>",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "PrimeTemplate"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren, EventEmitter,\n  Input,\n  Output,\n  QueryList,\n  ViewEncapsulation\n} from '@angular/core';\nimport { PrimeTemplate } from \"primeng/api\";\n\n@Component({\n  selector: 'freud-splitter',\n  template: `\n    <p-splitter\n      [panelSizes]=\"panelSizes\"\n      [style]=\"style\"\n      [layout]=\"layout || 'horizontal'\"\n      [minSizes]=\"minSizes\"\n      [panelStyleClass]=\"panelStyleClass\"\n      [panelStyle]=\"panelStyle\"\n      (onResizeEnd)=\"onResizeEnd.emit($event)\"\n      (onResizeStart)=\"onResizeStart.emit($event)\">\n      <ng-container *ngIf=\"templates\">\n        <ng-template ngFor let-panel let-i=\"index\" [ngForOf]=\"templates\">\n          <ng-template pTemplate>\n            <ng-container *ngTemplateOutlet=\"panel.template\"></ng-container>\n          </ng-template>\n        </ng-template>\n      </ng-container>\n    </p-splitter>\n  `,\n  styleUrls: ['./splitter.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-splitter',\n  }\n})\nexport class FreudSplitterComponent {\n\n  @Input() panelSizes: number[] = [];\n  @Input() minSizes: number[] = [];\n  @Input() layout: \"horizontal\" | \"vertical\" = 'horizontal';\n  @Input() panelStyleClass!: string;\n  @Input() gutterSize: number = 4;\n  @Input() panelStyle!: Object;\n  @Input() style!: any;\n  @ContentChildren(PrimeTemplate) templates!: QueryList<any>;\n  @Output() onResizeStart: EventEmitter<any> = new EventEmitter<any>();\n  @Output() onResizeEnd: EventEmitter<any> = new EventEmitter<any>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-splitter {\n  .p-splitter {\n    border-radius: $border-radius-md;\n  }\n}\n",
                    "styleUrl": "./splitter.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudStepsComponent",
            "id": "component-FreudStepsComponent-eecfadf3cb777efa3dcde334d52ad34e2fb23ac5677b858ea0b24d776b28fc512921e44d2c0dd13b0afe3ecca0ae0ba650e0ced6b0cc580fe9eb21cc932539cf",
            "file": "projects/web-components/src/components/feedback/steps/steps.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-steps",
            "styleUrls": [
                "./steps.component.scss"
            ],
            "styles": [],
            "template": "<p-steps\n  [model]=\"model\"\n  [activeIndex]=\"activeIndex\"\n  [readonly]=\"readonly\"\n  (activeIndexChange)=\"activeIndexChange.emit($event)\">\n</p-steps>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "StepMenu[]",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\nexport interface StepMenu extends FreudMenuItem {}\n\n@Component({\n  selector: 'freud-steps',\n  template: `\n    <p-steps\n      [model]=\"model\"\n      [activeIndex]=\"activeIndex\"\n      [readonly]=\"readonly\"\n      (activeIndexChange)=\"activeIndexChange.emit($event)\">\n    </p-steps>\n  `,\n  styleUrls: ['./steps.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-steps',\n    '[class.freud-steps-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudStepsComponent {\n\n  @Input() model!: StepMenu[];\n  @Input() readonly: boolean = false;\n  @Input() bgColor: boolean = false;\n  @Input() activeIndex: number = 0;\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter<number>();\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables.scss';\n@import '../../../../scss/typography';\n\n.freud-steps {\n  .p-steps .p-steps-item:before {\n    border-top: 1px solid $neutral-color-light-03;\n  }\n\n  .p-steps-item {\n    opacity: 1 !important;\n    font-weight: $font-weight-bold;\n  }\n  .p-steps .p-steps-item:not(.p-highlight) .p-menuitem-link .p-steps-number {\n    color: $neutral-color-dark-01;\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n  }\n  .p-steps .p-steps-item.p-highlight .p-steps-number {\n    background-color: $brand-color-pure;\n    color: $neutral-color-white;\n    border: $brand-color-pure;\n  }\n\n  &:not(.freud-steps-bgcolor) {\n    .p-steps .p-steps-item .p-menuitem-link .p-steps-title {\n      color: $neutral-color-dark-03;\n    }\n  }\n\n  .p-steps .p-steps-item .p-menuitem-link .p-steps-title,\n  .p-steps .p-steps-item.p-highlight .p-steps-number {\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n  }\n\n  &.freud-steps-bgcolor {\n    .p-steps .p-steps-item .p-menuitem-link {\n      background-color: transparent;\n    }\n    .p-steps .p-steps-item .p-menuitem-link .p-steps-title {\n      color: $neutral-color-white;\n    }\n  }\n}\n",
                    "styleUrl": "./steps.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSwitchComponent",
            "id": "component-FreudSwitchComponent-fca3069b23a6753af461c4585cc2d8d38e681fb4ea47a2aa3825cda6bf459c69e0cd895ae352a2effa9b58cbf78bcc6bd10ed398753e95a0b5602715524a50c1",
            "file": "projects/web-components/src/components/forms/switch/switch.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSwitchComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-switch",
            "styleUrls": [
                "./switch.component.scss"
            ],
            "styles": [],
            "template": "<p-inputSwitch\n  [id]=\"id\"\n  [class.ng-invalid]=\"invalid\"\n  [class.ng-dirty]=\"invalid\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  [trueValue]=\"trueValue\"\n  [falseValue]=\"falseValue\"\n  [name]=\"name\"\n  (onChange)=\"onChange.emit($event)\">\n</p-inputSwitch>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  EventEmitter,\n  forwardRef,\n  Input,\n  Output,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-input-switch',\n  styleUrls: ['./switch.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  template: `\n    <p-inputSwitch\n      [id]=\"id\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      [(ngModel)]=\"value\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      [trueValue]=\"trueValue\"\n      [falseValue]=\"falseValue\"\n      [name]=\"name\"\n      (onChange)=\"onChange.emit($event)\">\n    </p-inputSwitch>\n  `,\n  host: {\n    class: 'freud-input-switch',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FreudSwitchComponent),\n      multi: true\n    }\n  ]\n})\nexport class FreudSwitchComponent implements ControlValueAccessor {\n  @Input() invalid: boolean = false;\n  @Input() disabled = false;\n  @Input() name: string = '';\n  @Input() falseValue: any = false;\n  @Input() trueValue: any = true;\n  @Input() required: boolean = false;\n  @Input() id!: string;\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\n\n  private _value!: boolean;\n\n  onModelChange: any = (_: string) => { };\n\n  onModelTouched: any = () => { };\n\n  public get value(){\n    return this._value;\n  }\n\n  public set value(v){\n    this._value = v;\n    this.onChange.emit(v);\n    this.onModelChange(this._value);\n    this.onModelTouched();\n    this.valueChange.emit(v);\n  }\n\n  writeValue(obj: any): void {\n    this._value = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n\n  setDisabledState?(isDisabled: boolean): void {\n  }\n\n  onSomeEventOccured(newValue: boolean){\n    this.value = newValue;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-input-switch {\n  .p-inputswitch .p-inputswitch-slider {\n    background-color: $neutral-color-dark-01;\n  }\n  .p-inputswitch:not(.p-disabled):hover .p-inputswitch-slider {\n    background-color: $neutral-color-dark-02;\n  }\n\n  .p-inputswitch.p-inputswitch-checked .p-inputswitch-slider {\n    background-color: $brand-color-pure;\n  }\n\n  .p-inputswitch.p-inputswitch-checked:not(.p-disabled):hover .p-inputswitch-slider {\n    background-color: $brand-color-04;\n  }\n\n  .p-inputswitch.p-focus .p-inputswitch-slider {\n    box-shadow: $shadow-focused-zen;\n  }\n}\n",
                    "styleUrl": "./switch.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            }
        },
        {
            "name": "FreudTableComponent",
            "id": "component-FreudTableComponent-75d5f4adfccce92c032e6247d1ac233e7c93d2b66fd7b7027dbccfb696af9163fd45b3ae097655c0d80c323e1d93c2d87f0b79dec2283f2220ebf347d828ee83",
            "file": "projects/web-components/src/components/others/table/table.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "template": "<p-table\n  #tableRef\n  [value]=\"value\"\n  [columns]=\"columns\"\n  [style]=\"style\">\n\n  <ng-template pTemplate=\"caption\">\n    <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\" let-columns>\n    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\n  </ng-template>\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n    <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\n  </ng-template>\n\n  <ng-template pTemplate=\"summary\">\n    <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n  </ng-template>\n</p-table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "captionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "headerGroupedTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "summaryTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "tableRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Table",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tableRef'"
                        }
                    ]
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FreudTemplate>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudTemplate"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\n  Component,\n  ContentChildren, Directive, HostListener,\n  Input, OnDestroy, OnInit,\n  QueryList,\n  TemplateRef, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { FreudTemplate } from \"../../directive/template\";\nimport { Table } from \"primeng/table\";\nimport { Subscription } from \"rxjs\";\nimport { DomHandler } from \"primeng/dom\";\n\n@Component({\n  selector: 'freud-table',\n  template: `\n    <p-table\n      #tableRef\n      [value]=\"value\"\n      [columns]=\"columns\"\n      [style]=\"style\">\n\n      <ng-template pTemplate=\"caption\">\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n      </ng-template>\n\n      <ng-template pTemplate=\"header\" let-columns>\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\n      </ng-template>\n      <ng-content></ng-content>\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n        <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\n      </ng-template>\n\n      <ng-template pTemplate=\"summary\">\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n      </ng-template>\n    </p-table>\n  `,\n  styleUrls: ['./table.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-table',\n  }\n})\nexport class FreudTableComponent implements AfterContentInit {\n\n  @Input() value!: any[];\n  @Input() style!: string;\n  @Input() columns!: any[];\n  headerTemplate!: TemplateRef<any>;\n  headerGroupedTemplate!: TemplateRef<any>;\n  bodyTemplate!: TemplateRef<any>;\n  captionTemplate!: TemplateRef<any>;\n  summaryTemplate!: TemplateRef<any>;\n  @ContentChildren(FreudTemplate) templates!: QueryList<FreudTemplate>;\n  @ViewChild('tableRef') tableRef!: Table;\n\n  ngAfterContentInit() {\n    this.templates.forEach((item) => {\n      switch (item.getType()) {\n        case 'caption':\n          this.captionTemplate = item.template;\n          break;\n\n        case 'header':\n          this.headerTemplate = item.template;\n          break;\n\n        case 'headergrouped':\n          this.headerGroupedTemplate = item.template;\n          break;\n\n        case 'body':\n          this.bodyTemplate = item.template;\n          break;\n        case 'summary':\n          this.summaryTemplate = item.template;\n          break;\n      }\n    });\n  }\n}\n\n@Directive({\n  selector: '[freudSortableColumn]',\n  host: {\n    class: 'p-element',\n    '[class.p-sortable-column]': 'isEnabled()',\n    '[class.p-highlight]': 'sorted',\n    '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\n    '[attr.role]': '\"columnheader\"',\n    '[attr.aria-sort]': 'sortOrder'\n  }\n})\nexport class FreudSortableColumn implements AfterViewInit, OnDestroy {\n  @Input('freudSortableColumn') field!: string;\n\n  @Input() freudSortableColumnDisabled!: boolean;\n\n  sorted!: boolean;\n\n  sortOrder!: string;\n\n  subscription!: Subscription;\n\n  constructor(public dt: FreudTableComponent) {\n    if (this.isEnabled()) {\n      setTimeout(() => {\n        this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta) => {\n          this.updateSortState();\n        });\n      }, 3000)\n    }\n  }\n\n  ngAfterViewInit() {\n    if (this.isEnabled()) {\n      this.updateSortState();\n    }\n  }\n\n  updateSortState() {\n    this.sorted = this.dt.tableRef?.isSorted(this.field);\n    this.sortOrder = this.sorted ? (this.dt.tableRef.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\n  }\n\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent) {\n    if (this.isEnabled() && !this.isFilterElement(<HTMLElement>event.target)) {\n      this.updateSortState();\n      this.dt.tableRef.sort({\n        originalEvent: event,\n        field: this.field\n      });\n\n      DomHandler.clearSelection();\n    }\n  }\n\n  @HostListener('keydown.enter', ['$event'])\n  onEnterKey(event: MouseEvent) {\n    this.onClick(event);\n  }\n\n  isEnabled() {\n    return !this.freudSortableColumnDisabled;\n  }\n\n  isFilterElement(element: HTMLElement) {\n    return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n\n@Component({\n  selector: 'freud-sortIcon',\n  template: `\n        <i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\n           [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\n    `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'p-element'\n  }\n})\nexport class FreudSortIcon implements AfterViewInit, OnDestroy {\n  @Input() field!: string;\n\n  subscription!: Subscription;\n\n  sortOrder: number = 0;\n\n  constructor(public dt: FreudTableComponent, public cd: ChangeDetectorRef) {\n  }\n\n  ngAfterViewInit() {\n    this.cd.detectChanges();\n    setTimeout(() => {\n      this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta: any) => {\n        this.updateSortState();\n      });\n    }, 3000);\n    this.updateSortState();\n  }\n\n  onClick(event: any) {\n    event.preventDefault();\n  }\n\n  updateSortState() {\n    if (this.dt.tableRef?.sortMode === 'single') {\n      this.sortOrder = this.dt.tableRef?.isSorted(this.field) ? this.dt.tableRef.sortOrder : 0;\n    } else if (this.dt.tableRef?.sortMode === 'multiple') {\n      let sortMeta = this.dt.tableRef.getSortMeta(this.field);\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\n    }\n\n    this.cd.markForCheck();\n  }\n\n  getMultiSortMetaIndex() {\n    let multiSortMeta = this.dt.tableRef._multiSortMeta;\n    let index = -1;\n\n    if (multiSortMeta && this.dt.tableRef.sortMode === 'multiple' && (this.dt.tableRef.showInitialSortBadge || multiSortMeta.length > 1)) {\n      for (let i = 0; i < multiSortMeta.length; i++) {\n        let meta = multiSortMeta[i];\n        if (meta.field === this.field || meta.field === this.field) {\n          index = i;\n          break;\n        }\n      }\n    }\n\n    return index;\n  }\n\n  getBadgeValue() {\n    let index = this.getMultiSortMetaIndex();\n\n    return this.dt.tableRef.groupRowsBy && index > -1 ? index : index + 1;\n  }\n\n  isMultiSorted() {\n    return this.dt.tableRef?.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\n  }\n\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-table {\n  .p-datatable .p-datatable-thead > tr > th,\n  .p-datatable .p-datatable-header {\n    color: $neutral-color-dark-03;\n    @include typography($font-size-xs, $font-weight-bold, auto);\n  }\n\n  .p-datatable .p-datatable-tbody > tr > td,\n  .p-datatable .p-datatable-footer {\n    color: $neutral-color-dark-02;\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n\n  .p-datatable .p-sortable-column.p-highlight:hover,\n  .p-datatable .p-sortable-column.p-highlight .p-sortable-column-icon {\n    color: $brand-color-pure;\n  }\n\n  .p-datatable .p-sortable-column:focus {\n    box-shadow: unset;\n  }\n\n}\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "FreudTabMenuComponent",
            "id": "component-FreudTabMenuComponent-eb904c25054a6e22e4004e3a60faadb12142663ab3d3af4d65a7a6f3de7b1213c23839e2fc84f295a3db6305e76e23540c96c43ef6b3666b6e6da249aed52bdd",
            "file": "projects/web-components/src/components/structure/tab-menu/tab-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-menu",
            "styleUrls": [
                "./tab-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-tabMenu\n  [model]=\"items\"\n  [styleClass]=\"'freud-typography bodyBoldAuto'\"\n  [activeItem]=\"activeItem\"></p-tabMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FreudMenuItem",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\n\n@Component({\n  selector: 'freud-tab-menu',\n  template: `\n    <p-tabMenu\n      [model]=\"items\"\n      [styleClass]=\"'freud-typography bodyBoldAuto'\"\n      [activeItem]=\"activeItem\"></p-tabMenu>\n  `,\n  styleUrls: ['./tab-menu.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-menu',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabMenuComponent {\n\n  @Input() items!: FreudMenuItem[];\n  @Input() activeItem!: FreudMenuItem;\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n\n.freud-tab-menu {\n\n  &:not(.freud-bgcolor) {\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\n      color: $neutral-color-dark-02;\n    }\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link {\n      border-color: $brand-color-pure;\n      color: $brand-color-pure;\n    }\n\n    .p-tabmenu .p-tabmenu-nav {\n      border-color: $neutral-color-light-03;\n      border-width: 0 0 2px 0;\n    }\n  }\n\n  &.freud-bgcolor {\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\n      color: $brand-color-03;\n      border-color: $brand-color-03;\n      border-width: 0 0 2px 0;\n    }\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link,\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):not(.p-disabled):hover .p-menuitem-link {\n      background-color: transparent;\n      border-color: $brand-color-01;\n      color: $brand-color-01;\n    }\n\n    .p-tabmenu .p-tabmenu-nav {\n      border-color: $brand-color-03;\n      border-width: 0 0 2px 0;\n      background: transparent;\n    }\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\n      background-color: transparent;\n    }\n  }\n\n  .p-menuitem-text {\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n  }\n\n  .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link:not(.p-disabled):focus {\n    box-shadow: unset;\n  }\n}\n",
                    "styleUrl": "./tab-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTabPanelComponent",
            "id": "component-FreudTabPanelComponent-e4123efc8bae22ab61d5c3e5ac479f4d99093dd5c79921f065f31e111c66c16dd7730a0c2def2d6d39378c74b104d71eedd3ae8bf21a1ff1ebf350d35b161813",
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-panel",
            "styleUrls": [
                "./tab-view.component.scss"
            ],
            "styles": [],
            "template": "<div #ref>\n    <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "leftIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rightIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ref'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-tab-panel',\n  template: `\n    <div #ref>\n        <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-panel',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabPanelComponent {\n\n  @Input() header!: string;\n  @Input() id!: string;\n  @Input() leftIcon!: string;\n  @Input() rightIcon!: string;\n  @Input() disabled: boolean = false;\n  @Input() closable: boolean = false;\n  @Input() selected: boolean = false;\n\n  @Input() bgColor: boolean = false;\n\n  @ViewChild('ref') ref!: any;\n\n}\n\n@Component({\n  selector: 'freud-tab-view',\n  template: `\n    <p-tabView\n      [style]=\"style\"\n      [styleClass]=\"styleClass\"\n      [scrollable]=\"scrollable\"\n      [controlClose]=\"controlClose\"\n      [(activeIndex)]=\"activeIndex\"\n      (onChange)=\"onChange.emit($event)\"\n      (onClose)=\"onClose.emit($event)\">\n        <ng-container *ngFor=\"let template of templates\">\n          <p-tabPanel\n            [id]=\"template.id\"\n            [leftIcon]=\"template.leftIcon\"\n            [rightIcon]=\"template.rightIcon\"\n            [disabled]=\"template.disabled\"\n            [header]=\"template.header\"\n            [selected]=\"template.selected\"\n            [closable]=\"template.closable\">\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n          </p-tabPanel>\n        </ng-container>\n    </p-tabView>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-view',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabViewComponent implements ControlValueAccessor {\n  @Input() style: any;\n\n  @Input() styleClass!: string;\n\n  @Input() controlClose!: boolean;\n  @Input() bgColor: boolean = false;\n\n  @Input() scrollable: boolean = false;\n\n  @ContentChildren(FreudTabPanelComponent) templates!: QueryList<FreudTabPanelComponent>;\n\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter();\n\n  private _activeIndex!: number;\n\n  modelValueChange() {\n    this.activeIndexChange.emit(this.activeIndex);\n  }\n\n  onModelChange: any = (_:number) => { };\n\n  onModelTouched: any = () => { };\n\n  @Input() get activeIndex(){\n    return this._activeIndex;\n  }\n\n  public set activeIndex(v){\n    this._activeIndex = v;\n    this.onModelChange(this._activeIndex);\n    this.modelValueChange();\n    this.onModelTouched();\n  }\n\n  writeValue(obj: any): void {\n    this._activeIndex = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-tab-view {\n\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link,\n  .p-tabview .p-tabview-panels,\n  .p-tabview .p-tabview-nav {\n    background-color: transparent;\n  }\n\n  .p-tabview-title {\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n  }\n\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link:not(.p-disabled):focus {\n    box-shadow: unset;\n  }\n\n  .p-tabview .p-tabview-nav li:not(.p-highlight):not(.p-disabled):hover .p-tabview-nav-link {\n    border-color: $brand-color-02;\n    background-color: transparent;\n    color: $brand-color-02;\n  }\n\n  .freud-icon {\n    font-size: 14px;\n  }\n\n  .p-tabview-panel {\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n\n  .p-tabview .p-tabview-nav-btn.p-link {\n    color: $brand-color-pure;\n  }\n\n  .p-tabview .p-tabview-nav-btn.p-link:focus {\n    box-shadow: unset;\n  }\n\n  &:not(.freud-bgcolor) {\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\n      color: $neutral-color-dark-02;\n      border-color: $neutral-color-light-03;\n    }\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\n      color: $brand-color-pure;\n      border-color: $brand-color-pure;\n      .freud-icon {\n        color: $brand-color-pure;\n      }\n    }\n    .p-tabview-panel {\n      color: $neutral-color-dark-03;\n    }\n  }\n\n  &.freud-bgcolor {\n    .p-tabview-panel {\n      color: $neutral-color-white;\n    }\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\n      color: $brand-color-01;\n      border-color: $brand-color-01;\n      .freud-icon {\n        color: $brand-color-01;\n      }\n    }\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\n      color: $brand-color-03;\n      border-color: $brand-color-03;\n    }\n    .p-tabview .p-tabview-nav {\n      border-color: $brand-color-03;\n    }\n  }\n}\n",
                    "styleUrl": "./tab-view.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTabViewComponent",
            "id": "component-FreudTabViewComponent-e4123efc8bae22ab61d5c3e5ac479f4d99093dd5c79921f065f31e111c66c16dd7730a0c2def2d6d39378c74b104d71eedd3ae8bf21a1ff1ebf350d35b161813",
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-view",
            "styleUrls": [
                "./tab-view.component.scss"
            ],
            "styles": [],
            "template": "<p-tabView\n  [style]=\"style\"\n  [styleClass]=\"styleClass\"\n  [scrollable]=\"scrollable\"\n  [controlClose]=\"controlClose\"\n  [(activeIndex)]=\"activeIndex\"\n  (onChange)=\"onChange.emit($event)\"\n  (onClose)=\"onClose.emit($event)\">\n    <ng-container *ngFor=\"let template of templates\">\n      <p-tabPanel\n        [id]=\"template.id\"\n        [leftIcon]=\"template.leftIcon\"\n        [rightIcon]=\"template.rightIcon\"\n        [disabled]=\"template.disabled\"\n        [header]=\"template.header\"\n        [selected]=\"template.selected\"\n        [closable]=\"template.closable\">\n        <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n      </p-tabPanel>\n    </ng-container>\n</p-tabView>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "controlClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "scrollable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeIndexChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FreudTabPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudTabPanelComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  Component,\n  ContentChildren,\n  EventEmitter,\n  Input,\n  Output,\n  QueryList, ViewChild,\n  ViewEncapsulation\n} from '@angular/core';\nimport { ControlValueAccessor } from \"@angular/forms\";\n\n@Component({\n  selector: 'freud-tab-panel',\n  template: `\n    <div #ref>\n        <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-panel',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabPanelComponent {\n\n  @Input() header!: string;\n  @Input() id!: string;\n  @Input() leftIcon!: string;\n  @Input() rightIcon!: string;\n  @Input() disabled: boolean = false;\n  @Input() closable: boolean = false;\n  @Input() selected: boolean = false;\n\n  @Input() bgColor: boolean = false;\n\n  @ViewChild('ref') ref!: any;\n\n}\n\n@Component({\n  selector: 'freud-tab-view',\n  template: `\n    <p-tabView\n      [style]=\"style\"\n      [styleClass]=\"styleClass\"\n      [scrollable]=\"scrollable\"\n      [controlClose]=\"controlClose\"\n      [(activeIndex)]=\"activeIndex\"\n      (onChange)=\"onChange.emit($event)\"\n      (onClose)=\"onClose.emit($event)\">\n        <ng-container *ngFor=\"let template of templates\">\n          <p-tabPanel\n            [id]=\"template.id\"\n            [leftIcon]=\"template.leftIcon\"\n            [rightIcon]=\"template.rightIcon\"\n            [disabled]=\"template.disabled\"\n            [header]=\"template.header\"\n            [selected]=\"template.selected\"\n            [closable]=\"template.closable\">\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n          </p-tabPanel>\n        </ng-container>\n    </p-tabView>\n  `,\n  styleUrls: ['./tab-view.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-tab-view',\n    '[class.freud-bgcolor]': `bgColor`,\n  }\n})\nexport class FreudTabViewComponent implements ControlValueAccessor {\n  @Input() style: any;\n\n  @Input() styleClass!: string;\n\n  @Input() controlClose!: boolean;\n  @Input() bgColor: boolean = false;\n\n  @Input() scrollable: boolean = false;\n\n  @ContentChildren(FreudTabPanelComponent) templates!: QueryList<FreudTabPanelComponent>;\n\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\n\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter();\n\n  private _activeIndex!: number;\n\n  modelValueChange() {\n    this.activeIndexChange.emit(this.activeIndex);\n  }\n\n  onModelChange: any = (_:number) => { };\n\n  onModelTouched: any = () => { };\n\n  @Input() get activeIndex(){\n    return this._activeIndex;\n  }\n\n  public set activeIndex(v){\n    this._activeIndex = v;\n    this.onModelChange(this._activeIndex);\n    this.modelValueChange();\n    this.onModelTouched();\n  }\n\n  writeValue(obj: any): void {\n    this._activeIndex = obj;\n  }\n\n  registerOnChange(fn: any): void {\n    this.onModelChange = fn;\n  }\n\n  registerOnTouched(fn: any): void {\n    this.onModelTouched = fn;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-tab-view {\n\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link,\n  .p-tabview .p-tabview-panels,\n  .p-tabview .p-tabview-nav {\n    background-color: transparent;\n  }\n\n  .p-tabview-title {\n    @include typography($font-size-xs, $font-weight-semibold, auto);\n  }\n\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link:not(.p-disabled):focus {\n    box-shadow: unset;\n  }\n\n  .p-tabview .p-tabview-nav li:not(.p-highlight):not(.p-disabled):hover .p-tabview-nav-link {\n    border-color: $brand-color-02;\n    background-color: transparent;\n    color: $brand-color-02;\n  }\n\n  .freud-icon {\n    font-size: 14px;\n  }\n\n  .p-tabview-panel {\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n\n  .p-tabview .p-tabview-nav-btn.p-link {\n    color: $brand-color-pure;\n  }\n\n  .p-tabview .p-tabview-nav-btn.p-link:focus {\n    box-shadow: unset;\n  }\n\n  &:not(.freud-bgcolor) {\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\n      color: $neutral-color-dark-02;\n      border-color: $neutral-color-light-03;\n    }\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\n      color: $brand-color-pure;\n      border-color: $brand-color-pure;\n      .freud-icon {\n        color: $brand-color-pure;\n      }\n    }\n    .p-tabview-panel {\n      color: $neutral-color-dark-03;\n    }\n  }\n\n  &.freud-bgcolor {\n    .p-tabview-panel {\n      color: $neutral-color-white;\n    }\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\n      color: $brand-color-01;\n      border-color: $brand-color-01;\n      .freud-icon {\n        color: $brand-color-01;\n      }\n    }\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\n      color: $brand-color-03;\n      border-color: $brand-color-03;\n    }\n    .p-tabview .p-tabview-nav {\n      border-color: $brand-color-03;\n    }\n  }\n}\n",
                    "styleUrl": "./tab-view.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "activeIndex": {
                    "name": "activeIndex",
                    "setSignature": {
                        "name": "activeIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "activeIndex",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                }
            }
        },
        {
            "name": "FreudTagComponent",
            "id": "component-FreudTagComponent-0ee1e0559b609d344ab7286dbe88b5dd0f8a5761136302282cca21e6ad3cd22c4a54050258e3d40334946644e0f8a17a59e304b0a0a12851baf077d8f6a47a41",
            "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "template": "<p-tag [value]=\"value\" class=\"freud-tag-{{color || 'primary'}}\" [rounded]=\"true\"></p-tag>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "colors",
                    "decorators": []
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\n\ntype colors = 'primary' | 'success' | 'info' | 'warning' | 'error';\n\n@Component({\n  selector: 'freud-tag',\n  template: `\n    <p-tag [value]=\"value\" class=\"freud-tag-{{color || 'primary'}}\" [rounded]=\"true\"></p-tag>\n  `,\n  host: {\n    class: 'freud-tag freud-typography smallSemibold1-5',\n    '[class.outline]':  'outline'\n  },\n  styleUrls: ['./tag.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n})\nexport class FreudTagComponent {\n\n  @Input() value!: string;\n  @Input() color: colors = 'primary';\n  @Input() outline: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n\n.freud-tag .p-tag {\n  padding: 3px $spacing-size-nano;\n}\n.freud-tag .p-tag-value {\n    font-weight: $font-weight-semibold;\n    font-size: $font-size-xxxs;\n    line-height: 18px;\n}\n\n.freud-tag:not(.outline) {\n\n  .freud-tag-primary .p-tag {\n    background-color: $brand-color-pure;\n  }\n\n  .freud-tag-success .p-tag {\n    background-color: $feedback-color-positive-04;\n  }\n  .freud-tag-info .p-tag {\n    background-color: $feedback-color-neutral-pure;\n  }\n  .freud-tag-warning .p-tag {\n    background-color: $feedback-color-warning-pure;\n    color: $neutral-color-black;\n  }\n  .freud-tag-error .p-tag {\n    background-color: $feedback-color-negative-04;\n  }\n}\n\n.freud-tag.outline {\n  .p-tag {\n    background-color: $neutral-color-white;\n  }\n\n  .freud-tag-primary .p-tag {\n    border: 1px solid $brand-color-pure;\n    color: $brand-color-pure;\n  }\n\n  .freud-tag-success .p-tag {\n    border: 1px solid $feedback-color-positive-04;\n    color: $feedback-color-positive-04;\n  }\n  .freud-tag-info .p-tag {\n    border: 1px solid $feedback-color-neutral-pure;\n    color: $feedback-color-neutral-pure;\n  }\n  .freud-tag-warning .p-tag {\n    border: 1px solid $feedback-color-warning-04;\n    color: $feedback-color-warning-04;\n  }\n  .freud-tag-error .p-tag {\n    border: 1px solid $feedback-color-negative-04;\n    color: $feedback-color-negative-04;\n  }\n}\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudToastComponent",
            "id": "component-FreudToastComponent-f2733b6a1c2f38c9cfa0dcc954c47cf6935acc7af5d18bdf89707fe49bcb3d3c70445a0938ef915b6ee6e7e9292bf8256577ebed5d44ca3b57c9eeb6fcdfe47a",
            "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "template": "<p-toast [position]=\"position\" [key]=\"key\"></p-toast>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "positions",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from \"@angular/core\";\n\ntype positions = \"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\";\n\n@Component({\n  selector: 'freud-toast',\n  template: `\n    <p-toast [position]=\"position\" [key]=\"key\"></p-toast>\n  `,\n  styleUrls: ['./toast.component.scss'],\n  encapsulation: ViewEncapsulation.None,\n  host: {\n    class: 'freud-toast'\n  }\n})\nexport class FreudToastComponent {\n\n  @Input() position: positions = 'top-right';\n  @Input() key!: string;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-toast {\n  .p-toast .p-toast-message {\n    border: unset;\n    border-radius: $border-radius-md;\n    color: $neutral-color-dark-04;\n    box-shadow: unset;\n\n    .p-toast-message-content .p-toast-message-icon {\n      font-size: 24px;\n    }\n\n    &.p-toast-message-success {\n      background-color: $feedback-color-positive-01;\n      .p-toast-message-icon {\n        color: $feedback-color-positive-pure;\n      }\n    }\n\n    &.p-toast-message-info {\n      background-color: $feedback-color-neutral-01;\n      .p-toast-message-icon {\n        color: $feedback-color-neutral-pure;\n      }\n    }\n\n    &.p-toast-message-warn {\n      background-color: $feedback-color-warning-01;\n      .p-toast-message-icon {\n        color: $feedback-color-alert-pure;\n      }\n    }\n\n    &.p-toast-message-error {\n      background-color: $feedback-color-negative-01;\n      .p-toast-message-icon {\n        color: $feedback-color-negative-pure;\n      }\n    }\n\n    .freud-icon {\n      font-size: 31px;\n      margin-left: -5px;\n      margin-right: 4px;\n    }\n  }\n\n  .p-toast .p-toast-icon-close {\n    color:$neutral-color-dark-04 !important;\n  }\n  .p-toast .p-toast-message .p-toast-icon-close:focus {\n    box-shadow: unset;\n  }\n\n  .p-toast .p-message-summary {\n    @include typography($font-size-xs, $font-weight-bold, auto);\n  }\n\n  .p-toast-detail {\n    @include typography($font-size-xs, $font-weight-regular, auto);\n  }\n\n  .pi-exclamation-triangle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e903\";\n  }\n\n  .pi-info-circle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e9ed\";\n  }\n\n  .pi-times-circle:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e9b9\";\n  }\n  .pi-check:before {\n    font-family: 'Freud Icon' !important;\n    content: \"\\e973\";\n  }\n\n}\n",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudToastExampleComponent",
            "id": "component-FreudToastExampleComponent-c7f2e4988d05c59b827d273486ef97a7819c21dba878e4381573cd34fb93292456d7e8d765b582fe1d8b592eaca2e07edcf392196d6cff2341ad963f7ae3206f",
            "file": "stories/feedback/toast/toast-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-toast-examples",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-toast></freud-toast>\n<div style=\"display: flex; gap: 12px\">\n  <freud-button (click)=\"confirm('success', 'Success')\">Success</freud-button>\n  <freud-button (click)=\"confirm('info', 'Info')\">Info</freud-button>\n  <freud-button (click)=\"confirm('warn', 'Warning')\">Warning</freud-button>\n  <freud-button (click)=\"confirm('error', 'Error')\">Error</freud-button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { FreudMessageService } from \"../../../../projects/web-components/src/services/message.service\";\n\n@Component({\n  selector: 'freud-toast-examples',\n  template: `\n    <freud-toast></freud-toast>\n    <div style=\"display: flex; gap: 12px\">\n      <freud-button (click)=\"confirm('success', 'Success')\">Success</freud-button>\n      <freud-button (click)=\"confirm('info', 'Info')\">Info</freud-button>\n      <freud-button (click)=\"confirm('warn', 'Warning')\">Warning</freud-button>\n      <freud-button (click)=\"confirm('error', 'Error')\">Error</freud-button>\n    </div>\n  `,\n  styleUrls: ['./example.component.scss']\n})\nexport class FreudToastExampleComponent {\n\n  constructor(private messageService: FreudMessageService) {}\n\n  confirm(severity: string, summary: string) {\n    this.messageService.add({severity:severity, summary:summary, detail:'Message Content', sticky: true, life: 2000});\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "FreudMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "FreudMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudTooltipComponent",
            "id": "component-FreudTooltipComponent-34ba45530cd5c9a6296e135e523dd97a9e2ac3c041c9a888a3cdbc0690011a2ad5a51e87449bde8326da623f021de75696c0d2c7e6e3cc1639e8d944ff9746a2",
            "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "freudTooltip",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[freud-tooltip]",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "template": "<div [pTooltip]=\"tooltipLabel\" [tooltipPosition]=\"tooltipPosition\" [class.bgColor]=\"bgColor\"\n    [tooltipStyleClass]=\"bgColor ? 'freud-tooltip freud-bg-color' : 'freud-tooltip'\" class=\"freud-tooltip-container\">\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tooltipLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "position",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ViewEncapsulation } from '@angular/core';\nimport { Component, Input } from '@angular/core';\n\ntype position = 'top' | 'bottom' | 'left' | 'right';\n\n@Component({\n  selector: '[freud-tooltip]',\n  exportAs: 'freudTooltip',\n  template: `\n    <div [pTooltip]=\"tooltipLabel\" [tooltipPosition]=\"tooltipPosition\" [class.bgColor]=\"bgColor\"\n        [tooltipStyleClass]=\"bgColor ? 'freud-tooltip freud-bg-color' : 'freud-tooltip'\" class=\"freud-tooltip-container\">\n      <ng-content></ng-content>\n    </div>\n  `,\n  styleUrls: ['./tooltip.component.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class FreudTooltipComponent {\n\n  @Input() tooltipLabel: string = '';\n  @Input() tooltipPosition: position = 'top';\n  @Input() bgColor: boolean = false;\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\n@import '../../../../scss/typography';\n\n.freud-tooltip-container {\n    display:inline-block;\n    position:relative;\n}\n\n.p-tooltip {\n    .p-tooltip-text {\n        padding: 10.5px;\n        color: $neutral-color-white;\n        @include typography($font-size-xs, $font-weight-regular, 24px);\n        border-radius: $border-radius-md;\n        background-color:  $neutral-color-dark-03;\n        box-shadow: $shadow-level-3;\n    }\n}\n\n.p-tooltip.freud-bg-color {\n\n  &.p-tooltip-right .p-tooltip-arrow {\n    border-right-color: $neutral-color-white;\n  }\n  &.p-tooltip-left .p-tooltip-arrow {\n    border-left-color: $neutral-color-white;\n  }\n  &.p-tooltip-top .p-tooltip-arrow {\n    border-top-color: $neutral-color-white;\n  }\n  &.p-tooltip-bottom .p-tooltip-arrow {\n    border-bottom-color: $neutral-color-white;\n  }\n\n  .p-tooltip-text{\n    color: $neutral-color-dark-03;\n    background-color: $neutral-color-white;\n  }\n}\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTypographyComponent",
            "id": "component-FreudTypographyComponent-8ab32c1ef85ac2a75554383430c699e627b09721e1c3b783424799e6e573cadd0cc490ab0b0dc460786bd3786d7f69ec21ee22b683617494395ed2598dc6517c",
            "file": "projects/web-components/src/components/typography/typography.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "freudTypography",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[freud-typography]",
            "styleUrls": [
                "./typography.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fontBgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fontType",
                    "defaultValue": "'bodyRegular1-5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "fontTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  HostBinding,\n  Input,\n  ViewEncapsulation,\n} from '@angular/core';\nimport { bodyTypes, headingTypes } from './typrography.type';\n\nexport const types = headingTypes.concat(bodyTypes);\n\ntype fontTypes = typeof types[number];\n\n@Component({\n  selector: '[freud-typography]',\n  exportAs: 'freudTypography',\n  styleUrls: ['./typography.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  encapsulation: ViewEncapsulation.None,\n  template: `<ng-content></ng-content> `,\n  host: {\n    class: 'freud-typography',\n    '[class.typography-bg-color]': `fontBgColor`,\n  },\n})\nexport class FreudTypographyComponent {\n  @HostBinding('class') @Input() fontType: fontTypes = 'bodyRegular1-5';\n  @Input() fontBgColor: boolean = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../scss/typography.scss';\n",
                    "styleUrl": "./typography.component.scss"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "FreudAccordionModule",
            "id": "module-FreudAccordionModule-8626d063200ff59e56c197c92dac9b6453ca685a93dfce2a697c6d39cc5ba63244672875c4b72a3f9b820fcd4442ebbcab5256f4fb12a74073d16adab87653e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudAccordionComponent, FreudAccordionTabComponent } from './accordion.component';\nimport { Accordion, AccordionModule, AccordionTab } from \"primeng/accordion\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, AccordionModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudAccordionComponent, FreudAccordionTabComponent],\n  exports: [FreudAccordionComponent, FreudAccordionTabComponent, AccordionTab, Accordion]\n})\nexport class FreudAccordionModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAccordionComponent"
                        },
                        {
                            "name": "FreudAccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Accordion"
                        },
                        {
                            "name": "AccordionTab"
                        },
                        {
                            "name": "FreudAccordionComponent"
                        },
                        {
                            "name": "FreudAccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudActionIconModule",
            "id": "module-FreudActionIconModule-91939d096bd2514b2280bedd7e742cd98da11388df6a0d0c4cf92aef7bb3c0f5fd8b5dd667822e11315b4753725a60c67fad177053c1c2359b7b06f368cdfd9a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/action-icon/action-icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudActionIconComponent } from './action-icon.component';\n\n@NgModule({\n    imports: [CommonModule],\n  declarations: [FreudActionIconComponent],\n  exports: [FreudActionIconComponent]\n})\nexport class FreudActionIconModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudActionIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudActionIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAlertMessagesModule",
            "id": "module-FreudAlertMessagesModule-3a82a5178ba0a09f1b5a3f3d90ac182ab0f74b2191c49ce03aa08381793656e86b1db32247b1fc119fc9c0d6ed0a97f1d20ccbc4a12236572bd374d36d51ed2a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MessagesModule } from \"primeng/messages\";\nimport { MessageModule } from 'primeng/message';\n\nimport { FreudAlertMessageComponent, FreudAlertMessagesComponent } from './alert-messages.component';\nimport { FreudMessageService } from \"../../../services/message.service\";\nimport { MessageService } from \"primeng/api\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, MessageModule, MessagesModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudAlertMessagesComponent, FreudAlertMessageComponent],\n  exports: [FreudAlertMessagesComponent, FreudAlertMessageComponent],\n  providers: [FreudMessageService, MessageService]\n})\nexport class FreudAlertMessagesModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAlertMessageComponent"
                        },
                        {
                            "name": "FreudAlertMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAlertMessageComponent"
                        },
                        {
                            "name": "FreudAlertMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAutocompleteExampleModule",
            "id": "module-FreudAutocompleteExampleModule-ddd4348f39160fea614b224a7033b5c2d28130af6bb01218696e5197054a83d8263d32a27c37adb603bd8cb4db50cfac79d0647c5555865f72ec6fff3ec55513",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/auto-complete/auto-complete-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudAutoCompleteExampleComponent } from './example.component';\nimport {\n  FreudAutoCompleteModule,\n} from \"@freud-ds/web-components\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n@NgModule({\n  imports: [CommonModule, FreudAutoCompleteModule, ReactiveFormsModule, FormsModule],\n  declarations: [FreudAutoCompleteExampleComponent],\n  exports: [FreudAutoCompleteExampleComponent]\n})\nexport class FreudAutocompleteExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAutoCompleteModule",
            "id": "module-FreudAutoCompleteModule-faafc3c2819585a28057ce0309afcfe8d922a2114635b6cd9ab3ddfa904d909f6d181ad603ca983f5cf22301daf121bc6da4b0224f71720d68f61ba7eec620e6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/auto-complete/auto-complete.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudAutoCompleteComponent } from './auto-complete.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { AutoCompleteModule } from \"primeng/autocomplete\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, AutoCompleteModule, BrowserAnimationsModule, BrowserModule],\n  declarations: [FreudAutoCompleteComponent],\n  exports: [FreudAutoCompleteComponent]\n})\nexport class FreudAutoCompleteModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAvatarModule",
            "id": "module-FreudAvatarModule-c9b89e171e51b5db464ad33d238e0f9f4cad4891fa9eaba18bc01a225ef1ad54254477856e921bba92b05d9729c14905193ec8ec1b7fe25749b17f0a5e858e2b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AvatarModule } from 'primeng/avatar';\n\nimport { FreudAvatarComponent } from './avatar.component';\nimport { FreudBadgeModule } from '../../feedback/badge';\n\n@NgModule({\n  imports: [CommonModule, AvatarModule, FreudBadgeModule],\n  declarations: [FreudAvatarComponent],\n  exports: [FreudAvatarComponent]\n})\nexport class FreudAvatarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAvatarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudBadgeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAvatarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBadgeModule",
            "id": "module-FreudBadgeModule-cb85342653c1c26cf56eaa7d64c973ea84591325af5dff19db6ac8dff07cd27cfeb480ada1c09286cd5845ce26c1935fb679f740ebf3279c50b61378129630ec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/badge/badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { BadgeModule } from 'primeng/badge';\n\nimport { FreudBadgeComponent } from './badge.component';\n\n@NgModule({\n  imports: [CommonModule, BadgeModule],\n  declarations: [FreudBadgeComponent],\n  exports: [FreudBadgeComponent],\n})\nexport class FreudBadgeModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBlockExampleModule",
            "id": "module-FreudBlockExampleModule-bd7ca94908c7f121263e55b8dbd54ffcdf88477491e15ed357b1a66c3f3df97e2148079a35a786d317e9163f169f92561b7656beb7903fd70ddd22b0e9efe85d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/others/block-ui/block-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudBlockExampleComponent } from './example.component';\nimport {\n  FreudBlockUIModule, FreudButtonModule, FreudCardModule,\n} from \"@freud-ds/web-components\";\n\n@NgModule({\n  imports: [CommonModule, FreudBlockUIModule, FreudButtonModule, FreudCardModule],\n  declarations: [FreudBlockExampleComponent],\n  exports: [FreudBlockExampleComponent]\n})\nexport class FreudBlockExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBlockExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudBlockUIModule"
                        },
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBlockExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBlockUIModule",
            "id": "module-FreudBlockUIModule-5f0adb5f042f24fcca6011d34c67079b3229c867e99298e58ed8594e26e40e3452832ce77ca455a11091d47bd7fcc8fc606e433ba578c4fbfbdf04481a93fe6e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/block-ui/block-ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudBlockUIComponent } from './block-ui.component';\nimport { BlockUIModule } from \"primeng/blockui\";\n\n@NgModule({\n  imports: [CommonModule, BlockUIModule],\n  declarations: [FreudBlockUIComponent],\n  exports: [FreudBlockUIComponent]\n})\nexport class FreudBlockUIModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBlockUIComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBlockUIComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBreadcrumbModule",
            "id": "module-FreudBreadcrumbModule-3178eb054cbcb06e57994a6b3999cdee3cadc87ecccb380543413ceac4b160964c8e2efaa86bc8f9923eb0e4bec8b258dc9f4b36190fdaf0fb98c6c420107838",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudBreadcrumbComponent } from './breadcrumb.component';\nimport { BreadcrumbModule } from \"primeng/breadcrumb\";\n\n@NgModule({\n  imports: [CommonModule, BreadcrumbModule],\n  declarations: [FreudBreadcrumbComponent],\n  exports: [FreudBreadcrumbComponent]\n})\nexport class FreudBreadcrumbModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudButtonModule",
            "id": "module-FreudButtonModule-2f90f896159dc9f8aa750405057a59b7bc316a6108fbe51c8cdf60e8147b57cc1e7a8fddbb5e403d7855a548db906ce2c35e728fc2fa700e7ffb1810b3a39504",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ButtonModule } from 'primeng/button';\n\nimport { FreudButtonComponent } from './button.component';\n\n@NgModule({\n  imports: [CommonModule, ButtonModule],\n  declarations: [FreudButtonComponent],\n  exports: [FreudButtonComponent]\n})\nexport class FreudButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCalendarModule",
            "id": "module-FreudCalendarModule-b01b2889ee948619b18a0b9757c6e39352903cfeb154dfc15e0d4e73a55dd9450fc353699a73c87df35bee5b49a5e3daa698a033fda348e0f209b9ff751e311e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/calendar/calendar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudCalendarComponent } from './calendar.component';\nimport {FormsModule} from \"@angular/forms\";\nimport { CalendarModule } from \"primeng/calendar\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, CalendarModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudCalendarComponent],\n  exports: [FreudCalendarComponent]\n})\nexport class FreudCalendarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCaptchaModule",
            "id": "module-FreudCaptchaModule-a06e31b4e852ad625678674efefc04b25637188443c59b859efdf757c0c8f4a4c9d2108aefa5e1300b8a966a0f1a6042d4ed220b409132ecae169a342477ad9c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/captcha/captcha.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudCaptchaComponent } from './captcha.component';\nimport { CaptchaModule } from \"primeng/captcha\";\n\n@NgModule({\n  imports: [CommonModule, CaptchaModule],\n  declarations: [FreudCaptchaComponent],\n  exports: [FreudCaptchaComponent]\n})\nexport class FreudCaptchaModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCaptchaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCaptchaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCardModule",
            "id": "module-FreudCardModule-67e7ae5b30e7bc8a6d5044f4a92712c01da46f4817648fbcb8134be7b32040ed1721c2aa28e9446b02ad6e25d19ed4fbc5934f93f0b8789169f05af7292010ba",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/card/card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudCardComponent } from './card.component';\nimport { CardModule } from \"primeng/card\";\n\n@NgModule({\n  imports: [CommonModule, CardModule],\n  declarations: [FreudCardComponent],\n  exports: [FreudCardComponent]\n})\nexport class FreudCardModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCascadeSelectModule",
            "id": "module-FreudCascadeSelectModule-e2cebefe63a7d3c825da1e9ed8435fe49b0d864812f38fa287822189918bbb7ba162b55e90ccfebdc81530e76d45f8d001b4a4a4e29db33dc18f8b4885fb465f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/cascade-select/cascade-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudCascadeSelectComponent } from './cascade-select.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { CascadeSelectModule } from \"primeng/cascadeselect\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, CascadeSelectModule, BrowserAnimationsModule, BrowserModule],\n  declarations: [FreudCascadeSelectComponent],\n  exports: [FreudCascadeSelectComponent]\n})\nexport class FreudCascadeSelectModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCascadeSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCascadeSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCheckboxModule",
            "id": "module-FreudCheckboxModule-5ef2fed93fb89ca4998b615929d70f8c85cb1802d732d51f7885e6e29f7d980239c0d1316cec4d6a0b9be130406abee195d1cedc4d980792e4096ad055befcaa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudCheckboxComponent } from './checkbox.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { CheckboxModule } from \"primeng/checkbox\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n    imports: [CommonModule, CheckboxModule, FormsModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudCheckboxComponent],\n  exports: [FreudCheckboxComponent]\n})\nexport class FreudCheckboxModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudChipModule",
            "id": "module-FreudChipModule-42befe6355fbb83b250fc76394f5333a7f7bdbf53a1e264accfccebf5d91d32800b2896f033f33116072a07a1d858a00de86ae8497632855fa719cbc78b922d8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/chip/chip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudChipComponent } from './chip.component';\nimport { ChipModule } from \"primeng/chip\";\n\n@NgModule({\n  imports: [CommonModule, ChipModule],\n  declarations: [FreudChipComponent],\n  exports: [FreudChipComponent]\n})\nexport class FreudChipModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudChipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudChipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmDialogModule",
            "id": "module-FreudConfirmDialogModule-6fcb2582798c1a237738ae3679bbe636973a3aaaf43e19252b6c866bbdbf7fcd7cb790b96abdd0f393559c46a07db8d935d67443cc5fa438c94aab151d437f6a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudConfirmDialogComponent } from './confirm-dialog.component';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { ConfirmDialogModule } from \"primeng/confirmdialog\";\nimport { ConfirmationService } from \"primeng/api\";\nimport { FreudButtonModule } from \"../../buttons/button\";\nimport { FreudConfirmationService } from \"../../../services/confirmation.service\";\n\n@NgModule({\n  imports: [CommonModule, ConfirmDialogModule, BrowserModule, BrowserAnimationsModule, FreudButtonModule],\n  declarations: [FreudConfirmDialogComponent],\n  exports: [FreudConfirmDialogComponent],\n  providers: [\n    FreudConfirmationService,\n    ConfirmationService\n  ]\n})\nexport class FreudConfirmDialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudConfirmationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmPopupExampleModule",
            "id": "module-FreudConfirmPopupExampleModule-95984cba99fb49a4bfef6d883eec38424696716898792c035a2f35b64a348effd14f028d166c296b1b5bc38d562467002602b90114d8ece32fd6a8ada4d911a5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudConfirmPopupExampleComponent } from './example.component';\nimport { FreudButtonModule, FreudConfirmPopupModule } from \"@freud-ds/web-components\";\n\n@NgModule({\n  imports: [CommonModule, FreudConfirmPopupModule, FreudButtonModule],\n  declarations: [FreudConfirmPopupExampleComponent],\n  exports: [FreudConfirmPopupExampleComponent]\n})\nexport class FreudConfirmPopupExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudConfirmPopupModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmPopupModule",
            "id": "module-FreudConfirmPopupModule-614007e911d10bbf5a66c4cb7b3c73592fd63a0e3e76ec576e5c719417a973e44a2b22a32955626f04c6ebb9c401a1eb47077695ad69219220d8878e0e99adee",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudConfirmPopupComponent } from './confirm-popup.component';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { ConfirmationService } from \"primeng/api\";\nimport { FreudConfirmationService } from \"../../../services/confirmation.service\";\nimport { ConfirmPopupModule } from \"primeng/confirmpopup\";\n\n@NgModule({\n  imports: [CommonModule, ConfirmPopupModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudConfirmPopupComponent],\n  exports: [FreudConfirmPopupComponent],\n  providers: [\n    FreudConfirmationService,\n    ConfirmationService\n  ]\n})\nexport class FreudConfirmPopupModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudConfirmationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDialogExampleModule",
            "id": "module-FreudDialogExampleModule-b9b813d0af2583b679bf1113f597f2e73908dd4b3a253f71277ac86476ac15a3b4bc8efdc820c8ec6e890eeb8e3efc6cc0797264f5e984614f93c481d56cc29a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/dialog/dialog-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudDialogExampleComponent } from './example.component';\nimport { FreudButtonModule, FreudDialogModule } from \"@freud-ds/web-components\";\n\n@NgModule({\n  imports: [CommonModule, FreudDialogModule, FreudButtonModule],\n  declarations: [FreudDialogExampleComponent],\n  exports: [FreudDialogExampleComponent]\n})\nexport class FreudDialogExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDialogModule",
            "id": "module-FreudDialogModule-7d797b9c5031e5c4aac8d8a0c89d670189459c9b449598b3756d52bb5e512ea4daede10302567207dfe84438b3eefc2fd3979e7a339ee309e5302c8cdb01c3e7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudDialogComponent } from './dialog.component';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { DialogModule } from \"primeng/dialog\";\nimport { FormsModule } from \"@angular/forms\";\n\n@NgModule({\n    imports: [CommonModule, DialogModule, BrowserModule, BrowserAnimationsModule, FormsModule],\n  declarations: [FreudDialogComponent],\n  exports: [FreudDialogComponent],\n  providers: []\n})\nexport class FreudDialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDividerModule",
            "id": "module-FreudDividerModule-d67c2b088a0bca8ade93910c187a37d0667eeb658678331605e6f08e610976bbc90d5ee73670be6e496b3aef7be1d4b1e99e5a1d41a5fbc6b814574ce95f8e89",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/divider/divider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudDividerComponent } from './divider.component';\nimport { DividerModule } from \"primeng/divider\";\n\n@NgModule({\n  imports: [CommonModule, DividerModule],\n  declarations: [FreudDividerComponent],\n  exports: [FreudDividerComponent]\n})\nexport class FreudDividerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDividerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDividerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDynamicDialogModule",
            "id": "module-FreudDynamicDialogModule-ee4a190a10d00da25600e2cea756dd9f7138d754d4bbd47f795d31fb40093d9dbd6ccbc948222ba5970759bf2967d8a99566fd77083cfd77458de56f4b01aa5f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DialogService } from \"primeng/dynamicdialog\";\nimport { DynamicDialogModule } from \"primeng/dynamicdialog\";\nimport { FreudDialogService, FreudDynamicDialogRef } from \"./dynamic-dialog.service\";\n\n@NgModule({\n  imports: [CommonModule, DynamicDialogModule],\n  providers: [\n    FreudDialogService,\n    FreudDynamicDialogRef,\n    DialogService\n  ]\n})\nexport class FreudDynamicDialogModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudDialogService"
                        },
                        {
                            "name": "FreudDynamicDialogRef"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDynamicExampleModule",
            "id": "module-FreudDynamicExampleModule-ea1e2778ee963e717276710267acf9a05dbca3377ebbf62c8d8a484974b08791716823f9ebf17d171eec135d0bf3ada7405080038f58965a6d7c7b0c0baa14f1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent } from './example.component';\nimport { FreudButtonModule, FreudDynamicDialogModule } from \"@freud-ds/web-components\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, FreudDynamicDialogModule, FreudButtonModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent],\n  exports: [FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent],\n  entryComponents: [FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent]\n})\nexport class FreudDynamicExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDynamicDialogExampleComponent"
                        },
                        {
                            "name": "FreudDynamicExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudDynamicDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDynamicDialogExampleComponent"
                        },
                        {
                            "name": "FreudDynamicExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudFileUploadModule",
            "id": "module-FreudFileUploadModule-c27de61cf920cf7c9441a50d824423172f38f25c058ef969b374076e79d156fcd87244a53a4e1cc956bb5a1b9f8e85b260c673e5b4a335726cffff599448b79d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/fille-upload/file-upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudFileUploadComponent } from './file-upload.component';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { FormsModule } from \"@angular/forms\";\nimport { FileUploadModule } from \"primeng/fileupload\";\nimport { HttpClientModule } from \"@angular/common/http\";\n\n@NgModule({\n  imports: [CommonModule, FileUploadModule, BrowserModule, BrowserAnimationsModule, FormsModule, HttpClientModule],\n  declarations: [FreudFileUploadComponent],\n  exports: [FreudFileUploadComponent]\n})\nexport class FreudFileUploadModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudFileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudFileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudFullCalendarModule",
            "id": "module-FreudFullCalendarModule-d05ed94ed1cf4e17ff3b2e3d23a330ce151874dba9da412671f7869f5f67cad85524bf2e4a045dea69bbec95a3188cecd94ded5014b8cfb556581c08a30a9479",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/full-calendar/full-calendar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudFullCalendarComponent } from './full-calendar.component';\nimport {FormsModule} from \"@angular/forms\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { FullCalendarModule } from \"@fullcalendar/angular\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, FullCalendarModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudFullCalendarComponent],\n  exports: [FreudFullCalendarComponent]\n})\nexport class FreudFullCalendarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudFullCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudFullCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudGalleryModule",
            "id": "module-FreudGalleryModule-715c16e0e5149fcf19cf31b343d6eb9cefd413441c6f86fea678382a8877e784541bea40273a1d29ad2cc29275f61680a654c864e41520ca006bf18ac0323434",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/gallery/gallery.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudGalleryComponent } from './gallery.component';\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { GalleriaModule } from \"primeng/galleria\";\n\n@NgModule({\n  imports: [CommonModule, GalleriaModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudGalleryComponent],\n  exports: [FreudGalleryComponent]\n})\nexport class FreudGalleryModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudGalleryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudGalleryComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudHeaderModule",
            "id": "module-FreudHeaderModule-45fcf147e46c491a2de1d0d5150b0847d297e0f29fe6f7d7f92ecc50cfa8ce158f8d3f9d88407af22a6a36465da288f8f0c11efc4d624614719aa7268443ba7e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/header/header.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudHeaderComponent } from './header.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [FreudHeaderComponent],\n  exports: [FreudHeaderComponent]\n})\nexport class FreudHeaderModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudImageModule",
            "id": "module-FreudImageModule-2c8d472518d45c86040791f69226cf475a118bbff733461ec77d932fcb0a14b0ec85cae1100c0db135fcf69a4984eba97407726fc16947a1807dffd4c3ed8c18",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/image/image.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudImageComponent } from './image.component';\nimport { ImageModule } from \"primeng/image\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, ImageModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudImageComponent],\n  exports: [FreudImageComponent]\n})\nexport class FreudImageModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudImageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudImageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputMaskModule",
            "id": "module-FreudInputMaskModule-612189414d74ac277f46a1be0d48002ab31ebe6f09f62afa483c66007561f74038efebfceba0b52ecdba127a0c823a074f3fdf2d57265873a8f11a6a66c238a3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-mask/input-mask.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudInputMaskComponent } from './input-mask.component';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { InputMaskModule } from \"primeng/inputmask\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, InputMaskModule, ReactiveFormsModule],\n  declarations: [FreudInputMaskComponent],\n  exports: [FreudInputMaskComponent]\n})\nexport class FreudInputMaskModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputMaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputMaskComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputNumberModule",
            "id": "module-FreudInputNumberModule-4eb5d4c3ce42ca00a6edac3f8d798cdc82211e624220d52db111dab366c461d1695601334b43f122ecfe8fc6f9f60c8e57e40e7592eb6087b5384b375ce2ee24",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-number/input-number.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudInputNumberComponent } from './input-number.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { InputNumberModule } from \"primeng/inputnumber\";\n\n@NgModule({\n  imports: [CommonModule, InputNumberModule, FormsModule],\n  declarations: [FreudInputNumberComponent],\n  exports: [FreudInputNumberComponent]\n})\nexport class FreudInputNumberModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputNumberComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputNumberComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputPasswordModule",
            "id": "module-FreudInputPasswordModule-e1bac75c14219dad8e139b668d4f30fa8657bc1614192e15d426fb2c2da866c15caeb2acb972896af487dca4e6fd32e024916f061cfbdf1c32a0953bddc53ecb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-password/input-password.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudInputPasswordComponent } from './input-password.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { PasswordModule } from \"primeng/password\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\n@NgModule({\n    imports: [\n      CommonModule, FormsModule, PasswordModule, BrowserAnimationsModule,\n      BrowserModule],\n  declarations: [FreudInputPasswordComponent],\n  exports: [FreudInputPasswordComponent]\n})\nexport class FreudInputPasswordModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputTextAreaModule",
            "id": "module-FreudInputTextAreaModule-c984e9e94ec0e2013cf5e635f26d210c67a7ba217f5130fd74735551b2d449fde8ed12eb6a002192f1baf79775fdc374d157de27e1fa8c35b97ef22f302a48b9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-textarea/input-textarea.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudInputTextAreaComponent } from './input-textarea.component';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { InputTextareaModule } from \"primeng/inputtextarea\";\n\n@NgModule({\n  imports: [CommonModule, InputTextareaModule, FormsModule, ReactiveFormsModule],\n  declarations: [FreudInputTextAreaComponent],\n  exports: [FreudInputTextAreaComponent]\n})\nexport class FreudInputTextAreaModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputTextModule",
            "id": "module-FreudInputTextModule-a178f011a6ef5e128f726b37956a69370cdbb35f4aee99b0149e34cbacd97665dc41eb348280a08a4a93a43d2591dab64a8fedd508c19cfaf144ba18014fa994",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-text/input-text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudInputTextComponent } from './input-text.component';\nimport { InputTextModule } from \"primeng/inputtext\";\nimport { FormsModule } from \"@angular/forms\";\n\n@NgModule({\n  imports: [CommonModule, InputTextModule, FormsModule],\n  declarations: [FreudInputTextComponent],\n  exports: [FreudInputTextComponent]\n})\nexport class FreudInputTextModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudKnobModule",
            "id": "module-FreudKnobModule-31693a81005cd5faeef38613fad1be4287a491732f107497bbbc2907246770bcb391cefe6afc5858702ef2652721ff788375a309cafdcc6bd1565aa710f800cc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/knob/knob.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { KnobModule } from 'primeng/knob';\n\nimport { FreudKnobComponent } from './knob.component';\nimport { FormsModule } from '@angular/forms';\n\n@NgModule({\n  imports: [CommonModule, KnobModule, FormsModule],\n  declarations: [FreudKnobComponent],\n  exports: [FreudKnobComponent]\n})\nexport class FreudKnobModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudKnobComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudKnobComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudListboxModule",
            "id": "module-FreudListboxModule-239f36d9a1783edd2081d52a2e3f64d1c384d68164c9d801be38f67ce95221628b9b718bbff80eba7269563d0eb36e2fe1765057ec3ff2e7aef0de6c999672d8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/listbox/listbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudListboxComponent } from './listbox.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { ListboxModule } from \"primeng/listbox\";\nimport { FreudInputTextModule } from \"../input-text\";\n\n@NgModule({\n    imports: [CommonModule, FormsModule, ListboxModule, BrowserAnimationsModule, BrowserModule, FreudInputTextModule],\n  declarations: [FreudListboxComponent],\n  exports: [FreudListboxComponent]\n})\nexport class FreudListboxModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudListboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudInputTextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudListboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudLoaderModule",
            "id": "module-FreudLoaderModule-867c2831fb169071aa7738e44f86be2b6d2588bdd20dcc3403741850c2da2ac36d45da9154783e5bc1194017ec4d4e55843b938c0025e8a64df9fdb094fb2ee8",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/loader/loader.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudLoaderComponent } from './loader.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [FreudLoaderComponent],\n  exports: [FreudLoaderComponent],\n})\nexport class FreudLoaderModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudLoaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudLoaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMenubarModule",
            "id": "module-FreudMenubarModule-370a7b058742316edbe882a8a7aee0fa562532965b0c1560c26403db5a63d5dca64b1f521b876e07ef2c15c6d6bfabcfeef3fbcda7323c21270c18190dc774a4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/menubar/menubar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudMenubarComponent } from './menubar.component';\nimport { MenubarModule } from \"primeng/menubar\";\nimport { SharedModule } from \"primeng/api\";\n\n@NgModule({\n    imports: [CommonModule, MenubarModule, SharedModule],\n  declarations: [FreudMenubarComponent],\n  exports: [FreudMenubarComponent]\n})\nexport class FreudMenubarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMenubarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMenubarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMenuModule",
            "id": "module-FreudMenuModule-af450a10d3295803861fa4a1b65a47d209c5ed4072a03fdbb626278f8b91d7f2a304f2b05f714cf3c58e7221b72dced06b0142b4d3d8f4ac6a30c8a9342f18d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudMenuComponent } from \"./menu.component\";\nimport { MenuModule } from \"primeng/menu\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { RouterModule } from \"@angular/router\";\n\n@NgModule({\n  imports: [CommonModule, MenuModule, BrowserModule, BrowserAnimationsModule, RouterModule],\n  declarations: [FreudMenuComponent],\n  exports: [FreudMenuComponent]\n})\nexport class FreudMenuModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudModalExampleModule",
            "id": "module-FreudModalExampleModule-5357c5adc100268f6b8f7519ee82aa062ea4f2cd9a49176a0e5e5d0944a2158024d378e62e5784a790b8d9eb1285834b2fd2b4b398d2df4623fbc61ccb6e5c16",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/modal-and-popover-examples/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudConfirmationDialogExampleComponent } from './example.component';\nimport { FreudButtonModule, FreudConfirmDialogModule } from \"@freud-ds/web-components\";\n\n@NgModule({\n  imports: [CommonModule, FreudConfirmDialogModule, FreudButtonModule],\n  declarations: [FreudConfirmationDialogExampleComponent],\n  exports: [FreudConfirmationDialogExampleComponent]\n})\nexport class FreudModalExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmationDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudConfirmDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmationDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMultiSelectModule",
            "id": "module-FreudMultiSelectModule-5beccdd5425a71b628c2c6ed91ba1ff6c04ffc2e2f08e65830ca43a113f054a39f91ed9fb0fc9d0739c57d6398ce72a31fba2d36b76a9d121fda01edf18e2faa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/multi-select/multi-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudMultiSelectComponent } from './multi-select.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { MultiSelectModule } from \"primeng/multiselect\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, MultiSelectModule, BrowserAnimationsModule, BrowserModule],\n  declarations: [FreudMultiSelectComponent],\n  exports: [FreudMultiSelectComponent]\n})\nexport class FreudMultiSelectModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudPaginatorModule",
            "id": "module-FreudPaginatorModule-c6b7c452c639929ebc4bda710abc2ef005b4475c78c4bb72d11b11892fac12630a4f1f6650d33b94d1107a4d7357ce4412cd7886f1003f4ce45e0f7f44df0079",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/paginator/paginator.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudPaginatorComponent } from './paginator.component';\nimport { PaginatorModule } from \"primeng/paginator\";\n\n@NgModule({\n  imports: [CommonModule, PaginatorModule],\n  declarations: [FreudPaginatorComponent],\n  exports: [FreudPaginatorComponent]\n})\nexport class FreudPaginatorModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudPaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudPaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudPanelMenuModule",
            "id": "module-FreudPanelMenuModule-649dc373214d914c8b068bcf3214084ad5007ff2029d7ab782b705d479de82831f1a7a7d2f3ebee4aff4e84e8585ea887f3fe88d3beea38a611ad33dcfb7b644",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/panel-menu/panel-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudPanelMenuComponent } from \"./panel-menu.component\";\nimport { PanelMenuModule } from \"primeng/panelmenu\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, PanelMenuModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudPanelMenuComponent],\n  exports: [FreudPanelMenuComponent]\n})\nexport class FreudPanelMenuModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudPanelMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudPanelMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudPanelModule",
            "id": "module-FreudPanelModule-86f22633a2ea19f7df96e3d7d748736fa6c72de98be3b1cd068077696cd6effccc89eb7aaa8a9d3a32d1fcbdf2ea89fab55de587b191303ea9c0eda7cb0c43d6",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/panel/panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudPanelComponent } from \"./panel.component\";\nimport { PanelModule } from \"primeng/panel\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, PanelModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudPanelComponent],\n  exports: [FreudPanelComponent]\n})\nexport class FreudPanelModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudProgressBarModule",
            "id": "module-FreudProgressBarModule-137c83cd3f4d2ce314b24e9562178ad9df440cd4168290e2a9986201c43ee72f0fc549e9846cd7307cf5b97cc02642bb94e101867bf1e072282ad0ba9e4f2f76",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/progress-bar/progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudProgressBarComponent } from './progress-bar.component';\nimport { ProgressBarModule } from \"primeng/progressbar\";\n\n@NgModule({\n  imports: [CommonModule, ProgressBarModule],\n  declarations: [FreudProgressBarComponent],\n  exports: [FreudProgressBarComponent]\n})\nexport class FreudProgressBarModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudProgressSpinnerModule",
            "id": "module-FreudProgressSpinnerModule-ae089c5b8c2f9c68dff817becbe235bfb47809cdf511ae4b17e35d24eb3b154f02b96843d69e20308d2a2c1bf8110bd612dc8c8d3d163ecd7e64d7a56a4e2093",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudProgressSpinnerComponent } from './progress-spinner.component';\nimport { ProgressSpinnerModule } from \"primeng/progressspinner\";\n\n@NgModule({\n  imports: [CommonModule, ProgressSpinnerModule],\n  declarations: [FreudProgressSpinnerComponent],\n  exports: [FreudProgressSpinnerComponent]\n})\nexport class FreudProgressSpinnerModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudProgressSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudProgressSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRadioButtonExampleModule",
            "id": "module-FreudRadioButtonExampleModule-b77c93a8e652a34bcf0a5728e828df3d1947793a3e42aeb479ffde2cd0c450569be0653d12e5f6b200e337eb084360167e4774e990da480cda8db2b1488f571d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/radio-button/radio-button-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudRadioButtonExampleComponent } from './example.component';\nimport {\n  FreudRadioButtonModule,\n} from \"@freud-ds/web-components\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n@NgModule({\n  imports: [CommonModule, FreudRadioButtonModule, ReactiveFormsModule, FormsModule],\n  declarations: [FreudRadioButtonExampleComponent],\n  exports: [FreudRadioButtonExampleComponent]\n})\nexport class FreudRadioButtonExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRadioButtonExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRadioButtonModule",
            "id": "module-FreudRadioButtonModule-a3eb2655f3fc2e5aa5ee720c45f0a3bb17c5c7c673443b5401ef138baab9b973460f31eebcee536609e1de4eccf4f33b2b6a93ed9c0cb7d1e295a63b3a85d9c3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/radio-button/radio-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudRadioButtonComponent } from './radio-button.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { RadioButtonModule } from \"primeng/radiobutton\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n    imports: [CommonModule, RadioButtonModule, FormsModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudRadioButtonComponent],\n  exports: [FreudRadioButtonComponent]\n})\nexport class FreudRadioButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRatingModule",
            "id": "module-FreudRatingModule-ab6a75beeb35fcf23ce96fd2e78b2ed51247e1ab84b7bdae0a6d32497817d965b79a4fe073bd04714161080848bdd42eee1e28f5a515d0516758989e3226e64c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/rating/rating.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { RatingModule } from \"primeng/rating\";\n\nimport { FreudRatingComponent } from './rating.component';\nimport { FormsModule } from \"@angular/forms\";\n\n@NgModule({\n  imports: [CommonModule, RatingModule, FormsModule],\n  declarations: [FreudRatingComponent],\n  exports: [FreudRatingComponent]\n})\nexport class FreudRatingModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRatingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRatingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudReactiveFormExampleModule",
            "id": "module-FreudReactiveFormExampleModule-d854f495248c3946899be18705afd2a141f75adfe3320abac570bdee86b0ecca18e959982115da6d9775f6909ee759645c1d0a531545d16ba0ce82caff037be3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/reactive-form-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudReactiveFormExampleComponent } from './example.component';\nimport {\n  FreudButtonModule,\n  FreudInputTextModule\n} from \"@freud-ds/web-components\";\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\n\n@NgModule({\n  imports: [CommonModule, FreudInputTextModule, FreudButtonModule, ReactiveFormsModule, FormsModule],\n  declarations: [FreudReactiveFormExampleComponent],\n  exports: [FreudReactiveFormExampleComponent]\n})\nexport class FreudReactiveFormExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudReactiveFormExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudInputTextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudReactiveFormExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollPanelModule",
            "id": "module-FreudScrollPanelModule-e0555501e837b849b28841c163a846d5c6d1f9cd82346fd5ad3ff52934001e8d6fc0599af5da6c3e0034107cc652463b494fdcebba2a13f6b9707377ddaedb30",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudScrollPanelComponent } from \"./scroll-panel.component\";\nimport { ScrollPanelModule } from \"primeng/scrollpanel\";\n\n@NgModule({\n  imports: [CommonModule, ScrollPanelModule],\n  declarations: [FreudScrollPanelComponent],\n  exports: [FreudScrollPanelComponent]\n})\nexport class FreudScrollPanelModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudScrollPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollTopModule",
            "id": "module-FreudScrollTopModule-ff3a8658b699fe86577cc95619063ee2066c716f4c9e51f551f36ed054c64946f2cf2d80d9364728838ed536d7cf1757703ea14696e3babe24e8bc561138e718",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/scroll-top/scroll-top.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudScrollTopComponent } from './scroll-top.component';\nimport { ScrollTopModule } from \"primeng/scrolltop\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, ScrollTopModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudScrollTopComponent],\n  exports: [FreudScrollTopComponent]\n})\nexport class FreudScrollTopModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollTopModule",
            "id": "module-FreudScrollTopModule-ad5408bd358b82e842c3910b703c5d57413b76f87af0cf7621de249cf6c072ee96116eca0d9b02bcd27578a18825b872794e711713551eb84871358d68b7efef-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/timeline/timeline.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudScrollTopComponent } from './timeline.component';\nimport { ScrollTopModule } from \"primeng/scrolltop\";\nimport { TimelineModule } from \"primeng/timeline\";\n\n@NgModule({\n    imports: [CommonModule, ScrollTopModule, TimelineModule],\n  declarations: [FreudScrollTopComponent],\n  exports: [FreudScrollTopComponent]\n})\nexport class FreudScrollTopModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSelectButtonModule",
            "id": "module-FreudSelectButtonModule-9886d4035bc77ff18ce2fbf836e2c457df067ed1da698d1b4699f0ce6959d99ffcf3d6b2bbf6d99d2e10209bd637ce53b7a4c2f7189143eedea890887328bd0f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/select-button/select-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SelectButtonModule } from 'primeng/selectbutton';\n\nimport { FreudSelectButtonComponent } from './select-button.component';\nimport {FormsModule} from \"@angular/forms\";\n\n@NgModule({\n    imports: [CommonModule, SelectButtonModule, FormsModule],\n  declarations: [FreudSelectButtonComponent],\n  exports: [FreudSelectButtonComponent]\n})\nexport class FreudSelectButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSelectButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSelectButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSelectModule",
            "id": "module-FreudSelectModule-20f7fa70fa35e1f602c391e5943fffb0a1f019753fad92f67ee4f149951353e5968f71a0a884694e197be2f6d9d1c23cfbc953feb63ff1dddeb8a8b466618f8b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSelectComponent } from './select.component';\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\nimport { DropdownModule } from \"primeng/dropdown\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\n@NgModule({\n  imports: [CommonModule, FormsModule, DropdownModule, ReactiveFormsModule, BrowserAnimationsModule, BrowserModule],\n  declarations: [FreudSelectComponent],\n  exports: [FreudSelectComponent]\n})\nexport class FreudSelectModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSkeletonModule",
            "id": "module-FreudSkeletonModule-903c9727292ee1fe03c7324529395b7393866a16ad86d3fdf0ab5422c1ccc92cbd097d2daee26c4758cc5d152a291824486576bd228d8e91b9d403d68b0101d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/skeleton/skeleton.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSkeletonComponent } from './skeleton.component';\nimport { SkeletonModule } from \"primeng/skeleton\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, SkeletonModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudSkeletonComponent],\n  exports: [FreudSkeletonComponent]\n})\nexport class FreudSkeletonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSlideMenuModule",
            "id": "module-FreudSlideMenuModule-583f5fe8ab838ed88b0dbe8a16c8be311a0842f0a6346ed53ecd75a88de8dbd522daadaee5a9f279247444b4438c220f7359806fad08c26f69080641b18d4b4a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/slide-menu/slide-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSlideMenuComponent } from \"./slide-menu.component\";\nimport { SlideMenuModule } from \"primeng/slidemenu\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, SlideMenuModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudSlideMenuComponent],\n  exports: [FreudSlideMenuComponent]\n})\nexport class FreudSlideMenuModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSlideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSlideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSliderModule",
            "id": "module-FreudSliderModule-d1aa61e85563fdcc12f7a4ac76ea578e580846cb4e79c8a9064ffa2ce6d59a7ccc61a2cafe6aea77c2654e30cfab018faccce0f96401d67cb6aefb734a882800",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/slider/slider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSliderComponent } from './slider.component';\nimport {FormsModule} from \"@angular/forms\";\nimport { SliderModule } from \"primeng/slider\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n    imports: [CommonModule, SliderModule, FormsModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudSliderComponent],\n  exports: [FreudSliderComponent]\n})\nexport class FreudSliderModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSliderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSliderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSpeedDialModule",
            "id": "module-FreudSpeedDialModule-87137daf6fcd4e75be9f987f45ac375947be0679acb426e1418ee50cf82d91fabf3fb30ee69c7fbe3829a04115f9e0768a07672cc68903756287623eaf961fec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSpeedDialComponent } from './speed-dial.component';\nimport { SpeedDialModule } from \"primeng/speeddial\";\nimport { FreudTooltipModule } from \"../../feedback/tooltip\";\n\n@NgModule({\n    imports: [CommonModule, SpeedDialModule, FreudTooltipModule],\n  declarations: [FreudSpeedDialComponent],\n  exports: [FreudSpeedDialComponent]\n})\nexport class FreudSpeedDialModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSpeedDialComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSpeedDialComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSplitButtonModule",
            "id": "module-FreudSplitButtonModule-a15b3b77ce55ce215a1133ff40c3c0646cea5ff94118699effab2e6b2c3b8591c349ff91d43e502175f6a0674ee3bc9a86ad664c983d0f7420e9b1d6f8a0db1b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/split-button/split-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { SplitButtonModule } from 'primeng/splitbutton';\n\nimport { FreudSplitButtonComponent } from './split-button.component';\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\nimport { BrowserModule } from \"@angular/platform-browser\";\n\n@NgModule({\n    imports: [CommonModule, SplitButtonModule, BrowserAnimationsModule, BrowserModule],\n  declarations: [FreudSplitButtonComponent],\n  exports: [FreudSplitButtonComponent]\n})\nexport class FreudSplitButtonModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSplitterModule",
            "id": "module-FreudSplitterModule-b5091e5cb1572eae1174516e550b00e3fc13e4e155970a257f8490561b0cf835ac324c471826615456f3077eb46832ef4f9bec1889f96f9ffd59626e710486d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/splitter/splitter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSplitterComponent } from \"./splitter.component\";\nimport { SplitterModule } from \"primeng/splitter\";\n\n@NgModule({\n  imports: [CommonModule, SplitterModule],\n  declarations: [FreudSplitterComponent],\n  exports: [FreudSplitterComponent]\n})\nexport class FreudSplitterModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSplitterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSplitterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudStepsModule",
            "id": "module-FreudStepsModule-b71377318e1502b8d1f19966060ac6ee68720fc42b34fe03f1b7cc524f9e5f1ad6753ec59dd41fc42cb4bc9915acd7a84b93c6f0c29d5515eb5732a80947f2f1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/steps/steps.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { StepsModule } from 'primeng/steps';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\nimport { FreudStepsComponent } from './steps.component';\nimport { RouterModule } from '@angular/router';\n\n@NgModule({\n  imports: [CommonModule, StepsModule, RouterModule, BrowserAnimationsModule],\n  declarations: [FreudStepsComponent],\n  exports: [FreudStepsComponent]\n})\nexport class FreudStepsModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudStepsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudStepsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSwitchModule",
            "id": "module-FreudSwitchModule-8af784c1c3e5f828e07b8aa9b7f72c93436c9bb7beaefcc74bcf4ec64a0b31cb5afb44016eb921c508e7232cc2f7fa16e2253f501f053d2de6f1775d35ee15f5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSwitchComponent } from './switch.component';\nimport { FormsModule } from \"@angular/forms\";\nimport { InputSwitchModule } from \"primeng/inputswitch\";\n\n@NgModule({\n    imports: [CommonModule, InputSwitchModule, FormsModule],\n  declarations: [FreudSwitchComponent],\n  exports: [FreudSwitchComponent]\n})\nexport class FreudSwitchModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTableModule",
            "id": "module-FreudTableModule-3a1ca2f9ec43843ace677163a67c3f36d7528d10cc0d0d1aa5a67f65268a42c2defcab09ea6ef33cf4f00946c8f9b0284c728fa049c0b19d3763db0b36bd66b4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudSortableColumn, FreudSortIcon, FreudTableComponent } from './table.component';\nimport { CardModule } from \"primeng/card\";\nimport { TableModule, TableService } from \"primeng/table\";\nimport { FreudTemplateModule } from \"../../directive/template\";\n\n@NgModule({\n  imports: [CommonModule, CardModule, TableModule, FreudTemplateModule],\n  declarations: [FreudTableComponent, FreudSortableColumn, FreudSortIcon],\n  exports: [FreudTableComponent, FreudSortableColumn, FreudSortIcon],\n  providers: [TableService]\n})\nexport class FreudTableModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSortIcon"
                        },
                        {
                            "name": "FreudSortableColumn"
                        },
                        {
                            "name": "FreudTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudTemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSortIcon"
                        },
                        {
                            "name": "FreudSortableColumn"
                        },
                        {
                            "name": "FreudTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTabMenuModule",
            "id": "module-FreudTabMenuModule-bfa5dcbda11bb367b8049b4d939f3a3a61190027583eef0ee238b3c98d1286cbfd8ded7e35820616414c7011c2c13d99122045f70570b7630584681746df002d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/tab-menu/tab-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudTabMenuComponent } from \"./tab-menu.component\";\nimport { TabMenuModule } from \"primeng/tabmenu\";\n\n@NgModule({\n  imports: [CommonModule, TabMenuModule],\n  declarations: [FreudTabMenuComponent],\n  exports: [FreudTabMenuComponent]\n})\nexport class FreudTabMenuModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTabMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTabMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTabViewModule",
            "id": "module-FreudTabViewModule-6e40508326e9b4f7aa15103722acaea5d44145c2df7281067dbccad4db3aeb3b7781082b17a698225b2fde67dd9be4ca546422115300211abd5d23b2194202cb",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudTabPanelComponent, FreudTabViewComponent } from \"./tab-view.component\";\nimport { TabView, TabViewModule } from \"primeng/tabview\";\nimport { SharedModule } from \"primeng/api\";\nimport { RippleModule } from \"primeng/ripple\";\n\n@NgModule({\n  imports: [CommonModule, SharedModule, RippleModule, TabViewModule],\n  declarations: [FreudTabViewComponent, FreudTabPanelComponent],\n  exports: [FreudTabViewComponent, FreudTabPanelComponent],\n  providers: [TabView]\n})\nexport class FreudTabViewModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTabPanelComponent"
                        },
                        {
                            "name": "FreudTabViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTabPanelComponent"
                        },
                        {
                            "name": "FreudTabViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTagModule",
            "id": "module-FreudTagModule-35a00e532183a4a0dc544d9aa910ca6681582a973cb3b284509c9fb993af4b30a56b029d5898df02163ed468d78eb614ccb22ce73d89bf1c96a11ee0751471c0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/tag/tag.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { TagModule  } from 'primeng/tag';\n\nimport { FreudTagComponent } from './tag.component';\n\n@NgModule({\n  imports: [CommonModule, TagModule],\n  declarations: [FreudTagComponent],\n  exports: [FreudTagComponent]\n})\nexport class FreudTagModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTagComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTemplateModule",
            "id": "module-FreudTemplateModule-44606a93213fedc1860eeaacb3d0afef80a9f0615ba3125c5a8005f2a7655a13ac701e22a6145772f3821bd459a0fc3c22e26c6fab53e5cae664496cf16e4c32",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/directive/template/template.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Directive, Input, TemplateRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Directive({\n  selector: '[freudTemplate]',\n  host: {}\n})\nexport class FreudTemplate {\n  @Input() type!: string;\n\n  @Input('freudTemplate') name!: string;\n\n  constructor(public template: TemplateRef<any>) {}\n\n  getType(): string {\n    return this.name;\n  }\n}\n\n@NgModule({\n  imports: [CommonModule],\n  exports: [FreudTemplate],\n  declarations: [FreudTemplate]\n})\nexport class FreudTemplateModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTemplate"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTemplate"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudToastExampleModule",
            "id": "module-FreudToastExampleModule-6440806e56b56185903876149a0312122ee5a24b53c3a133a12492aa37fc4df755039cef069b371feeaa85cc24c8d99bb28cf6a79992258295c0b972889ade32",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/feedback/toast/toast-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudToastExampleComponent } from './example.component';\nimport { FreudButtonModule, FreudToastModule } from \"@freud-ds/web-components\";\n\n@NgModule({\n  imports: [CommonModule, FreudToastModule, FreudButtonModule],\n  declarations: [FreudToastExampleComponent],\n  exports: [FreudToastExampleComponent]\n})\nexport class FreudToastExampleModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudToastExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudToastModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudToastExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudToastModule",
            "id": "module-FreudToastModule-e9e89d91c2f6a5bfa37f7f0e1b9d12824d2f9e513257cc3ff14e0128288378307891165cbafd25e9ff773e4c0b3874aaf436b938164abbb109cc6dad745db254",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/toast/toast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ToastModule } from \"primeng/toast\";\nimport { MessageService } from \"primeng/api\";\n\nimport { FreudToastComponent } from './toast.component';\nimport { FreudMessageService } from \"../../../services/message.service\";\nimport { BrowserModule } from \"@angular/platform-browser\";\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\n\n@NgModule({\n  imports: [CommonModule, ToastModule, BrowserModule, BrowserAnimationsModule],\n  declarations: [FreudToastComponent],\n  exports: [FreudToastComponent],\n  providers: [FreudMessageService, MessageService]\n})\nexport class FreudToastModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudToastComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudToastComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTooltipModule",
            "id": "module-FreudTooltipModule-9e0dbd56d284c07cc2147b8d3c0acbeeb554dddcc3b58e049acce4683010401619e1ed75087dec9f07e70c1b205bed47746ecf8cf623177f13d979de9d125e60",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { FreudTooltipComponent } from './tooltip.component';\nimport { TooltipModule } from 'primeng/tooltip';\n\n@NgModule({\n  imports: [CommonModule, TooltipModule],\n  declarations: [FreudTooltipComponent],\n  exports: [FreudTooltipComponent]\n})\nexport class FreudTooltipModule { }\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTypographyModule",
            "id": "module-FreudTypographyModule-52ad300731a3fee018da4601f63c079869969b84d57112ba2ef7286ac1e64bc1138957ffec52a089fc65cfa405576d7ef13328fe7a3357d4de596adfa2ac8571",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/typography/typography.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FreudTypographyComponent } from './typography.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [FreudTypographyComponent],\n  exports: [FreudTypographyComponent],\n})\nexport class FreudTypographyModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Actived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBlank.bind({})"
            },
            {
                "name": "Advanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAdvanced.bind({})"
            },
            {
                "name": "AutoResize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicUi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBGColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRadioAndButton.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFeedback.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/loader/Loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/captcha/Captcha.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAdvanced.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTargetBGColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSort.bind({})"
            },
            {
                "name": "BGColorOutline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "bodyTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typrography.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  // Regular\n  'smallRegular1-5',\n  'bodyRegular1-5',\n\n  'smallRegular1-2',\n  'bodyRegular1-2',\n\n  'smallRegular1',\n  'bodyRegular1',\n  \n  'smallRegularAuto',\n  'bodyRegularAuto',\n\n  // Semibold\n  'smallSemibold1-5',\n  'bodySemibold1-5',\n\n  'smallSemibold1-2',\n  'bodySemibold1-2',\n\n  'smallSemibold1',\n  'bodySemibold1',\n\n  'smallSemiboldAuto',\n  'bodySemiboldAuto',\n\n  // Bold\n  'smallBold1-5',\n  'bodyBold1-5',\n\n  'smallBold1-2',\n  'bodyBold1-2',\n\n  'smallBold1',\n  'bodyBold1',\n\n  'smallBoldAuto',\n  'bodyBoldAuto',\n]"
            },
            {
                "name": "Bottom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ButtonLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateButtonLayout.bind({})"
            },
            {
                "name": "calendarOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CalendarOptions",
                "defaultValue": "{\n  initialView: 'dayGridMonth',\n  plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n  headerToolbar: {\n    left: 'prev,next today',\n    center: 'title',\n    right: 'dayGridMonth,timeGridWeek,timeGridDay'\n  },\n  events: [\n    { title: 'event 1', date: '2022-12-12' },\n    { title: 'event 2', date: '2022-12-24' }\n  ]\n}"
            },
            {
                "name": "CaptionAndSummary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCaptionAndSummary.bind({})"
            },
            {
                "name": "Celular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Checkbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CheckboxAndFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CheckboxAndText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCheckboxAndText.bind({})"
            },
            {
                "name": "Chip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CPF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CustomHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CustomTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFull.bind({})"
            },
            {
                "name": "data",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dataJson['data']"
            },
            {
                "name": "Data",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/loader/Loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/toast/Toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/captcha/Captcha.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DirectionDown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DirectionLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDisabled.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDisabled.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Dropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDropdown.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Feedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFeedback.bind({})"
            },
            {
                "name": "Filter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Footer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFooter.bind({})"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HeadingBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HeadingBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBold.bind({})"
            },
            {
                "name": "HeadingRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRegular.bind({})"
            },
            {
                "name": "HeadingSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSemibold.bind({})"
            },
            {
                "name": "headingTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typrography.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  // Regular\n  'h1Regular1-5',\n  'h2Regular1-5',\n  'h3Regular1-5',\n  'h4Regular1-5',\n  'h5Regular1-5',\n  'h6Regular1-5',\n\n  'h1Regular1-2',\n  'h2Regular1-2',\n  'h3Regular1-2',\n  'h4Regular1-2',\n  'h5Regular1-2',\n  'h6Regular1-2',\n\n  'h1Regular1',\n  'h2Regular1',\n  'h3Regular1',\n  'h4Regular1',\n  'h5Regular1',\n  'h6Regular1',\n  \n  'h1RegularAuto',\n  'h2RegularAuto',\n  'h3RegularAuto',\n  'h4RegularAuto',\n  'h5RegularAuto',\n  'h6RegularAuto',\n\n  // Semibold\n  'h1Semibold1-5',\n  'h2Semibold1-5',\n  'h3Semibold1-5',\n  'h4Semibold1-5',\n  'h5Semibold1-5',\n  'h6Semibold1-5',\n\n  'h1Semibold1-2',\n  'h2Semibold1-2',\n  'h3Semibold1-2',\n  'h4Semibold1-2',\n  'h5Semibold1-2',\n  'h6Semibold1-2',\n\n  'h1Semibold1',\n  'h2Semibold1',\n  'h3Semibold1',\n  'h4Semibold1',\n  'h5Semibold1',\n  'h6Semibold1',\n\n  'h1SemiboldAuto',\n  'h2SemiboldAuto',\n  'h3SemiboldAuto',\n  'h4SemiboldAuto',\n  'h5SemiboldAuto',\n  'h6SemiboldAuto',\n\n  // Bold\n  'h1Bold1-5',\n  'h2Bold1-5',\n  'h3Bold1-5',\n  'h4Bold1-5',\n  'h5Bold1-5',\n  'h6Bold1-5',\n\n  'h1Bold1-2',\n  'h2Bold1-2',\n  'h3Bold1-2',\n  'h4Bold1-2',\n  'h5Bold1-2',\n  'h6Bold1-2',\n\n  'h1Bold1',\n  'h2Bold1',\n  'h3Bold1',\n  'h4Bold1',\n  'h5Bold1',\n  'h6Bold1',\n\n  'h1BoldAuto',\n  'h2BoldAuto',\n  'h3BoldAuto',\n  'h4BoldAuto',\n  'h5BoldAuto',\n  'h6BoldAuto',\n]"
            },
            {
                "name": "HelperText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem",
                "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
            },
            {
                "name": "home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem",
                "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateHorizontal.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIcon.bind({})"
            },
            {
                "name": "IconAndRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconAndRadio.bind({})"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconLeft.bind({})"
            },
            {
                "name": "IconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIcon.bind({})"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconRight.bind({})"
            },
            {
                "name": "Icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIcons.bind({})"
            },
            {
                "name": "Imagem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"alt\": \"Description for Image 1\",\n    \"title\": \"Title 1\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"alt\": \"Description for Image 2\",\n    \"title\": \"Title 2\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"alt\": \"Description for Image 3\",\n    \"title\": \"Title 3\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"alt\": \"Description for Image 4\",\n    \"title\": \"Title 4\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"alt\": \"Description for Image 5\",\n    \"title\": \"Title 5\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"alt\": \"Description for Image 6\",\n    \"title\": \"Title 6\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"alt\": \"Description for Image 7\",\n    \"title\": \"Title 7\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"alt\": \"Description for Image 8\",\n    \"title\": \"Title 8\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"alt\": \"Description for Image 9\",\n    \"title\": \"Title 9\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"alt\": \"Description for Image 10\",\n    \"title\": \"Title 10\"\n  }\n]"
            },
            {
                "name": "Indeterminate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Inline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateInline.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Update', icon: 'freud-icon freud-icon-refresh', command: () => {\n      console.log('Evento update')\n    }\n  },\n  {\n    label: 'Delete', icon: 'freud-icon freud-icon-close', command: () => {\n      console.log('Evento delete')\n    },\n  },\n  {label: 'Zenklub', icon: 'freud-icon freud-icon-info', url: 'http://zenklub.com'},\n  {separator: true},\n  {label: 'Setup', icon: 'freud-icon freud-icon-cog'}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'Australia',\n    code: 'AU',\n    states: [\n      {\n        name: 'New South Wales',\n        cities: [\n          {cname: 'Sydney', code: 'A-SY'},\n          {cname: 'Newcastle', code: 'A-NE'},\n          {cname: 'Wollongong', code: 'A-WO'}\n        ]\n      },\n      {\n        name: 'Queensland',\n        cities: [\n          {cname: 'Brisbane', code: 'A-BR'},\n          {cname: 'Townsville', code: 'A-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'Canada',\n    code: 'CA',\n    states: [\n      {\n        name: 'Quebec',\n        cities: [\n          {cname: 'Montreal', code: 'C-MO'},\n          {cname: 'Quebec City', code: 'C-QU'}\n        ]\n      },\n      {\n        name: 'Ontario',\n        cities: [\n          {cname: 'Ottawa', code: 'C-OT'},\n          {cname: 'Toronto', code: 'C-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'United States',\n    code: 'US',\n    states: [\n      {\n        name: 'California',\n        cities: [\n          {cname: 'Los Angeles', code: 'US-LA'},\n          {cname: 'San Diego', code: 'US-SD'},\n          {cname: 'San Francisco', code: 'US-SF'}\n        ]\n      },\n      {\n        name: 'Florida',\n        cities: [\n          {cname: 'Jacksonville', code: 'US-JA'},\n          {cname: 'Miami', code: 'US-MI'},\n          {cname: 'Tampa', code: 'US-TA'},\n          {cname: 'Orlando', code: 'US-OR'}\n        ]\n      },\n      {\n        name: 'Texas',\n        cities: [\n          {cname: 'Austin', code: 'US-AU'},\n          {cname: 'Dallas', code: 'US-DA'},\n          {cname: 'Houston', code: 'US-HO'}\n        ]\n      }\n    ]\n  }\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {\n    label:'Users',\n    icon:'freud-icon freud-icon-user',\n    items:[\n      {\n        label:'New',\n        icon:'freud-icon freud-icon-user-plus',\n\n      },\n      {\n        label:'Delete',\n        icon:'freud-icon freud-icon-user-minus',\n\n      },\n      {\n        label:'Search',\n        icon:'freud-icon freud-icon-users',\n        items:[\n          {\n            label:'Filter',\n            icon:'freud-icon freud-icon-filter',\n            items:[\n              {\n                label:'Print',\n                icon:'freud-icon freud-icon-print'\n              }\n            ]\n          },\n          {\n            icon:'freud-icon freud-icon-bars',\n            label:'List'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label:'Events',\n    icon:'freud-icon freud-icon-calendar',\n    items:[\n      {\n        label:'Edit',\n        icon:'freud-icon freud-icon-pencil',\n      },\n    ]\n  },\n  {\n    label:'Quit',\n    icon:'freud-icon freud-icon-power-off'\n  }\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {\n    label: 'File',\n    items: [{\n      label: 'New',\n      icon: 'freud-icon freud-icon-fw freud-icon-plus',\n      items: [\n        {label: 'User', icon: 'freud-icon freud-icon-fw freud-icon-user-plus'},\n        {label: 'Filter', icon: 'freud-icon freud-icon-fw freud-icon-filter'}\n      ]\n    },\n      {label: 'Open', icon: 'freud-icon freud-icon-fw freud-icon-external-link'},\n      {separator: true},\n      {label: 'Quit', icon: 'freud-icon freud-icon-fw freud-icon-times'}\n    ]\n  },\n  {\n    label: 'Edit',\n    icon: 'freud-icon freud-icon-fw freud-icon-pencil',\n    items: [\n      {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-trash'},\n      {label: 'Refresh', icon: 'freud-icon freud-icon-fw freud-icon-refresh'}\n    ]\n  },\n  {\n    label: 'Help',\n    icon: 'freud-icon freud-icon-fw freud-icon-question',\n    items: [\n      {\n        label: 'Contents',\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-bars'\n      },\n      {\n        label: 'Search',\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-search',\n        items: [\n          {\n            label: 'Text',\n            items: [\n              {\n                label: 'Workspace'\n              }\n            ]\n          },\n          {\n            label: 'User',\n            icon: 'freud-icon freud-icon-fw freud-icon-file',\n          }\n        ]}\n    ]\n  },\n  {\n    label: 'Actions',\n    icon: 'freud-icon freud-icon-fw freud-icon-cog',\n    items: [\n      {\n        label: 'Edit',\n        icon: 'freud-icon freud-icon-fw freud-icon-pencil',\n        items: [\n          {label: 'Save', icon: 'freud-icon freud-icon-fw freud-icon-save'},\n          {label: 'Update', icon: 'freud-icon freud-icon-fw freud-icon-save'},\n        ]\n      },\n      {\n        label: 'Other',\n        icon: 'freud-icon freud-icon-fw freud-icon-tags',\n        items: [\n          {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-minus'}\n        ]\n      }\n    ]\n  }\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Home', command: () => console.log('menuClicked')},\n  {label: 'Calendar', command: () => console.log('menuClicked')},\n  {label: 'Edit', command: () => console.log('menuClicked')},\n  {label: 'Documentation', command: () => console.log('menuClicked')},\n  {label: 'Settings', command: () => console.log('menuClicked')}\n]"
            },
            {
                "name": "itemsWithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {icon: 'freud-icon freud-icon-refresh', command: () => {\n      console.log('Evento update')\n    }\n  },\n  {\n    icon: 'freud-icon freud-icon-close', command: () => {\n      console.log('Evento delete')\n    },\n  },\n  {icon: 'freud-icon freud-icon-check'}\n]"
            },
            {
                "name": "itemsWithoutIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\n  {label: 'Update', command: () => {console.log('Evento update')}\n  },\n  {\n    label: 'Delete', command: () => {console.log('Evento delete')},\n  },\n  {label: 'Zenklub', url: 'http://zenklub.com'}\n]"
            },
            {
                "name": "itens",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StepMenu[]",
                "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Left",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateLoading.bind({})"
            },
            {
                "name": "Mask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Maximizable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "messages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMessage[]",
                "defaultValue": "[\n  {severity:'success', summary:'Success', detail:'Message content'},\n  {severity:'info', summary:'Info', detail:'Message content'},\n  {severity:'warn', summary:'Warning', detail:'Message content'},\n  {severity:'error', summary:'Error', detail:'Message content'}\n]"
            },
            {
                "name": "Modal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MonthView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OptionDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
            },
            {
                "name": "optionsDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {label: 'Item1', disabled: true},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
            },
            {
                "name": "OutlineDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PageReport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Panel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RadioAndButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRadioAndButton.bind({})"
            },
            {
                "name": "Range",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Removable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Right",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Scrollable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSizes.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/loader/Loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Sort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSort.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TargetElement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTarget.bind({})"
            },
            {
                "name": "Telefone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n    <p freud-typography [fontType]=\"fontType\" [fontBgColor]=\"fontBgColor\">{{label}}</p>\n  `\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button {{color}}'),\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSpeedDialComponent>",
                "defaultValue": "(\n  args: FreudSpeedDialComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"height: 250px; width: 120px\">\n      <freud-speed-dial\n        [id]=\"id\"\n        [visible]=\"visible\"\n        [mask]=\"mask\"\n        [disabled]=\"disabled\"\n        [showIcon]=\"showIcon\"\n        [hideIcon]=\"hideIcon\"\n        [type]=\"type\"\n        [direction]=\"direction\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n      </freud-speed-dial>\n  </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSplitButtonComponent>",
                "defaultValue": "(args: FreudSplitButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAutoCompleteComponent>",
                "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCascadeSelectComponent>",
                "defaultValue": "(args: FreudCascadeSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCheckboxComponent>",
                "defaultValue": "(args: FreudCheckboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputMaskComponent>",
                "defaultValue": "(args: FreudInputMaskComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputNumberComponent>",
                "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextAreaComponent>",
                "defaultValue": "(args: FreudInputTextAreaComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudListboxComponent>",
                "defaultValue": "(args: FreudListboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMultiSelectComponent>",
                "defaultValue": "(args: FreudMultiSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudRadioButtonComponent>",
                "defaultValue": "(args: FreudRadioButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n  argTypes: {\n    value: {\n      name: 'ModelValue',\n      type: { name: 'string' },\n      defaultValue: 'Hello',\n      description: 'demo description',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'Hello' },\n      },\n      control: {\n        type: 'text'\n      }\n    }\n  }\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSelectComponent>",
                "defaultValue": "(args: FreudSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSwitchComponent>",
                "defaultValue": "(args: FreudSwitchComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAvatarComponent>",
                "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-avatar [size]=\"size\" [label]=\"label\" [badge]=\"badge\" [bgColor]=\"bgColor\" [withIcon]=\"withIcon\" [image]=\"image\"></freud-avatar>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudFileUploadComponent>",
                "defaultValue": "(args: FreudFileUploadComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-file-upload\n        [name]=\"'file[]'\"\n        [url]=\"url\"\n        [auto]=\"auto\"\n        [accept]=\"accept\"\n        [multiple]=\"multiple\"\n        [method]=\"method\"\n        [fileLimit]=\"fileLimit\"\n        [chooseIcon]=\"chooseIcon\"\n        [chooseLabel]=\"chooseLabel\"\n        [uploadLabel]=\"uploadLabel\"\n        [uploadIcon]=\"uploadIcon\"\n        [cancelIcon]=\"cancelIcon\"\n        [withCredentials]=\"withCredentials\"\n        [mode]=\"mode\"\n        [customUpload]=\"customUpload\"\n        [showUploadButton]=\"showUploadButton\"\n        [showCancelButton]=\"showCancelButton\"\n        [headers]=\"headers\"\n    ></freud-file-upload>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudGalleryComponent>",
                "defaultValue": "(args: FreudGalleryComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-gallery\n        [images]=\"images\"\n        [showThumbnails]=\"showThumbnails\"\n        [bgColor]=\"bgColor\">\n    </freud-gallery>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudImageComponent>",
                "defaultValue": "(args: FreudImageComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-image [preview]=\"preview\" [alt]=\"alt\" [src]=\"src\" [height]=\"height\" [width]=\"width\"></freud-image>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAlertMessagesComponent>",
                "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-messages\n        [messages]=\"messages\">\n    </freud-alert-messages>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudKnobComponent>",
                "defaultValue": "(\n  args: FreudKnobComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-knob\n      [value]=\"value\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [step]=\"step\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [bgColor]=\"bgColor\">\n    </freud-knob>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/loader/Loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudLoaderComponent>",
                "defaultValue": "(\n  args: FreudLoaderComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-loader\n      [size]=\"size\"\n      [bgColor]=\"bgColor\">\n    </freud-loader>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudProgressBarComponent>",
                "defaultValue": "(\n  args: FreudProgressBarComponent\n) => ({\n  props: { ...args },\n  template: `\n      <freud-progress-bar [bgColor]=\"bgColor\" [value]=\"50\" [mode]=\"mode\">\n      </freud-progress-bar>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudProgressSpinnerComponent>",
                "defaultValue": "(\n  args: FreudProgressSpinnerComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"width: 350px\">\n      <freud-progress-spinner [bgColor]=\"bgColor\">\n      </freud-progress-spinner>\n  </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudRatingComponent>",
                "defaultValue": "(\n  args: FreudRatingComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-rating\n      [value]=\"value\"\n      [stars]=\"stars\"\n      [disabled]=\"disabled\"\n      [bgColor]=\"bgColor\">\n    </freud-rating>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSkeletonComponent>",
                "defaultValue": "(\n  args: FreudSkeletonComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"width: 350px\">\n      <freud-skeleton\n        [width]=\"'100%'\"\n        [height]=\"'15px'\"\n        [bgColor]=\"bgColor\">\n      </freud-skeleton>\n      <br>\n      <freud-skeleton\n        [width]=\"'100%'\"\n        [height]=\"'15px'\"\n        [bgColor]=\"bgColor\">\n      </freud-skeleton>\n      <br>\n      <freud-skeleton\n        [width]=\"'350px'\"\n        [height]=\"'70px'\"\n        [bgColor]=\"bgColor\">\n      </freud-skeleton>\n      <br>\n      <div style=\"display: flex\">\n        <freud-skeleton style=\"margin-right: 10px\"\n          [width]=\"'170px'\"\n          [height]=\"'70px'\"\n          [bgColor]=\"bgColor\">\n        </freud-skeleton>\n        <freud-skeleton\n          [width]=\"'170px'\"\n          [height]=\"'70px'\"\n          [bgColor]=\"bgColor\">\n        </freud-skeleton>\n      </div>\n  </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudStepsComponent>",
                "defaultValue": "(\n  args: FreudStepsComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-steps [model]=\"model\" [readonly]=\"readonly\" [activeIndex]=\"activeIndex\" [bgColor]=\"bgColor\"></freud-steps>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTagComponent>",
                "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag [outline]=\"outline\" [color]=\"color\" [value]=\"value\"></freud-tag>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/toast/Toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudToastComponent>",
                "defaultValue": "(args: FreudToastComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-toast-examples>\n    </freud-toast-examples>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTooltipComponent>",
                "defaultValue": "(\n  args: FreudTooltipComponent\n) => ({\n  props: { ...args },\n  template: `\n    <span freud-tooltip style=\"color:{{bgColor ? 'white' : 'black'}}\"\n      [tooltipLabel]=\"tooltipLabel\"\n      [tooltipPosition]=\"tooltipPosition\"\n      style=\"font-family: 'Source Sans Pro'\"\n      [bgColor]=\"bgColor\">Passe o mouse aqui!</span>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudConfirmDialogComponent>",
                "defaultValue": "(args: FreudConfirmDialogComponent) => ({\n  template: `\n    <freud-confirm-dialog-example></freud-confirm-dialog-example>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudConfirmPopupComponent>",
                "defaultValue": "(args: FreudConfirmPopupComponent) => ({\n  template: `\n    <freud-confirm-popup-example></freud-confirm-popup-example>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDialogExampleComponent>",
                "defaultValue": "(args: FreudDialogExampleComponent) => ({\n  props: {...args},\n  template: `\n    <freud-dialog-example [view]=\"view\"></freud-dialog-example>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\n  template: `\n    <freud-dynamic-dialog-example></freud-dynamic-dialog-example>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBreadcrumbComponent>",
                "defaultValue": "(args: FreudBreadcrumbComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-breadcrumb [bgColor]=\"bgColor\" [items]=\"items\" [home]=\"home\"></freud-breadcrumb>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMenuComponent>",
                "defaultValue": "(args: FreudMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-menu [items]=\"items\" [popup]=\"popup\"></freud-menu>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMenubarComponent>",
                "defaultValue": "(args: FreudMenubarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 240px;width: 100%\">\n      <freud-menubar\n          [startImgAlt]=\"'Home'\"\n          [startImgSrc]=\"startImgSrc\"\n          [startImgHref]=\"'https://zenklub.com.br'\"\n          [items]=\"items\"\n          [bgColor]=\"bgColor\"\n      ></freud-menubar>\n    </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelComponent>",
                "defaultValue": "(args: FreudPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"toggleable\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </freud-panel>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelMenuComponent>",
                "defaultValue": "(args: FreudPanelMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 400px\">\n        <freud-panel-menu\n          [items]=\"items\"\n        ></freud-panel-menu>\n    </div>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollPanelComponent>",
                "defaultValue": "(args: FreudScrollPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.\n</freud-scroll-panel>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSlideMenuComponent>",
                "defaultValue": "(args: FreudSlideMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-slide-menu [items]=\"items\"></freud-slide-menu>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSplitterComponent>",
                "defaultValue": "(args: FreudSplitterComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-splitter [panelSizes]=\"panelSizes\" [style]=\"{'height': '300px'}\" [layout]=\"layout\">\n      <ng-template pTemplate>\n        <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n          Panel 1\n        </div>\n      </ng-template>\n    <ng-template pTemplate>\n      <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n        Panel 2\n      </div>\n    </ng-template>\n</freud-splitter>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTabMenuComponent>",
                "defaultValue": "(args: FreudTabMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-menu\n      [items]=\"items\"\n      [activeItem]=\"activeItem\"\n      [bgColor]=\"bgColor\"\n    ></freud-tab-menu>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTabViewComponent>",
                "defaultValue": "(args: FreudTabViewComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-view\n      [activeIndex]=\"activeIndex\"\n      [controlClose]=\"controlClose\"\n      [scrollable]=\"scrollable\"\n      [bgColor]=\"bgColor\">\n        <freud-tab-panel header=\"Header 1\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 2\">\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 3\">\n            Content 3\n        </freud-tab-panel>\n    </freud-tab-view>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAccordionComponent>",
                "defaultValue": "(args: FreudAccordionComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-accordion [multiple]=\"multiple\">\n        <freud-accordion-tab header=\"Header I\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header II\">\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header III\">\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\n        </freud-accordion-tab>\n    </freud-accordion>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudActionIconComponent>",
                "defaultValue": "(args: FreudActionIconComponent) => ({\n  props: { ...args },\n  template: `<freud-action-icon [bgColor]=\"bgColor\"></freud-action-icon>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBlockExampleComponent>",
                "defaultValue": "(args: FreudBlockExampleComponent) => ({\n  props: { ...args },\n  template: `<freud-block-ui-example [withTarget]=\"withTarget\"></freud-block-ui-example>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCalendarComponent>",
                "defaultValue": "(args: FreudCalendarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-calendar\n      [selectionMode]=\"selectionMode\"\n      [dateFormat]=\"dateFormat\"\n      [inline]=\"inline\"\n      [showOtherMonths]=\"showOtherMonths\"\n      [selectOtherMonths]=\"selectOtherMonths\"\n      [showWeek]=\"showWeek\"\n      [view]=\"view\"\n      [yearNavigator]=\"yearNavigator\"\n      [yearRange]=\"yearRange\"\n      [defaultDate]=\"defaultDate\"\n      [showTime]=\"showTime\"\n      [hourFormat]=\"hourFormat\"\n      [disabled]=\"disabled\"\n      [timeOnly]=\"timeOnly\"\n      [monthNavigator]=\"monthNavigator\"\n      [disabledDates]=\"disabledDates\"\n      [required]=\"required\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [(ngModel)]=\"value\">\n    </freud-calendar>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/captcha/Captcha.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCaptchaComponent>",
                "defaultValue": "(args: FreudCaptchaComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-captcha [siteKey]=\"siteKey\" [autoLoadScript]=\"true\" [initCallback]=\"'initRecaptcha'\"></freud-captcha>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCardComponent>",
                "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-card\n        [header]=\"header\"\n        [subheader]=\"subheader\"\n        [tabindex]=\"tabindex\">\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n        deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n    </freud-card>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudChipComponent>",
                "defaultValue": "(args: FreudChipComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-chip\n        [label]=\"'Action'\"\n        [removable]=\"removable\">\n    </freud-chip>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudFullCalendarComponent>",
                "defaultValue": "(args: FreudFullCalendarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-full-calendar [bgColor]=\"bgColor\" [events]=\"events\" [options]=\"options\">\n    </freud-full-calendar>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPaginatorComponent>",
                "defaultValue": "(args: FreudPaginatorComponent) => ({\n  props: { ...args },\n  template: `<freud-paginator\n    [rows]=\"rows\"\n    [totalRecords]=\"totalRecords\"\n    [pageLinkSize]=\"pageLinkSize\"\n    [first]=\"first\"\n    [showFirstLastIcon]=\"showFirstLastIcon\"\n    [alwaysShow]=\"alwaysShow\"\n    [currentPageReportTemplate]=\"currentPageReportTemplate\"\n    [showCurrentPageReport]=\"showCurrentPageReport\"\n    [bgColor]=\"bgColor\">\n    </freud-paginator>`,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-top [threshold]=\"200\"></freud-scroll-top>\n  `,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSelectButtonComponent>",
                "defaultValue": "(args: FreudSelectButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSliderComponent>",
                "defaultValue": "(args: FreudSliderComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTableComponent>",
                "defaultValue": "(args: FreudTableComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 100% overflow: auto;\">\n        <freud-table [value]=\"value\" [columns]=\"columns\">\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\n                  <tr>\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\n                  </tr>\n              </ng-template>\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\n                <tr>\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\n                </tr>\n            </ng-template>\n        </freud-table>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateAdvanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCardComponent>",
                "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 350px\">\n      <freud-card\n          [header]=\"header\"\n          [subheader]=\"subheader\"\n          [tabindex]=\"tabindex\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n          deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n\n            <ng-container freudTemplateHeader>\n              <img alt=\"Card\" src=\"assets/img/img.png\" style=\"height: 150px;object-fit: cover\">\n            </ng-container>\n\n            <ng-container freudTemplatefooter>\n              <div style=\"display: flex; gap: 4px\">\n                <freud-button>Button</freud-button>\n                <freud-button [color]=\"'secondary'\">Button</freud-button>\n              </div>\n          </ng-container>\n      </freud-card>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'success'\" [value]=\"'10'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'info'\" [value]=\"'5'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'warning'\" [value]=\"'99'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'error'\" [value]=\"'A'\"></freud-badge>\n    <freud-badge style=\"position: relative;top: 4px;\" [color]=\"'actived'\" [value]=\"''\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "TemplateBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTagComponent>",
                "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [value]=\"'Default'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'success'\" [value]=\"'Success'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'info'\" [value]=\"'Info'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'warning'\" [value]=\"'Warning'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'error'\" [value]=\"'Error'\"></freud-tag>\n  `,\n})"
            },
            {
                "name": "TemplateBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLBgColor,\n})"
            },
            {
                "name": "TemplateBlank",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\" style=\"position: relative;top: 4px;\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "TemplateBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-5'\">h6/Bold-700/line-height-1.5 (h6Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-5'\">h5/Bold-700/line-height-1.5 (h5Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-5'\">h4/Bold-700/line-height-1.5 (h4Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-5'\">h3/Bold-700/line-height-1.5 (h3Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-5'\">h2/Bold-700/line-height-1.5 (h2Bold1-5)</p>\n  <p freud-typography [fontType]=\"'h1Bold1-5'\">h1/Bold-700//line-height-1.5 (h1Bold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-2'\">h6/Bold-700/line-height-1.2 (h6Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-2'\">h5/Bold-700/line-height-1.2 (h5Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-2'\">h4/Bold-700/line-height-1.2 (h4Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-2'\">h3/Bold-700/line-height-1.2 (h3Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-2'\">h2/Bold-700/line-height-1.2 (h2Bold1-2)</p>\n  <p freud-typography [fontType]=\"'h1Bold1-2'\">h1/Bold-700/line-height-1.2 (h1Bold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1'\">h6/Bold-700/line-height-1 (h6Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1'\">h5/Bold-700/line-height-1 (h5Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1'\">h4/Bold-700/line-height-1 (h4Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1'\">h3/Bold-700/line-height-1 (h3Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1'\">h2/Bold-700/line-height-1 (h2Bold1)</p>\n  <p freud-typography [fontType]=\"'h1Bold1'\">h1/Bold-700/line-height-1 (h1Bold1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6BoldAuto'\">h6/Bold-700/line-height-Auto (h6BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5BoldAuto'\">h5/Bold-700/line-height-Auto (h5BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4BoldAuto'\">h4/Bold-700/line-height-Auto (h4BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3BoldAuto'\">h3/Bold-700/line-height-Auto (h3BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2BoldAuto'\">h2/Bold-700/line-height-Auto (h2BoldAuto)</p>\n  <p freud-typography [fontType]=\"'h1BoldAuto'\">h1/Bold-700/line-height-auto (h1BoldAuto)</p>\n  `\n})"
            },
            {
                "name": "TemplateButtonLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputNumberComponent>",
                "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'stacked'\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'horizontal'\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [buttonLayout]=\"'vertical'\"\n        [showButtons]=\"true\">\n    </freud-input-number> <br><br>\n  `,\n})"
            },
            {
                "name": "TemplateCaptionAndSummary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTableComponent>",
                "defaultValue": "(args: FreudTableComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 100% overflow: auto;\">\n        <freud-table [value]=\"value\" [columns]=\"columns\">\n            <ng-template freudTemplate=\"caption\">\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\n                    Produtos\n                    <p-button icon=\"pi pi-refresh\"></p-button>\n                </div>\n            </ng-template>\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\n                  <tr>\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\n                  </tr>\n              </ng-template>\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\n                <tr>\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\n                </tr>\n            </ng-template>\n\n            <ng-template freudTemplate=\"summary\">\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\n                    Total de 6 produtos.\n                </div>\n            </ng-template>\n        </freud-table>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateCheckboxAndText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-checkbox></freud-checkbox>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">ww</span>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSpeedDialComponent>",
                "defaultValue": "(\n  args: FreudSpeedDialComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"height: 80px; width: 80px; margin: 50px\">\n      <freud-speed-dial\n        [id]=\"id\"\n        [visible]=\"visible\"\n        [mask]=\"mask\"\n        [disabled]=\"disabled\"\n        [showIcon]=\"showIcon\"\n        [hideIcon]=\"hideIcon\"\n        [type]=\"type\"\n        [direction]=\"direction\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n      </freud-speed-dial>\n  </div>\n  `,\n})"
            },
            {
                "name": "TemplateDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Disabled'),\n})"
            },
            {
                "name": "TemplateDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAccordionComponent>",
                "defaultValue": "(args: FreudAccordionComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-accordion [multiple]=\"multiple\">\n        <freud-accordion-tab header=\"Header I\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header II\">\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header III\" [disabled]=\"true\">\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\n        </freud-accordion-tab>\n    </freud-accordion>\n  `,\n})"
            },
            {
                "name": "templateDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
            },
            {
                "name": "TemplateDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAutoCompleteComponent>",
                "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateDropdown,\n})"
            },
            {
                "name": "templateFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n  <div style=\"height: 130px\">\n          <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-input-password>\n  </div>\n`"
            },
            {
                "name": "TemplateFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFeedback,\n})"
            },
            {
                "name": "TemplateFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelComponent>",
                "defaultValue": "(args: FreudPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-panel [header]=\"'Header'\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n      <ng-container freudTemplatefooter>\n          Footer\n      </ng-container>\n    </freud-panel>\n  `,\n})"
            },
            {
                "name": "templateFull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 350px\">\n        <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n            <ng-container freudTemplateHeader>\n              <strong>Pick a password</strong>\n            </ng-container>\n            <ng-container freudTemplatefooter>\n                <div>\n                  <hr>\n                  <p class=\"p-mt-2\">Suggestions</p>\n                  <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\n                      <li>At least one lowercase</li>\n                      <li>At least one uppercase</li>\n                      <li>At least one numeric</li>\n                      <li>Minimum 8 characters</li>\n                  </ul>\n                </div>\n            </ng-container>\n        </freud-input-password>\n    </div>\n`"
            },
            {
                "name": "TemplateFull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFull,\n})"
            },
            {
                "name": "TemplateHorizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'left'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'center'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'right'\">\n            Title\n      </freud-divider>\n  `,\n})"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-button\n      [color]=\"color\"\n      [bgColor]=\"bgColor\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [loading]=\"loading\"\n      [icon]=\"icon\"\n      >{{label}}</freud-button>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-split-button\n        [label]=\"label\"\n        [disabled]=\"disabled\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n    </freud-split-button>\n    <p *ngIf=\"!disabled\" style=\"margin-bottom: 180px\"></p>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 150px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-cascade-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"'cname'\"\n          [optionValue]=\"'code'\"\n          [placeholder]=\"placeholder\"\n          [optionGroupLabel]=\"'name'\"\n          [optionGroupChildren]=\"['states', 'cities']\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-cascade-select>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n      <freud-checkbox\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [bgColor]=\"bgColor\"\n        [invalid]=\"invalid\">\n    </freud-checkbox>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-mask\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [mask]=\"mask\"\n        [bgColor]=\"bgColor\">\n    </freud-input-mask>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [showButtons]=\"showButtons\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-password\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [feedback]=\"feedback\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-password>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-text\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [rightIcon]=\"rightIcon\"\n        [bgColor]=\"bgColor\">\n    </freud-input-text>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-input-textarea\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [rows]=\"rows\"\n        [cols]=\"cols\"\n        [autoResize]=\"autoResize\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-textarea>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-listbox\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [options]=\"options\"\n          [multiple]=\"multiple\"\n          [filter]=\"filter\"\n          [checkbox]=\"checkbox\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [invalid]=\"invalid\">\n      </freud-listbox>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 300px\">\n        <freud-multi-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [display]=\"display\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-multi-select>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n        <freud-radio-button-example\n            [(ngModel)]=\"value\"\n            [disabled]=\"disabled\"\n            [label]=\"label\"\n            [name]=\"'label'\"\n            [bgColor]=\"bgColor\"\n        ></freud-radio-button-example>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-select>\n    </div>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n      <freud-input-switch\n        [(ngModel)]=\"defaultValue\"\n        [disabled]=\"disabled\"\n        [invalid]=\"invalid\">\n    </freud-input-switch>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-divider\n        [tabindex]=\"tabindex\"\n        [layout]=\"layout\"\n        [bgColor]=\"bgColor\">\n        Title\n    </freud-divider>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-select-button\n        [options]=\"options\"\n        [multiple]=\"multiple\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [disabled]=\"disabled\"\n        [selectedOption]=\"selectedOption\"\n        [optionDisabled]=\"optionDisabled\"\n        [optionLabel]=\"optionLabel\"></freud-select-button>\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <freud-slider\n        [(ngModel)]=\"value\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [orientation]=\"orientation\"\n        [range]=\"range\"\n        [disabled]=\"disabled\">\n    </freud-slider>\n`"
            },
            {
                "name": "templateHTMLBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"true\" [color]=\"'primary'\">Button primary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'secondary'\">Button secondary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'ghost'\">Button ghost</freud-button>\n    </div>\n`"
            },
            {
                "name": "templateHTMLSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"bgColor\" [color]=\"color\" [size]=\"'sm'\">Button sm</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'md'\">Button md</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'lg'\">Button lg</freud-button>\n    </div>\n`"
            },
            {
                "name": "TemplateIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace(\n    '{{label}}',\n    ''\n  ),\n})"
            },
            {
                "name": "TemplateIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTabViewComponent>",
                "defaultValue": "(args: FreudTabViewComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-view\n      [activeIndex]=\"activeIndex\"\n      [controlClose]=\"controlClose\"\n      [scrollable]=\"scrollable\"\n      [bgColor]=\"bgColor\">\n        <freud-tab-panel header=\"Header 1\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 2\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 3\" [leftIcon]=\"'freud-icon freud-icon-plus'\">\n            Content 3\n        </freud-tab-panel>\n    </freud-tab-view>\n  `,\n})"
            },
            {
                "name": "TemplateIconAndRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item\"></freud-radio-button>\n      </span>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateIconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateIconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelComponent>",
                "defaultValue": "(args: FreudPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"true\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n      <ng-container freudTemplateIcons>\n        <freud-button [color]=\"'ghost'\" class=\"p-panel-header-icon p-link\" (click)=\"menu.toggle($event)\">\n          <span class=\"freud-icon freud-icon-cog\"></span>\n        </freud-button>\n      </ng-container>\n    </freud-panel>\n  `,\n})"
            },
            {
                "name": "TemplateInline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAlertMessagesComponent>",
                "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-message [severity]=\"'success'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'info'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'warn'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'error'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n  `,\n})"
            },
            {
                "name": "TemplateLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button'),\n})"
            },
            {
                "name": "TemplateRadioAndButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item2\"></freud-radio-button>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <freud-button>Button</freud-button>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-5'\">h6/regular-400/line-height-1.5 (h6Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-5'\">h5/regular-400/line-height-1.5 (h5Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-5'\">h4/regular-400/line-height-1.5 (h4Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-5'\">h3/regular-400/line-height-1.5 (h3Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-5'\">h2/regular-400/line-height-1.5 (h2Regular1-5)</p>\n    <p freud-typography [fontType]=\"'h1Regular1-5'\">h1/regular-400/line-height-1.5 (h1Regular1-5)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-2'\">h6/regular-400/line-height-1.2 (h6Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-2'\">h5/regular-400/line-height-1.2 (h5Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-2'\">h4/regular-400/line-height-1.2 (h4Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-2'\">h3/regular-400/line-height-1.2 (h3Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-2'\">h2/regular-400/line-height-1.2 (h2Regular1-2)</p>\n    <p freud-typography [fontType]=\"'h1Regular1-2'\">h1/regular-400/line-height-1.2 (h1Regular1-2)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1'\">h6/regular-400/line-height-1 (h6Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1'\">h5/regular-400/line-height-1 (h5Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1'\">h4/regular-400/line-height-1 (h4Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1'\">h3/regular-400/line-height-1 (h3Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1'\">h2/regular-400/line-height-1 (h2Regular1)</p>\n    <p freud-typography [fontType]=\"'h1Regular1'\">h1/regular-400/line-height-1 (h1Regular1)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6RegularAuto'\">h6/regular-400/line-height-Auto (h6RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5RegularAuto'\">h5/regular-400/line-height-Auto (h5RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4RegularAuto'\">h4/regular-400/line-height-Auto (h4RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3RegularAuto'\">h3/regular-400/line-height-Auto (h3RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2RegularAuto'\">h2/regular-400/line-height-Auto (h2RegularAuto)</p>\n    <p freud-typography [fontType]=\"'h1RegularAuto'\">h1/regular-400/line-height-auto (h1RegularAuto)</p>\n  `\n})"
            },
            {
                "name": "TemplateSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-5'\">h6/Semibold-600/line-height-1.5 (h6Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-5'\">h5/Semibold-600/line-height-1.5 (h5Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-5'\">h4/Semibold-600/line-height-1.5 (h4Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-5'\">h3/Semibold-600/line-height-1.5 (h3Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-5'\">h2/Semibold-600/line-height-1.5 (h2Semibold1-5)</p>\n  <p freud-typography [fontType]=\"'h1Semibold1-5'\">h1/Semibold-600/line-height-1.5 (h1Semibold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-2'\">h6/Semibold-600/line-height-1.2 (h6Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-2'\">h5/Semibold-600/line-height-1.2 (h5Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-2'\">h4/Semibold-600/line-height-1.2 (h4Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-2'\">h3/Semibold-600/line-height-1.2 (h3Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-2'\">h2/Semibold-600/line-height-1.2 (h2Semibold1-2)</p>\n  <p freud-typography [fontType]=\"'h1Semibold1-2'\">h1/Semibold-600/line-height-1.2 (h1Semibold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1'\">h6/Semibold-600/line-height-1 (h6Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1'\">h5/Semibold-600/line-height-1 (h5Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1'\">h4/Semibold-600/line-height-1 (h4Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1'\">h3/Semibold-600/line-height-1 (h3Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1'\">h2/Semibold-600/line-height-1 (h2Semibold1)</p>\n  <p freud-typography [fontType]=\"'h1Semibold1'\">h1/Semibold-600/line-height-1 (h1Regular1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6SemiboldAuto'\">h6/Semibold-600/line-height-Auto (h6SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5SemiboldAuto'\">h5/Semibold-600/line-height-Auto (h5SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4SemiboldAuto'\">h4/Semibold-600/line-height-Auto (h4SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3SemiboldAuto'\">h3/Semibold-600/line-height-Auto (h3SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2SemiboldAuto'\">h2/Semibold-600/line-height-Auto (h2SemiboldAuto)</p>\n  <p freud-typography [fontType]=\"'h1SemiboldAuto'\">h1/Semibold-600/line-height-auto (h1RegularAuto)</p>\n  `\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLSize,\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAvatarComponent>",
                "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center\">\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'sm'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'md'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'lg'\" [label]=\"'A'\"></freud-avatar>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudKnobComponent>",
                "defaultValue": "(\n  args: FreudKnobComponent\n) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center;\">\n      <freud-knob style=\"margin-right: 20px\"\n        [value]=\"'50'\"\n        [size]=\"'default'\">\n      </freud-knob>\n\n      <freud-knob\n        [value]=\"'50'\"\n        [size]=\"'large'\">\n      </freud-knob>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/loader/Loader.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudLoaderComponent>",
                "defaultValue": "(\n  args: FreudLoaderComponent\n) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center;\">\n      <freud-loader style=\"margin-right: 20px;\"\n        [size]=\"'default'\">\n      </freud-knob>\n\n      <freud-loader\n        [size]=\"'lg'\">\n      </freud-loader>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [size]=\"'default'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge [size]=\"'large'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n  `,\n})"
            },
            {
                "name": "TemplateSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTableComponent>",
                "defaultValue": "(args: FreudTableComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 100%\">\n      <freud-table [value]=\"value\" [columns]=\"columns\">\n          <ng-template freudTemplate=\"header\" let-columns=\"columns\">\n                <tr>\n                    <th freudSortableColumn=\"{{col}}\" *ngFor=\"let col of columns\">{{col}} <freud-sortIcon field=\"{{col}}\"></freud-sortIcon></th>\n                </tr>\n            </ng-template>\n          <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\n              <tr>\n                  <td *ngFor=\"let col of columns\">{{item[col]}}</td>\n              </tr>\n          </ng-template>\n      </freud-table>\n    </div>\n  `,\n})"
            },
            {
                "name": "TemplateTarget",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n      <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\"></freud-scroll-top>\n    </freud-scroll-panel>\n  `,\n})"
            },
            {
                "name": "TemplateTargetBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px', backgroundColor: '#241249', color: 'white'}\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\" [bgColor]=\"true\"></freud-scroll-top>\n    </freud-scroll-panel>\n  `,\n})"
            },
            {
                "name": "TemplateTextBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-5'\">small/Bold-700/line-height-1.5 (smallBold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-5'\">body/Bold-700/line-height-1.5 (bodyBold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-2'\">small/Bold-700/line-height-1.2 (smallBold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-2'\">body/Bold-700/line-height-1.2 (bodyBold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1'\">small/Bold-700/line-height-1 (smallBold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1'\">body/Bold-700/line-height-1 (bodyBold1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBoldAuto'\">small/Bold-700/line-height-Auto (smallBoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBoldAuto'\">body/Bold-700/line-height-Auto (bodyBoldAuto)</p>\n  `\n})"
            },
            {
                "name": "TemplateTextRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-5'\">small/regular-400/line-height-1.5 (smallRegular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-5'\">body/regular-400/line-height-1.5 (bodyRegular1-5)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-2'\">small/regular-400/line-height-1.2 (smallRegular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-2'\">body/regular-400/line-height-1.2 (bodyRegular1-2)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1'\">small/regular-400/line-height-1 (smallRegular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1'\">body/regular-400/line-height-1 (bodyRegular1)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegularAuto'\">small/regular-400/line-height-Auto (smallRegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegularAuto'\">body/regular-400/line-height-Auto (bodyRegularAuto)</p>\n  `\n})"
            },
            {
                "name": "TemplateTextSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-5'\">small/Semibold-600/line-height-1.5 (smallSemibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-5'\">body/Semibold-600/line-height-1.5 (bodySemibold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-2'\">small/Semibold-600/line-height-1.2 (smallSemibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-2'\">body/Semibold-600/line-height-1.2 (bodySemibold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1'\">small/Semibold-600/line-height-1 (smallSemibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1'\">body/Semibold-600/line-height-1 (bodySemibold1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemiboldAuto'\">small/Semibold-600/line-height-Auto (smallSemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemiboldAuto'\">body/Semibold-600/line-height-Auto (bodySemiboldAuto)</p>\n  `\n})"
            },
            {
                "name": "TemplateVertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <div style=\"display: flex;gap: 16px;height: 220px\">\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'top'\">\n              Title\n        </freud-divider>\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'bottom'\">\n              Title\n        </freud-divider>\n      </div>\n  `,\n})"
            },
            {
                "name": "TextBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextBold.bind({})"
            },
            {
                "name": "TextRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextRegular.bind({})"
            },
            {
                "name": "TextSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextSemibold.bind({})"
            },
            {
                "name": "TimeOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Toggleable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Top",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TypeCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "TypeQuarterCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "TypeQuarterDownRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "types",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "headingTypes.concat(bodyTypes)"
            },
            {
                "name": "value",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "defaultValue": "false"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateVertical.bind({})"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithIconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateLoading .bind({})"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithoutThumbnail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "YearNavigator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "avatarSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\" | \"lg\"",
                "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "buttonColors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"ghost\"",
                "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "buttonSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\" | \"lg\"",
                "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"actived\"",
                "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\"",
                "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "directions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"up\" | \"down\" | \"left\" | \"right\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "fontTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/web-components/src/components/typography/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "listboxFilterMatchModes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "loaderSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"lg\"",
                "file": "projects/web-components/src/components/feedback/loader/loader.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "positions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\"",
                "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "positions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"center\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"",
                "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "severities",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "sizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"large\"",
                "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "sizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"large\"",
                "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "types",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "stories/feedback/badge/Badge.stories.ts": [
                {
                    "name": "Actived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBlank.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSizes.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "TemplateBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'success'\" [value]=\"'10'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'info'\" [value]=\"'5'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'warning'\" [value]=\"'99'\"></freud-badge>\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'error'\" [value]=\"'A'\"></freud-badge>\n    <freud-badge style=\"position: relative;top: 4px;\" [color]=\"'actived'\" [value]=\"''\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "TemplateBlank",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\" style=\"position: relative;top: 4px;\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "TemplateSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-badge style=\"margin-right: 16px;\" [size]=\"'default'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n    <freud-badge [size]=\"'large'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\n  `,\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/others/card/Card.stories.ts": [
                {
                    "name": "Advanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAdvanced.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAdvanced.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCardComponent>",
                    "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-card\n        [header]=\"header\"\n        [subheader]=\"subheader\"\n        [tabindex]=\"tabindex\">\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n        deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n    </freud-card>\n  `,\n})"
                },
                {
                    "name": "TemplateAdvanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCardComponent>",
                    "defaultValue": "(args: FreudCardComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 350px\">\n      <freud-card\n          [header]=\"header\"\n          [subheader]=\"subheader\"\n          [tabindex]=\"tabindex\">\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\n          deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\n\n            <ng-container freudTemplateHeader>\n              <img alt=\"Card\" src=\"assets/img/img.png\" style=\"height: 150px;object-fit: cover\">\n            </ng-container>\n\n            <ng-container freudTemplatefooter>\n              <div style=\"display: flex; gap: 4px\">\n                <freud-button>Button</freud-button>\n                <freud-button [color]=\"'secondary'\">Button</freud-button>\n              </div>\n          </ng-container>\n      </freud-card>\n    </div>\n  `,\n})"
                }
            ],
            "stories/forms/input-textarea/InputTextArea.stories.ts": [
                {
                    "name": "AutoResize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextAreaComponent>",
                    "defaultValue": "(args: FreudInputTextAreaComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-textarea\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [rows]=\"rows\"\n        [cols]=\"cols\"\n        [autoResize]=\"autoResize\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-textarea>\n`"
                }
            ],
            "stories/others/table/Table.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSort.bind({})"
                },
                {
                    "name": "CaptionAndSummary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCaptionAndSummary.bind({})"
                },
                {
                    "name": "data",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dataJson['data']"
                },
                {
                    "name": "Sort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSort.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTableComponent>",
                    "defaultValue": "(args: FreudTableComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 100% overflow: auto;\">\n        <freud-table [value]=\"value\" [columns]=\"columns\">\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\n                  <tr>\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\n                  </tr>\n              </ng-template>\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\n                <tr>\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\n                </tr>\n            </ng-template>\n        </freud-table>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateCaptionAndSummary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTableComponent>",
                    "defaultValue": "(args: FreudTableComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 100% overflow: auto;\">\n        <freud-table [value]=\"value\" [columns]=\"columns\">\n            <ng-template freudTemplate=\"caption\">\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\n                    Produtos\n                    <p-button icon=\"pi pi-refresh\"></p-button>\n                </div>\n            </ng-template>\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\n                  <tr>\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\n                  </tr>\n              </ng-template>\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\n                <tr>\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\n                </tr>\n            </ng-template>\n\n            <ng-template freudTemplate=\"summary\">\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\n                    Total de 6 produtos.\n                </div>\n            </ng-template>\n        </freud-table>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTableComponent>",
                    "defaultValue": "(args: FreudTableComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 100%\">\n      <freud-table [value]=\"value\" [columns]=\"columns\">\n          <ng-template freudTemplate=\"header\" let-columns=\"columns\">\n                <tr>\n                    <th freudSortableColumn=\"{{col}}\" *ngFor=\"let col of columns\">{{col}} <freud-sortIcon field=\"{{col}}\"></freud-sortIcon></th>\n                </tr>\n            </ng-template>\n          <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\n              <tr>\n                  <td *ngFor=\"let col of columns\">{{item[col]}}</td>\n              </tr>\n          </ng-template>\n      </freud-table>\n    </div>\n  `,\n})"
                }
            ],
            "stories/media/file-upload/FileUpload.stories.ts": [
                {
                    "name": "BasicUi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudFileUploadComponent>",
                    "defaultValue": "(args: FreudFileUploadComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-file-upload\n        [name]=\"'file[]'\"\n        [url]=\"url\"\n        [auto]=\"auto\"\n        [accept]=\"accept\"\n        [multiple]=\"multiple\"\n        [method]=\"method\"\n        [fileLimit]=\"fileLimit\"\n        [chooseIcon]=\"chooseIcon\"\n        [chooseLabel]=\"chooseLabel\"\n        [uploadLabel]=\"uploadLabel\"\n        [uploadIcon]=\"uploadIcon\"\n        [cancelIcon]=\"cancelIcon\"\n        [withCredentials]=\"withCredentials\"\n        [mode]=\"mode\"\n        [customUpload]=\"customUpload\"\n        [showUploadButton]=\"showUploadButton\"\n        [showCancelButton]=\"showCancelButton\"\n        [headers]=\"headers\"\n    ></freud-file-upload>\n  `,\n})"
                }
            ],
            "stories/typography/typography.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HeadingBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HeadingBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBold.bind({})"
                },
                {
                    "name": "HeadingRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRegular.bind({})"
                },
                {
                    "name": "HeadingSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSemibold.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n    <p freud-typography [fontType]=\"fontType\" [fontBgColor]=\"fontBgColor\">{{label}}</p>\n  `\n})"
                },
                {
                    "name": "TemplateBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-5'\">h6/Bold-700/line-height-1.5 (h6Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-5'\">h5/Bold-700/line-height-1.5 (h5Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-5'\">h4/Bold-700/line-height-1.5 (h4Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-5'\">h3/Bold-700/line-height-1.5 (h3Bold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-5'\">h2/Bold-700/line-height-1.5 (h2Bold1-5)</p>\n  <p freud-typography [fontType]=\"'h1Bold1-5'\">h1/Bold-700//line-height-1.5 (h1Bold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-2'\">h6/Bold-700/line-height-1.2 (h6Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-2'\">h5/Bold-700/line-height-1.2 (h5Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-2'\">h4/Bold-700/line-height-1.2 (h4Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-2'\">h3/Bold-700/line-height-1.2 (h3Bold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-2'\">h2/Bold-700/line-height-1.2 (h2Bold1-2)</p>\n  <p freud-typography [fontType]=\"'h1Bold1-2'\">h1/Bold-700/line-height-1.2 (h1Bold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1'\">h6/Bold-700/line-height-1 (h6Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1'\">h5/Bold-700/line-height-1 (h5Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1'\">h4/Bold-700/line-height-1 (h4Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1'\">h3/Bold-700/line-height-1 (h3Bold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1'\">h2/Bold-700/line-height-1 (h2Bold1)</p>\n  <p freud-typography [fontType]=\"'h1Bold1'\">h1/Bold-700/line-height-1 (h1Bold1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6BoldAuto'\">h6/Bold-700/line-height-Auto (h6BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5BoldAuto'\">h5/Bold-700/line-height-Auto (h5BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4BoldAuto'\">h4/Bold-700/line-height-Auto (h4BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3BoldAuto'\">h3/Bold-700/line-height-Auto (h3BoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2BoldAuto'\">h2/Bold-700/line-height-Auto (h2BoldAuto)</p>\n  <p freud-typography [fontType]=\"'h1BoldAuto'\">h1/Bold-700/line-height-auto (h1BoldAuto)</p>\n  `\n})"
                },
                {
                    "name": "TemplateRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-5'\">h6/regular-400/line-height-1.5 (h6Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-5'\">h5/regular-400/line-height-1.5 (h5Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-5'\">h4/regular-400/line-height-1.5 (h4Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-5'\">h3/regular-400/line-height-1.5 (h3Regular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-5'\">h2/regular-400/line-height-1.5 (h2Regular1-5)</p>\n    <p freud-typography [fontType]=\"'h1Regular1-5'\">h1/regular-400/line-height-1.5 (h1Regular1-5)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-2'\">h6/regular-400/line-height-1.2 (h6Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-2'\">h5/regular-400/line-height-1.2 (h5Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-2'\">h4/regular-400/line-height-1.2 (h4Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-2'\">h3/regular-400/line-height-1.2 (h3Regular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-2'\">h2/regular-400/line-height-1.2 (h2Regular1-2)</p>\n    <p freud-typography [fontType]=\"'h1Regular1-2'\">h1/regular-400/line-height-1.2 (h1Regular1-2)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1'\">h6/regular-400/line-height-1 (h6Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1'\">h5/regular-400/line-height-1 (h5Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1'\">h4/regular-400/line-height-1 (h4Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1'\">h3/regular-400/line-height-1 (h3Regular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1'\">h2/regular-400/line-height-1 (h2Regular1)</p>\n    <p freud-typography [fontType]=\"'h1Regular1'\">h1/regular-400/line-height-1 (h1Regular1)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6RegularAuto'\">h6/regular-400/line-height-Auto (h6RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5RegularAuto'\">h5/regular-400/line-height-Auto (h5RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4RegularAuto'\">h4/regular-400/line-height-Auto (h4RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3RegularAuto'\">h3/regular-400/line-height-Auto (h3RegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2RegularAuto'\">h2/regular-400/line-height-Auto (h2RegularAuto)</p>\n    <p freud-typography [fontType]=\"'h1RegularAuto'\">h1/regular-400/line-height-auto (h1RegularAuto)</p>\n  `\n})"
                },
                {
                    "name": "TemplateSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-5'\">h6/Semibold-600/line-height-1.5 (h6Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-5'\">h5/Semibold-600/line-height-1.5 (h5Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-5'\">h4/Semibold-600/line-height-1.5 (h4Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-5'\">h3/Semibold-600/line-height-1.5 (h3Semibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-5'\">h2/Semibold-600/line-height-1.5 (h2Semibold1-5)</p>\n  <p freud-typography [fontType]=\"'h1Semibold1-5'\">h1/Semibold-600/line-height-1.5 (h1Semibold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-2'\">h6/Semibold-600/line-height-1.2 (h6Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-2'\">h5/Semibold-600/line-height-1.2 (h5Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-2'\">h4/Semibold-600/line-height-1.2 (h4Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-2'\">h3/Semibold-600/line-height-1.2 (h3Semibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-2'\">h2/Semibold-600/line-height-1.2 (h2Semibold1-2)</p>\n  <p freud-typography [fontType]=\"'h1Semibold1-2'\">h1/Semibold-600/line-height-1.2 (h1Semibold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1'\">h6/Semibold-600/line-height-1 (h6Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1'\">h5/Semibold-600/line-height-1 (h5Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1'\">h4/Semibold-600/line-height-1 (h4Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1'\">h3/Semibold-600/line-height-1 (h3Semibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1'\">h2/Semibold-600/line-height-1 (h2Semibold1)</p>\n  <p freud-typography [fontType]=\"'h1Semibold1'\">h1/Semibold-600/line-height-1 (h1Regular1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6SemiboldAuto'\">h6/Semibold-600/line-height-Auto (h6SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5SemiboldAuto'\">h5/Semibold-600/line-height-Auto (h5SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4SemiboldAuto'\">h4/Semibold-600/line-height-Auto (h4SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3SemiboldAuto'\">h3/Semibold-600/line-height-Auto (h3SemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2SemiboldAuto'\">h2/Semibold-600/line-height-Auto (h2SemiboldAuto)</p>\n  <p freud-typography [fontType]=\"'h1SemiboldAuto'\">h1/Semibold-600/line-height-auto (h1RegularAuto)</p>\n  `\n})"
                },
                {
                    "name": "TemplateTextBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-5'\">small/Bold-700/line-height-1.5 (smallBold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-5'\">body/Bold-700/line-height-1.5 (bodyBold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-2'\">small/Bold-700/line-height-1.2 (smallBold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-2'\">body/Bold-700/line-height-1.2 (bodyBold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1'\">small/Bold-700/line-height-1 (smallBold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1'\">body/Bold-700/line-height-1 (bodyBold1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBoldAuto'\">small/Bold-700/line-height-Auto (smallBoldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBoldAuto'\">body/Bold-700/line-height-Auto (bodyBoldAuto)</p>\n  `\n})"
                },
                {
                    "name": "TemplateTextRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-5'\">small/regular-400/line-height-1.5 (smallRegular1-5)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-5'\">body/regular-400/line-height-1.5 (bodyRegular1-5)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-2'\">small/regular-400/line-height-1.2 (smallRegular1-2)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-2'\">body/regular-400/line-height-1.2 (bodyRegular1-2)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1'\">small/regular-400/line-height-1 (smallRegular1)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1'\">body/regular-400/line-height-1 (bodyRegular1)</p>\n\n    <br><br>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegularAuto'\">small/regular-400/line-height-Auto (smallRegularAuto)</p>\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegularAuto'\">body/regular-400/line-height-Auto (bodyRegularAuto)</p>\n  `\n})"
                },
                {
                    "name": "TemplateTextSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\n  args: FreudTypographyComponent\n) => ({\n  props: { ...args },\n  template: `\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-5'\">small/Semibold-600/line-height-1.5 (smallSemibold1-5)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-5'\">body/Semibold-600/line-height-1.5 (bodySemibold1-5)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-2'\">small/Semibold-600/line-height-1.2 (smallSemibold1-2)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-2'\">body/Semibold-600/line-height-1.2 (bodySemibold1-2)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1'\">small/Semibold-600/line-height-1 (smallSemibold1)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1'\">body/Semibold-600/line-height-1 (bodySemibold1)</p>\n\n  <br><br>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemiboldAuto'\">small/Semibold-600/line-height-Auto (smallSemiboldAuto)</p>\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemiboldAuto'\">body/Semibold-600/line-height-Auto (bodySemiboldAuto)</p>\n  `\n})"
                },
                {
                    "name": "TextBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextBold.bind({})"
                },
                {
                    "name": "TextRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextRegular.bind({})"
                },
                {
                    "name": "TextSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextSemibold.bind({})"
                }
            ],
            "stories/buttons/button/Button.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBGColor.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDisabled.bind({})"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIcon.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateLoading.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button {{color}}'),\n})"
                },
                {
                    "name": "TemplateBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLBgColor,\n})"
                },
                {
                    "name": "TemplateDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Disabled'),\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-button\n      [color]=\"color\"\n      [bgColor]=\"bgColor\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [loading]=\"loading\"\n      [icon]=\"icon\"\n      >{{label}}</freud-button>\n`"
                },
                {
                    "name": "templateHTMLBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"true\" [color]=\"'primary'\">Button primary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'secondary'\">Button secondary</freud-button>\n      <freud-button [bgColor]=\"true\" [color]=\"'ghost'\">Button ghost</freud-button>\n    </div>\n`"
                },
                {
                    "name": "templateHTMLSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"display: flex;gap: 16px;align-items: center\">\n      <freud-button [bgColor]=\"bgColor\" [color]=\"color\" [size]=\"'sm'\">Button sm</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'md'\">Button md</freud-button>\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'lg'\">Button lg</freud-button>\n    </div>\n`"
                },
                {
                    "name": "TemplateIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace(\n    '{{label}}',\n    ''\n  ),\n})"
                },
                {
                    "name": "TemplateLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML.replace('{{label}}', 'Button'),\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\n  props: { ...args },\n  template: templateHTMLSize,\n})"
                },
                {
                    "name": "WithIconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateLoading .bind({})"
                }
            ],
            "stories/buttons/speed-dial/SpeedDial.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DirectionDown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DirectionLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "itemsWithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {icon: 'freud-icon freud-icon-refresh', command: () => {\n      console.log('Evento update')\n    }\n  },\n  {\n    icon: 'freud-icon freud-icon-close', command: () => {\n      console.log('Evento delete')\n    },\n  },\n  {icon: 'freud-icon freud-icon-check'}\n]"
                },
                {
                    "name": "Mask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSpeedDialComponent>",
                    "defaultValue": "(\n  args: FreudSpeedDialComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"height: 250px; width: 120px\">\n      <freud-speed-dial\n        [id]=\"id\"\n        [visible]=\"visible\"\n        [mask]=\"mask\"\n        [disabled]=\"disabled\"\n        [showIcon]=\"showIcon\"\n        [hideIcon]=\"hideIcon\"\n        [type]=\"type\"\n        [direction]=\"direction\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n      </freud-speed-dial>\n  </div>\n  `,\n})"
                },
                {
                    "name": "TemplateCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSpeedDialComponent>",
                    "defaultValue": "(\n  args: FreudSpeedDialComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"height: 80px; width: 80px; margin: 50px\">\n      <freud-speed-dial\n        [id]=\"id\"\n        [visible]=\"visible\"\n        [mask]=\"mask\"\n        [disabled]=\"disabled\"\n        [showIcon]=\"showIcon\"\n        [hideIcon]=\"hideIcon\"\n        [type]=\"type\"\n        [direction]=\"direction\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n      </freud-speed-dial>\n  </div>\n  `,\n})"
                },
                {
                    "name": "TypeCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                },
                {
                    "name": "TypeQuarterCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                },
                {
                    "name": "TypeQuarterDownRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                }
            ],
            "stories/buttons/split-button/SplitButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Update', icon: 'freud-icon freud-icon-refresh', command: () => {\n      console.log('Evento update')\n    }\n  },\n  {\n    label: 'Delete', icon: 'freud-icon freud-icon-close', command: () => {\n      console.log('Evento delete')\n    },\n  },\n  {label: 'Zenklub', icon: 'freud-icon freud-icon-info', url: 'http://zenklub.com'},\n  {separator: true},\n  {label: 'Setup', icon: 'freud-icon freud-icon-cog'}\n]"
                },
                {
                    "name": "itemsWithoutIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Update', command: () => {console.log('Evento update')}\n  },\n  {\n    label: 'Delete', command: () => {console.log('Evento delete')},\n  },\n  {label: 'Zenklub', url: 'http://zenklub.com'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSplitButtonComponent>",
                    "defaultValue": "(args: FreudSplitButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-split-button\n        [label]=\"label\"\n        [disabled]=\"disabled\"\n        [items]=\"items\"\n        [bgColor]=\"bgColor\">\n    </freud-split-button>\n    <p *ngIf=\"!disabled\" style=\"margin-bottom: 180px\"></p>\n`"
                }
            ],
            "stories/forms/auto-complete/AutoComplete.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Dropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDropdown.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAutoCompleteComponent>",
                    "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
                },
                {
                    "name": "TemplateDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAutoCompleteComponent>",
                    "defaultValue": "(args: FreudAutoCompleteComponent) => ({\n  props: { ...args },\n  template: templateDropdown,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 150px\">\n        <freud-auto-complete-example\n          [disabled]=\"disabled\"\n          [dropdown]=\"dropdown\"\n          [multiple]=\"multiple\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n        </freud-auto-complete-example>\n    </div>\n`"
                }
            ],
            "stories/forms/cascade-select/CascadeSelect.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'Australia',\n    code: 'AU',\n    states: [\n      {\n        name: 'New South Wales',\n        cities: [\n          {cname: 'Sydney', code: 'A-SY'},\n          {cname: 'Newcastle', code: 'A-NE'},\n          {cname: 'Wollongong', code: 'A-WO'}\n        ]\n      },\n      {\n        name: 'Queensland',\n        cities: [\n          {cname: 'Brisbane', code: 'A-BR'},\n          {cname: 'Townsville', code: 'A-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'Canada',\n    code: 'CA',\n    states: [\n      {\n        name: 'Quebec',\n        cities: [\n          {cname: 'Montreal', code: 'C-MO'},\n          {cname: 'Quebec City', code: 'C-QU'}\n        ]\n      },\n      {\n        name: 'Ontario',\n        cities: [\n          {cname: 'Ottawa', code: 'C-OT'},\n          {cname: 'Toronto', code: 'C-TO'}\n        ]\n      },\n\n    ]\n  },\n  {\n    name: 'United States',\n    code: 'US',\n    states: [\n      {\n        name: 'California',\n        cities: [\n          {cname: 'Los Angeles', code: 'US-LA'},\n          {cname: 'San Diego', code: 'US-SD'},\n          {cname: 'San Francisco', code: 'US-SF'}\n        ]\n      },\n      {\n        name: 'Florida',\n        cities: [\n          {cname: 'Jacksonville', code: 'US-JA'},\n          {cname: 'Miami', code: 'US-MI'},\n          {cname: 'Tampa', code: 'US-TA'},\n          {cname: 'Orlando', code: 'US-OR'}\n        ]\n      },\n      {\n        name: 'Texas',\n        cities: [\n          {cname: 'Austin', code: 'US-AU'},\n          {cname: 'Dallas', code: 'US-DA'},\n          {cname: 'Houston', code: 'US-HO'}\n        ]\n      }\n    ]\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCascadeSelectComponent>",
                    "defaultValue": "(args: FreudCascadeSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-cascade-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"'cname'\"\n          [optionValue]=\"'code'\"\n          [placeholder]=\"placeholder\"\n          [optionGroupLabel]=\"'name'\"\n          [optionGroupChildren]=\"['states', 'cities']\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-cascade-select>\n    </div>\n`"
                }
            ],
            "stories/forms/checkbox/Checkbox.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCheckboxComponent>",
                    "defaultValue": "(args: FreudCheckboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n      <freud-checkbox\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [bgColor]=\"bgColor\"\n        [invalid]=\"invalid\">\n    </freud-checkbox>\n`"
                }
            ],
            "stories/forms/input-group/InputGroup.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRadioAndButton.bind({})"
                },
                {
                    "name": "CheckboxAndText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCheckboxAndText.bind({})"
                },
                {
                    "name": "IconAndRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconAndRadio.bind({})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconLeft.bind({})"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconRight.bind({})"
                },
                {
                    "name": "RadioAndButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRadioAndButton.bind({})"
                },
                {
                    "name": "TemplateCheckboxAndText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-checkbox></freud-checkbox>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">ww</span>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateIconAndRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item\"></freud-radio-button>\n      </span>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateIconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateIconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\n    </div>\n  `,\n})"
                },
                {
                    "name": "TemplateRadioAndButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: `\n    <div class=\"freud-input-group\">\n      <span class=\"freud-input-group-addon\">\n        <freud-radio-button radioValue=\"teste\" name=\"item2\"></freud-radio-button>\n      </span>\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\n      <freud-button>Button</freud-button>\n    </div>\n  `,\n})"
                }
            ],
            "stories/forms/input-mask/InputMask.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Celular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CPF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Data",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Telefone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputMaskComponent>",
                    "defaultValue": "(args: FreudInputMaskComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-mask\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [mask]=\"mask\"\n        [bgColor]=\"bgColor\">\n    </freud-input-mask>\n`"
                }
            ],
            "stories/forms/input-number/InputNumber.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ButtonLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateButtonLayout.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputNumberComponent>",
                    "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "TemplateButtonLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputNumberComponent>",
                    "defaultValue": "(args: FreudInputNumberComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'stacked'\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        [buttonLayout]=\"'horizontal'\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [showButtons]=\"true\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number> <br><br>\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [label]=\"label\"\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\n        [buttonLayout]=\"'vertical'\"\n        [showButtons]=\"true\">\n    </freud-input-number> <br><br>\n  `,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-number\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [showButtons]=\"showButtons\"\n        [bgColor]=\"bgColor\">\n    </freud-input-number>\n`"
                }
            ],
            "stories/forms/input-password/InputPassword.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFeedback.bind({})"
                },
                {
                    "name": "CustomTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFull.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Feedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFeedback.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n  <div style=\"height: 130px\">\n          <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-input-password>\n  </div>\n`"
                },
                {
                    "name": "TemplateFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFeedback,\n})"
                },
                {
                    "name": "templateFull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 350px\">\n        <freud-input-password\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [feedback]=\"feedback\"\n          [placeholder]=\"placeholder\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n            <ng-container freudTemplateHeader>\n              <strong>Pick a password</strong>\n            </ng-container>\n            <ng-container freudTemplatefooter>\n                <div>\n                  <hr>\n                  <p class=\"p-mt-2\">Suggestions</p>\n                  <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\n                      <li>At least one lowercase</li>\n                      <li>At least one uppercase</li>\n                      <li>At least one numeric</li>\n                      <li>Minimum 8 characters</li>\n                  </ul>\n                </div>\n            </ng-container>\n        </freud-input-password>\n    </div>\n`"
                },
                {
                    "name": "TemplateFull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\n  props: { ...args },\n  template: templateFull,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-password\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [feedback]=\"feedback\"\n        [placeholder]=\"placeholder\"\n        [invalid]=\"invalid\"\n        [bgColor]=\"bgColor\">\n    </freud-input-password>\n`"
                }
            ],
            "stories/forms/input-text/InputText.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HelperText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-input-text\n        [(ngModel)]=\"value\"\n        [disabled]=\"disabled\"\n        [label]=\"label\"\n        [placeholder]=\"placeholder\"\n        [helpText]=\"helpText\"\n        [invalid]=\"invalid\"\n        [rightIcon]=\"rightIcon\"\n        [bgColor]=\"bgColor\">\n    </freud-input-text>\n`"
                }
            ],
            "stories/forms/listbox/Listbox.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Checkbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CheckboxAndFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Filter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudListboxComponent>",
                    "defaultValue": "(args: FreudListboxComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-listbox\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [options]=\"options\"\n          [multiple]=\"multiple\"\n          [filter]=\"filter\"\n          [checkbox]=\"checkbox\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [invalid]=\"invalid\">\n      </freud-listbox>\n    </div>\n`"
                }
            ],
            "stories/forms/multi-select/MultiSelect.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Chip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMultiSelectComponent>",
                    "defaultValue": "(args: FreudMultiSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 300px\">\n        <freud-multi-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [display]=\"display\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-multi-select>\n    </div>\n`"
                }
            ],
            "stories/forms/radio-button/RadioButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudRadioButtonComponent>",
                    "defaultValue": "(args: FreudRadioButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n  argTypes: {\n    value: {\n      name: 'ModelValue',\n      type: { name: 'string' },\n      defaultValue: 'Hello',\n      description: 'demo description',\n      table: {\n        type: { summary: 'string' },\n        defaultValue: { summary: 'Hello' },\n      },\n      control: {\n        type: 'text'\n      }\n    }\n  }\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n        <freud-radio-button-example\n            [(ngModel)]=\"value\"\n            [disabled]=\"disabled\"\n            [label]=\"label\"\n            [name]=\"'label'\"\n            [bgColor]=\"bgColor\"\n        ></freud-radio-button-example>\n`"
                }
            ],
            "stories/forms/select/Select.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {name: 'New York', code: 'NY'},\n  {name: 'Rome', code: 'RM', disabled: true},\n  {name: 'London', code: 'LDN'},\n  {name: 'Istanbul', code: 'IST'},\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSelectComponent>",
                    "defaultValue": "(args: FreudSelectComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <div style=\"height: 250px\">\n        <freud-select\n          [(ngModel)]=\"value\"\n          [disabled]=\"disabled\"\n          [label]=\"label\"\n          [options]=\"options\"\n          [optionLabel]=\"optionLabel\"\n          [optionValue]=\"optionValue\"\n          [placeholder]=\"placeholder\"\n          [helpText]=\"helpText\"\n          [invalid]=\"invalid\"\n          [bgColor]=\"bgColor\">\n      </freud-select>\n    </div>\n`"
                }
            ],
            "stories/forms/switch/Switch.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSwitchComponent>",
                    "defaultValue": "(args: FreudSwitchComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n      <freud-input-switch\n        [(ngModel)]=\"defaultValue\"\n        [disabled]=\"disabled\"\n        [invalid]=\"invalid\">\n    </freud-input-switch>\n`"
                },
                {
                    "name": "value",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "defaultValue": "false"
                }
            ],
            "stories/media/avatar/Avatar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Imagem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAvatarComponent>",
                    "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-avatar [size]=\"size\" [label]=\"label\" [badge]=\"badge\" [bgColor]=\"bgColor\" [withIcon]=\"withIcon\" [image]=\"image\"></freud-avatar>\n  `,\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAvatarComponent>",
                    "defaultValue": "(args: FreudAvatarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center\">\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'sm'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'md'\" [label]=\"'A'\"></freud-avatar>\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'lg'\" [label]=\"'A'\"></freud-avatar>\n    </div>\n  `,\n})"
                },
                {
                    "name": "WithBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/media/gallery/gallery.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria1.jpg\",\n    \"alt\": \"Description for Image 1\",\n    \"title\": \"Title 1\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria2.jpg\",\n    \"alt\": \"Description for Image 2\",\n    \"title\": \"Title 2\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria3.jpg\",\n    \"alt\": \"Description for Image 3\",\n    \"title\": \"Title 3\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria4.jpg\",\n    \"alt\": \"Description for Image 4\",\n    \"title\": \"Title 4\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria5.jpg\",\n    \"alt\": \"Description for Image 5\",\n    \"title\": \"Title 5\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria6.jpg\",\n    \"alt\": \"Description for Image 6\",\n    \"title\": \"Title 6\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria7.jpg\",\n    \"alt\": \"Description for Image 7\",\n    \"title\": \"Title 7\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria8.jpg\",\n    \"alt\": \"Description for Image 8\",\n    \"title\": \"Title 8\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria9.jpg\",\n    \"alt\": \"Description for Image 9\",\n    \"title\": \"Title 9\"\n  },\n  {\n    \"previewImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria10.jpg\",\n    \"alt\": \"Description for Image 10\",\n    \"title\": \"Title 10\"\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudGalleryComponent>",
                    "defaultValue": "(args: FreudGalleryComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-gallery\n        [images]=\"images\"\n        [showThumbnails]=\"showThumbnails\"\n        [bgColor]=\"bgColor\">\n    </freud-gallery>\n  `,\n})"
                },
                {
                    "name": "WithoutThumbnail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/media/image/Image.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudImageComponent>",
                    "defaultValue": "(args: FreudImageComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-image [preview]=\"preview\" [alt]=\"alt\" [src]=\"src\" [height]=\"height\" [width]=\"width\"></freud-image>\n  `,\n})"
                }
            ],
            "stories/feedback/alert-messages/AlertMessages.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Inline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateInline.bind({})"
                },
                {
                    "name": "messages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMessage[]",
                    "defaultValue": "[\n  {severity:'success', summary:'Success', detail:'Message content'},\n  {severity:'info', summary:'Info', detail:'Message content'},\n  {severity:'warn', summary:'Warning', detail:'Message content'},\n  {severity:'error', summary:'Error', detail:'Message content'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAlertMessagesComponent>",
                    "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-messages\n        [messages]=\"messages\">\n    </freud-alert-messages>\n  `,\n})"
                },
                {
                    "name": "TemplateInline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAlertMessagesComponent>",
                    "defaultValue": "(args: FreudAlertMessagesComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-alert-message [severity]=\"'success'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'info'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'warn'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n    <freud-alert-message [severity]=\"'error'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\n  `,\n})"
                }
            ],
            "stories/feedback/knob/Knob.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudKnobComponent>",
                    "defaultValue": "(\n  args: FreudKnobComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-knob\n      [value]=\"value\"\n      [min]=\"min\"\n      [max]=\"max\"\n      [step]=\"step\"\n      [size]=\"size\"\n      [disabled]=\"disabled\"\n      [bgColor]=\"bgColor\">\n    </freud-knob>\n  `,\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudKnobComponent>",
                    "defaultValue": "(\n  args: FreudKnobComponent\n) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center;\">\n      <freud-knob style=\"margin-right: 20px\"\n        [value]=\"'50'\"\n        [size]=\"'default'\">\n      </freud-knob>\n\n      <freud-knob\n        [value]=\"'50'\"\n        [size]=\"'large'\">\n      </freud-knob>\n    </div>\n  `,\n})"
                }
            ],
            "stories/feedback/loader/Loader.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/loader/Loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/loader/Loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/loader/Loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/loader/Loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudLoaderComponent>",
                    "defaultValue": "(\n  args: FreudLoaderComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-loader\n      [size]=\"size\"\n      [bgColor]=\"bgColor\">\n    </freud-loader>\n  `,\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/loader/Loader.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudLoaderComponent>",
                    "defaultValue": "(\n  args: FreudLoaderComponent\n) => ({\n  props: { ...args },\n  template: `\n    <div style=\"display: flex; align-items: center;\">\n      <freud-loader style=\"margin-right: 20px;\"\n        [size]=\"'default'\">\n      </freud-knob>\n\n      <freud-loader\n        [size]=\"'lg'\">\n      </freud-loader>\n    </div>\n  `,\n})"
                }
            ],
            "stories/feedback/progress-bar/ProgressBar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Indeterminate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudProgressBarComponent>",
                    "defaultValue": "(\n  args: FreudProgressBarComponent\n) => ({\n  props: { ...args },\n  template: `\n      <freud-progress-bar [bgColor]=\"bgColor\" [value]=\"50\" [mode]=\"mode\">\n      </freud-progress-bar>\n  `,\n})"
                }
            ],
            "stories/feedback/progress-spinner/ProgressSpinner.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudProgressSpinnerComponent>",
                    "defaultValue": "(\n  args: FreudProgressSpinnerComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"width: 350px\">\n      <freud-progress-spinner [bgColor]=\"bgColor\">\n      </freud-progress-spinner>\n  </div>\n  `,\n})"
                }
            ],
            "stories/feedback/rating/Rating.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudRatingComponent>",
                    "defaultValue": "(\n  args: FreudRatingComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-rating\n      [value]=\"value\"\n      [stars]=\"stars\"\n      [disabled]=\"disabled\"\n      [bgColor]=\"bgColor\">\n    </freud-rating>\n  `,\n})"
                }
            ],
            "stories/feedback/skeleton/Skeleton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSkeletonComponent>",
                    "defaultValue": "(\n  args: FreudSkeletonComponent\n) => ({\n  props: { ...args },\n  template: `\n  <div style=\"width: 350px\">\n      <freud-skeleton\n        [width]=\"'100%'\"\n        [height]=\"'15px'\"\n        [bgColor]=\"bgColor\">\n      </freud-skeleton>\n      <br>\n      <freud-skeleton\n        [width]=\"'100%'\"\n        [height]=\"'15px'\"\n        [bgColor]=\"bgColor\">\n      </freud-skeleton>\n      <br>\n      <freud-skeleton\n        [width]=\"'350px'\"\n        [height]=\"'70px'\"\n        [bgColor]=\"bgColor\">\n      </freud-skeleton>\n      <br>\n      <div style=\"display: flex\">\n        <freud-skeleton style=\"margin-right: 10px\"\n          [width]=\"'170px'\"\n          [height]=\"'70px'\"\n          [bgColor]=\"bgColor\">\n        </freud-skeleton>\n        <freud-skeleton\n          [width]=\"'170px'\"\n          [height]=\"'70px'\"\n          [bgColor]=\"bgColor\">\n        </freud-skeleton>\n      </div>\n  </div>\n  `,\n})"
                }
            ],
            "stories/feedback/steps/Steps.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "itens",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepMenu[]",
                    "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudStepsComponent>",
                    "defaultValue": "(\n  args: FreudStepsComponent\n) => ({\n  props: { ...args },\n  template: `\n    <freud-steps [model]=\"model\" [readonly]=\"readonly\" [activeIndex]=\"activeIndex\" [bgColor]=\"bgColor\"></freud-steps>\n  `,\n})"
                }
            ],
            "stories/feedback/tag/Tag.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "BGColorOutline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTagComponent>",
                    "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag [outline]=\"outline\" [color]=\"color\" [value]=\"value\"></freud-tag>\n  `,\n})"
                },
                {
                    "name": "TemplateBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTagComponent>",
                    "defaultValue": "(args: FreudTagComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [value]=\"'Default'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'success'\" [value]=\"'Success'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'info'\" [value]=\"'Info'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'warning'\" [value]=\"'Warning'\"></freud-tag>\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'error'\" [value]=\"'Error'\"></freud-tag>\n  `,\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/feedback/tooltip/Tooltip.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Bottom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Left",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Right",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTooltipComponent>",
                    "defaultValue": "(\n  args: FreudTooltipComponent\n) => ({\n  props: { ...args },\n  template: `\n    <span freud-tooltip style=\"color:{{bgColor ? 'white' : 'black'}}\"\n      [tooltipLabel]=\"tooltipLabel\"\n      [tooltipPosition]=\"tooltipPosition\"\n      style=\"font-family: 'Source Sans Pro'\"\n      [bgColor]=\"bgColor\">Passe o mouse aqui!</span>\n  `,\n})"
                },
                {
                    "name": "Top",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/structure/breadcrumb/Breadcrumb.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem",
                    "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBreadcrumbComponent>",
                    "defaultValue": "(args: FreudBreadcrumbComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-breadcrumb [bgColor]=\"bgColor\" [items]=\"items\" [home]=\"home\"></freud-breadcrumb>\n  `,\n})"
                }
            ],
            "stories/structure/menu/Menu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMenuComponent>",
                    "defaultValue": "(args: FreudMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-menu [items]=\"items\" [popup]=\"popup\"></freud-menu>\n  `,\n})"
                }
            ],
            "stories/structure/menubar/Menubar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem",
                    "defaultValue": "{\n  icon: 'freud-icon freud-icon-home'\n}"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {\n    label:'Users',\n    icon:'freud-icon freud-icon-user',\n    items:[\n      {\n        label:'New',\n        icon:'freud-icon freud-icon-user-plus',\n\n      },\n      {\n        label:'Delete',\n        icon:'freud-icon freud-icon-user-minus',\n\n      },\n      {\n        label:'Search',\n        icon:'freud-icon freud-icon-users',\n        items:[\n          {\n            label:'Filter',\n            icon:'freud-icon freud-icon-filter',\n            items:[\n              {\n                label:'Print',\n                icon:'freud-icon freud-icon-print'\n              }\n            ]\n          },\n          {\n            icon:'freud-icon freud-icon-bars',\n            label:'List'\n          }\n        ]\n      }\n    ]\n  },\n  {\n    label:'Events',\n    icon:'freud-icon freud-icon-calendar',\n    items:[\n      {\n        label:'Edit',\n        icon:'freud-icon freud-icon-pencil',\n      },\n    ]\n  },\n  {\n    label:'Quit',\n    icon:'freud-icon freud-icon-power-off'\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMenubarComponent>",
                    "defaultValue": "(args: FreudMenubarComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"height: 240px;width: 100%\">\n      <freud-menubar\n          [startImgAlt]=\"'Home'\"\n          [startImgSrc]=\"startImgSrc\"\n          [startImgHref]=\"'https://zenklub.com.br'\"\n          [items]=\"items\"\n          [bgColor]=\"bgColor\"\n      ></freud-menubar>\n    </div>\n  `,\n})"
                }
            ],
            "stories/structure/panel-menu/PanelMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {\n    label: 'File',\n    items: [{\n      label: 'New',\n      icon: 'freud-icon freud-icon-fw freud-icon-plus',\n      items: [\n        {label: 'User', icon: 'freud-icon freud-icon-fw freud-icon-user-plus'},\n        {label: 'Filter', icon: 'freud-icon freud-icon-fw freud-icon-filter'}\n      ]\n    },\n      {label: 'Open', icon: 'freud-icon freud-icon-fw freud-icon-external-link'},\n      {separator: true},\n      {label: 'Quit', icon: 'freud-icon freud-icon-fw freud-icon-times'}\n    ]\n  },\n  {\n    label: 'Edit',\n    icon: 'freud-icon freud-icon-fw freud-icon-pencil',\n    items: [\n      {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-trash'},\n      {label: 'Refresh', icon: 'freud-icon freud-icon-fw freud-icon-refresh'}\n    ]\n  },\n  {\n    label: 'Help',\n    icon: 'freud-icon freud-icon-fw freud-icon-question',\n    items: [\n      {\n        label: 'Contents',\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-bars'\n      },\n      {\n        label: 'Search',\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-search',\n        items: [\n          {\n            label: 'Text',\n            items: [\n              {\n                label: 'Workspace'\n              }\n            ]\n          },\n          {\n            label: 'User',\n            icon: 'freud-icon freud-icon-fw freud-icon-file',\n          }\n        ]}\n    ]\n  },\n  {\n    label: 'Actions',\n    icon: 'freud-icon freud-icon-fw freud-icon-cog',\n    items: [\n      {\n        label: 'Edit',\n        icon: 'freud-icon freud-icon-fw freud-icon-pencil',\n        items: [\n          {label: 'Save', icon: 'freud-icon freud-icon-fw freud-icon-save'},\n          {label: 'Update', icon: 'freud-icon freud-icon-fw freud-icon-save'},\n        ]\n      },\n      {\n        label: 'Other',\n        icon: 'freud-icon freud-icon-fw freud-icon-tags',\n        items: [\n          {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-minus'}\n        ]\n      }\n    ]\n  }\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelMenuComponent>",
                    "defaultValue": "(args: FreudPanelMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <div style=\"width: 400px\">\n        <freud-panel-menu\n          [items]=\"items\"\n        ></freud-panel-menu>\n    </div>\n  `,\n})"
                }
            ],
            "stories/structure/scroll-panel/ScrollPanel.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollPanelComponent>",
                    "defaultValue": "(args: FreudScrollPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.\n</freud-scroll-panel>\n  `,\n})"
                }
            ],
            "stories/structure/slide-menu/SlideMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[{\n  label: 'Options',\n  items: [{\n    label: 'Update',\n    icon: 'freud-icon freud-icon-refresh',\n    command: () => {/* Comando */ }\n  },\n    {\n      label: 'Delete',\n      icon: 'freud-icon freud-icon-times'\n    }\n  ]},\n  {\n    label: 'Navigate',\n    items: [{\n      label: 'Update',\n      icon: 'freud-icon freud-icon-external-link',\n    },\n      {\n        label: 'Router',\n        icon: 'freud-icon freud-icon-upload',\n        routerLink: '/fileupload'\n      }\n    ]}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSlideMenuComponent>",
                    "defaultValue": "(args: FreudSlideMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-slide-menu [items]=\"items\"></freud-slide-menu>\n  `,\n})"
                }
            ],
            "stories/structure/splitter/Splitter.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSplitterComponent>",
                    "defaultValue": "(args: FreudSplitterComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-splitter [panelSizes]=\"panelSizes\" [style]=\"{'height': '300px'}\" [layout]=\"layout\">\n      <ng-template pTemplate>\n        <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n          Panel 1\n        </div>\n      </ng-template>\n    <ng-template pTemplate>\n      <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\n        Panel 2\n      </div>\n    </ng-template>\n</freud-splitter>\n  `,\n})"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/structure/tab-menu/TabMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\n  {label: 'Home', command: () => console.log('menuClicked')},\n  {label: 'Calendar', command: () => console.log('menuClicked')},\n  {label: 'Edit', command: () => console.log('menuClicked')},\n  {label: 'Documentation', command: () => console.log('menuClicked')},\n  {label: 'Settings', command: () => console.log('menuClicked')}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTabMenuComponent>",
                    "defaultValue": "(args: FreudTabMenuComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-menu\n      [items]=\"items\"\n      [activeItem]=\"activeItem\"\n      [bgColor]=\"bgColor\"\n    ></freud-tab-menu>\n  `,\n})"
                }
            ],
            "stories/structure/tab-view/TabView.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIcon.bind({})"
                },
                {
                    "name": "Scrollable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTabViewComponent>",
                    "defaultValue": "(args: FreudTabViewComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-view\n      [activeIndex]=\"activeIndex\"\n      [controlClose]=\"controlClose\"\n      [scrollable]=\"scrollable\"\n      [bgColor]=\"bgColor\">\n        <freud-tab-panel header=\"Header 1\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 2\">\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 3\">\n            Content 3\n        </freud-tab-panel>\n    </freud-tab-view>\n  `,\n})"
                },
                {
                    "name": "TemplateIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTabViewComponent>",
                    "defaultValue": "(args: FreudTabViewComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-tab-view\n      [activeIndex]=\"activeIndex\"\n      [controlClose]=\"controlClose\"\n      [scrollable]=\"scrollable\"\n      [bgColor]=\"bgColor\">\n        <freud-tab-panel header=\"Header 1\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 2\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\n        </freud-tab-panel>\n        <freud-tab-panel header=\"Header 3\" [leftIcon]=\"'freud-icon freud-icon-plus'\">\n            Content 3\n        </freud-tab-panel>\n    </freud-tab-view>\n  `,\n})"
                }
            ],
            "stories/others/acordion/Acordion.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDisabled.bind({})"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAccordionComponent>",
                    "defaultValue": "(args: FreudAccordionComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-accordion [multiple]=\"multiple\">\n        <freud-accordion-tab header=\"Header I\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header II\">\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header III\">\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\n        </freud-accordion-tab>\n    </freud-accordion>\n  `,\n})"
                },
                {
                    "name": "TemplateDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAccordionComponent>",
                    "defaultValue": "(args: FreudAccordionComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-accordion [multiple]=\"multiple\">\n        <freud-accordion-tab header=\"Header I\">\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header II\">\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\n        </freud-accordion-tab>\n        <freud-accordion-tab header=\"Header III\" [disabled]=\"true\">\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\n        </freud-accordion-tab>\n    </freud-accordion>\n  `,\n})"
                }
            ],
            "stories/others/action-icon/ActionIcon.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudActionIconComponent>",
                    "defaultValue": "(args: FreudActionIconComponent) => ({\n  props: { ...args },\n  template: `<freud-action-icon [bgColor]=\"bgColor\"></freud-action-icon>`,\n})"
                }
            ],
            "stories/others/calendar/Calendar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MonthView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCalendarComponent>",
                    "defaultValue": "(args: FreudCalendarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-calendar\n      [selectionMode]=\"selectionMode\"\n      [dateFormat]=\"dateFormat\"\n      [inline]=\"inline\"\n      [showOtherMonths]=\"showOtherMonths\"\n      [selectOtherMonths]=\"selectOtherMonths\"\n      [showWeek]=\"showWeek\"\n      [view]=\"view\"\n      [yearNavigator]=\"yearNavigator\"\n      [yearRange]=\"yearRange\"\n      [defaultDate]=\"defaultDate\"\n      [showTime]=\"showTime\"\n      [hourFormat]=\"hourFormat\"\n      [disabled]=\"disabled\"\n      [timeOnly]=\"timeOnly\"\n      [monthNavigator]=\"monthNavigator\"\n      [disabledDates]=\"disabledDates\"\n      [required]=\"required\"\n      [maxDate]=\"maxDate\"\n      [minDate]=\"minDate\"\n      [(ngModel)]=\"value\">\n    </freud-calendar>\n  `,\n})"
                },
                {
                    "name": "TimeOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "YearNavigator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/others/captcha/Captcha.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/captcha/Captcha.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/captcha/Captcha.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/captcha/Captcha.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCaptchaComponent>",
                    "defaultValue": "(args: FreudCaptchaComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-captcha [siteKey]=\"siteKey\" [autoLoadScript]=\"true\" [initCallback]=\"'initRecaptcha'\"></freud-captcha>\n  `,\n})"
                }
            ],
            "stories/others/chip/Chip.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Removable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudChipComponent>",
                    "defaultValue": "(args: FreudChipComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-chip\n        [label]=\"'Action'\"\n        [removable]=\"removable\">\n    </freud-chip>\n  `,\n})"
                }
            ],
            "stories/others/divider/Divider.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateHorizontal.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "TemplateHorizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'left'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'center'\">\n            Title\n      </freud-divider><br>\n      <freud-divider\n          [tabindex]=\"tabindex\"\n          [layout]=\"'horizontal'\"\n          [align]=\"'right'\">\n            Title\n      </freud-divider>\n  `,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-divider\n        [tabindex]=\"tabindex\"\n        [layout]=\"layout\"\n        [bgColor]=\"bgColor\">\n        Title\n    </freud-divider>\n`"
                },
                {
                    "name": "TemplateVertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\n  props: { ...args },\n  template: `\n      <div style=\"display: flex;gap: 16px;height: 220px\">\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'top'\">\n              Title\n        </freud-divider>\n        <freud-divider\n            [tabindex]=\"tabindex\"\n            [layout]=\"'vertical'\"\n            [align]=\"'bottom'\">\n              Title\n        </freud-divider>\n      </div>\n  `,\n})"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateVertical.bind({})"
                }
            ],
            "stories/others/full-calendar/FullCalendar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "calendarOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarOptions",
                    "defaultValue": "{\n  initialView: 'dayGridMonth',\n  plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\n  headerToolbar: {\n    left: 'prev,next today',\n    center: 'title',\n    right: 'dayGridMonth,timeGridWeek,timeGridDay'\n  },\n  events: [\n    { title: 'event 1', date: '2022-12-12' },\n    { title: 'event 2', date: '2022-12-24' }\n  ]\n}"
                },
                {
                    "name": "CustomHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudFullCalendarComponent>",
                    "defaultValue": "(args: FreudFullCalendarComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-full-calendar [bgColor]=\"bgColor\" [events]=\"events\" [options]=\"options\">\n    </freud-full-calendar>\n  `,\n})"
                }
            ],
            "stories/others/paginator/Paginator.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PageReport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPaginatorComponent>",
                    "defaultValue": "(args: FreudPaginatorComponent) => ({\n  props: { ...args },\n  template: `<freud-paginator\n    [rows]=\"rows\"\n    [totalRecords]=\"totalRecords\"\n    [pageLinkSize]=\"pageLinkSize\"\n    [first]=\"first\"\n    [showFirstLastIcon]=\"showFirstLastIcon\"\n    [alwaysShow]=\"alwaysShow\"\n    [currentPageReportTemplate]=\"currentPageReportTemplate\"\n    [showCurrentPageReport]=\"showCurrentPageReport\"\n    [bgColor]=\"bgColor\">\n    </freud-paginator>`,\n})"
                }
            ],
            "stories/others/scroll-top/ScrollTop.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTargetBGColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "TargetElement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTarget.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-top [threshold]=\"200\"></freud-scroll-top>\n  `,\n})"
                },
                {
                    "name": "TemplateTarget",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n      <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\"></freud-scroll-top>\n    </freud-scroll-panel>\n  `,\n})"
                },
                {
                    "name": "TemplateTargetBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px', backgroundColor: '#241249', color: 'white'}\">\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n          Vitae et leo duis ut diam.\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\n          Mattis aliquam faucibus purus in massa tempor nec.\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\" [bgColor]=\"true\"></freud-scroll-top>\n    </freud-scroll-panel>\n  `,\n})"
                }
            ],
            "stories/others/select-button/SelectButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OptionDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {label: 'Item1'},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
                },
                {
                    "name": "optionsDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {label: 'Item1', disabled: true},\n  {label: 'Item2'},\n  {label: 'Item3'},\n  {label: 'Item4'}\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSelectButtonComponent>",
                    "defaultValue": "(args: FreudSelectButtonComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-select-button\n        [options]=\"options\"\n        [multiple]=\"multiple\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [disabled]=\"disabled\"\n        [selectedOption]=\"selectedOption\"\n        [optionDisabled]=\"optionDisabled\"\n        [optionLabel]=\"optionLabel\"></freud-select-button>\n`"
                }
            ],
            "stories/others/slider/Slider.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Range",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSliderComponent>",
                    "defaultValue": "(args: FreudSliderComponent) => ({\n  props: { ...args },\n  template: templateHTML,\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\n    <freud-slider\n        [(ngModel)]=\"value\"\n        [tabindex]=\"tabindex\"\n        [bgColor]=\"bgColor\"\n        [orientation]=\"orientation\"\n        [range]=\"range\"\n        [disabled]=\"disabled\">\n    </freud-slider>\n`"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/web-components/src/components/typography/typrography.type.ts": [
                {
                    "name": "bodyTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typrography.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  // Regular\n  'smallRegular1-5',\n  'bodyRegular1-5',\n\n  'smallRegular1-2',\n  'bodyRegular1-2',\n\n  'smallRegular1',\n  'bodyRegular1',\n  \n  'smallRegularAuto',\n  'bodyRegularAuto',\n\n  // Semibold\n  'smallSemibold1-5',\n  'bodySemibold1-5',\n\n  'smallSemibold1-2',\n  'bodySemibold1-2',\n\n  'smallSemibold1',\n  'bodySemibold1',\n\n  'smallSemiboldAuto',\n  'bodySemiboldAuto',\n\n  // Bold\n  'smallBold1-5',\n  'bodyBold1-5',\n\n  'smallBold1-2',\n  'bodyBold1-2',\n\n  'smallBold1',\n  'bodyBold1',\n\n  'smallBoldAuto',\n  'bodyBoldAuto',\n]"
                },
                {
                    "name": "headingTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typrography.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  // Regular\n  'h1Regular1-5',\n  'h2Regular1-5',\n  'h3Regular1-5',\n  'h4Regular1-5',\n  'h5Regular1-5',\n  'h6Regular1-5',\n\n  'h1Regular1-2',\n  'h2Regular1-2',\n  'h3Regular1-2',\n  'h4Regular1-2',\n  'h5Regular1-2',\n  'h6Regular1-2',\n\n  'h1Regular1',\n  'h2Regular1',\n  'h3Regular1',\n  'h4Regular1',\n  'h5Regular1',\n  'h6Regular1',\n  \n  'h1RegularAuto',\n  'h2RegularAuto',\n  'h3RegularAuto',\n  'h4RegularAuto',\n  'h5RegularAuto',\n  'h6RegularAuto',\n\n  // Semibold\n  'h1Semibold1-5',\n  'h2Semibold1-5',\n  'h3Semibold1-5',\n  'h4Semibold1-5',\n  'h5Semibold1-5',\n  'h6Semibold1-5',\n\n  'h1Semibold1-2',\n  'h2Semibold1-2',\n  'h3Semibold1-2',\n  'h4Semibold1-2',\n  'h5Semibold1-2',\n  'h6Semibold1-2',\n\n  'h1Semibold1',\n  'h2Semibold1',\n  'h3Semibold1',\n  'h4Semibold1',\n  'h5Semibold1',\n  'h6Semibold1',\n\n  'h1SemiboldAuto',\n  'h2SemiboldAuto',\n  'h3SemiboldAuto',\n  'h4SemiboldAuto',\n  'h5SemiboldAuto',\n  'h6SemiboldAuto',\n\n  // Bold\n  'h1Bold1-5',\n  'h2Bold1-5',\n  'h3Bold1-5',\n  'h4Bold1-5',\n  'h5Bold1-5',\n  'h6Bold1-5',\n\n  'h1Bold1-2',\n  'h2Bold1-2',\n  'h3Bold1-2',\n  'h4Bold1-2',\n  'h5Bold1-2',\n  'h6Bold1-2',\n\n  'h1Bold1',\n  'h2Bold1',\n  'h3Bold1',\n  'h4Bold1',\n  'h5Bold1',\n  'h6Bold1',\n\n  'h1BoldAuto',\n  'h2BoldAuto',\n  'h3BoldAuto',\n  'h4BoldAuto',\n  'h5BoldAuto',\n  'h6BoldAuto',\n]"
                }
            ],
            "projects/web-components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "stories/feedback/toast/Toast.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/toast/Toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/toast/Toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudToastComponent>",
                    "defaultValue": "(args: FreudToastComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-toast-examples>\n    </freud-toast-examples>\n  `,\n})"
                }
            ],
            "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudConfirmDialogComponent>",
                    "defaultValue": "(args: FreudConfirmDialogComponent) => ({\n  template: `\n    <freud-confirm-dialog-example></freud-confirm-dialog-example>\n  `,\n})"
                }
            ],
            "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudConfirmPopupComponent>",
                    "defaultValue": "(args: FreudConfirmPopupComponent) => ({\n  template: `\n    <freud-confirm-popup-example></freud-confirm-popup-example>\n  `,\n})"
                }
            ],
            "stories/modal-and-popover/dialog/Dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Maximizable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Modal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDialogExampleComponent>",
                    "defaultValue": "(args: FreudDialogExampleComponent) => ({\n  props: {...args},\n  template: `\n    <freud-dialog-example [view]=\"view\"></freud-dialog-example>\n  `,\n})"
                }
            ],
            "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\n  template: `\n    <freud-dynamic-dialog-example></freud-dynamic-dialog-example>\n  `,\n})"
                }
            ],
            "stories/structure/panel/Panel.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Footer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFooter.bind({})"
                },
                {
                    "name": "Icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIcons.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelComponent>",
                    "defaultValue": "(args: FreudPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"toggleable\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n    </freud-panel>\n  `,\n})"
                },
                {
                    "name": "TemplateFooter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelComponent>",
                    "defaultValue": "(args: FreudPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-panel [header]=\"'Header'\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n      <ng-container freudTemplatefooter>\n          Footer\n      </ng-container>\n    </freud-panel>\n  `,\n})"
                },
                {
                    "name": "TemplateIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelComponent>",
                    "defaultValue": "(args: FreudPanelComponent) => ({\n  props: { ...args },\n  template: `\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"true\">\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n      <ng-container freudTemplateIcons>\n        <freud-button [color]=\"'ghost'\" class=\"p-panel-header-icon p-link\" (click)=\"menu.toggle($event)\">\n          <span class=\"freud-icon freud-icon-cog\"></span>\n        </freud-button>\n      </ng-container>\n    </freud-panel>\n  `,\n})"
                },
                {
                    "name": "Toggleable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/others/block-ui/BlockUI.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Panel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBlockExampleComponent>",
                    "defaultValue": "(args: FreudBlockExampleComponent) => ({\n  props: { ...args },\n  template: `<freud-block-ui-example [withTarget]=\"withTarget\"></freud-block-ui-example>`,\n})"
                }
            ],
            "projects/web-components/src/components/typography/typography.component.ts": [
                {
                    "name": "types",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "headingTypes.concat(bodyTypes)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/web-components/src/components/media/avatar/avatar.component.ts": [
                {
                    "name": "avatarSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\" | \"lg\"",
                    "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/buttons/button/button.component.ts": [
                {
                    "name": "buttonColors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"ghost\"",
                    "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "buttonSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\" | \"lg\"",
                    "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/badge/badge.component.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"actived\"",
                    "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "sizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"large\"",
                    "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/tag/tag.component.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\"",
                    "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts": [
                {
                    "name": "directions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"up\" | \"down\" | \"left\" | \"right\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                    "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "types",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                    "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/typography/typography.component.ts": [
                {
                    "name": "fontTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/web-components/src/components/typography/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "projects/web-components/src/components/forms/listbox/listbox.component.ts": [
                {
                    "name": "listboxFilterMatchModes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                    "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/loader/loader.component.ts": [
                {
                    "name": "loaderSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"lg\"",
                    "file": "projects/web-components/src/components/feedback/loader/loader.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts": [
                {
                    "name": "position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/toast/toast.component.ts": [
                {
                    "name": "positions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\"",
                    "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts": [
                {
                    "name": "positions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"center\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"",
                    "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts": [
                {
                    "name": "severities",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                    "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/knob/knob.component.ts": [
                {
                    "name": "sizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"large\"",
                    "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/web-components/src/api/gallery-photo.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GalleryPhoto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/api/menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/api/message.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSpeedDialComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/split-button/split-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSplitButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/directive/template/template.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FreudTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAlertMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAlertMessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudKnobComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudLoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudProgressSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/rating/rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/skeleton/skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSkeletonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/steps/steps.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudStepsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/steps/steps.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StepMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/auto-complete/auto-complete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAutoCompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/cascade-select/cascade-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCascadeSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-mask/input-mask.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputMaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-number/input-number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-password/input-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-textarea/input-textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputTextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudListboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/fille-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudFileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/gallery/gallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudGalleryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudDynamicDialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudDynamicDialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAccordionTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/action-icon/action-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudActionIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/block-ui/block-ui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBlockUIComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/captcha/captcha.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCaptchaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudChipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/divider/divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/full-calendar/full-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudFullCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudPaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/scroll-top/scroll-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/select-button/select-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSelectButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSortIcon",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/table/table.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FreudSortableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/timeline/timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/menubar/menubar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMenubarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/panel-menu/panel-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudPanelMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/slide-menu/slide-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSlideMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/splitter/splitter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSplitterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-menu/tab-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typography.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "types",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typrography.type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bodyTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typrography.type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headingTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/services/confirmation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudConfirmationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/services/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudMessageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTMLBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTMLSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectionDown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectionLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsWithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Mask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeQuarterCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeQuarterDownRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsWithoutIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "messages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateInline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Actived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBlank",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/loader/Loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/loader/Loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/loader/Loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/loader/Loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/loader/Loader.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Indeterminate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColorOutline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/Toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/Toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/toast-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudToastExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bottom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Left",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Right",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Top",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/auto-complete-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAutoCompleteExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxAndText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconAndRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RadioAndButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCheckboxAndText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconAndRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRadioAndButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Celular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CPF",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Telefone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateButtonLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Feedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateFull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HelperText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoResize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Checkbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxAndFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Filter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Chip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/radio-button-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRadioButtonExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/forms/reactive-form-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudReactiveFormExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "value",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Imagem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicUi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutThumbnail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmPopupExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Maximizable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Modal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/dialog-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDynamicDialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDynamicExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/modal-and-popover-examples/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmationDialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Panel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/block-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBlockExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MonthView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TimeOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YearNavigator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/captcha/Captcha.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/captcha/Captcha.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/captcha/Captcha.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Advanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateAdvanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Removable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateVertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "calendarOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PageReport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TargetElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTarget",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTargetBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OptionDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optionsDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Range",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CaptionAndSummary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCaptionAndSummary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "home",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "home",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Footer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFooter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Toggleable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Scrollable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}