{
    "pipes": [],
    "interfaces": [
        {
            "name": "FreudDynamicDialogConfig",
            "id": "interface-FreudDynamicDialogConfig-04231363c94f201114e36502ef9e0861ead790f80f2d8f18ebd9bf147d8a4d6044330ac4198630b25ad8180508fb23115789958b80bf085b591e9d8edde7b745",
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { DynamicDialogConfig } from \"primeng/dynamicdialog/dynamicdialog-config\";\r\n\r\nexport interface FreudDynamicDialogConfig extends DynamicDialogConfig {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "DynamicDialogConfig"
        },
        {
            "name": "FreudMenuItem",
            "id": "interface-FreudMenuItem-af2b5b3e3f637b798bde09db072b1a1d141c94149bafb44d030ae4512a7c424e42996d1042c3cb983a22b777e2f5806454ede1aaa8c669c8b9c7c7c050184d67",
            "file": "projects/web-components/src/api/menu.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from \"primeng/api\";\r\n\r\nexport interface FreudMenuItem extends MenuItem {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "MenuItem"
        },
        {
            "name": "FreudMessage",
            "id": "interface-FreudMessage-39f22c4e3ab92d5072f09c690f05a20edb337f20d4ec0be4c139f577f06c4ff4c87a27a2082b45d2dfda1a455f290605be571ee0b7fdf66b15332dcd29c23eb1",
            "file": "projects/web-components/src/api/message.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Message } from \"primeng/api\";\r\n\r\nexport interface FreudMessage extends Message {}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "Message"
        },
        {
            "name": "GalleryPhoto",
            "id": "interface-GalleryPhoto-fd4b9ba800f353390a721431e1748a4531533ef2c8297cf6e397d263a653ac21099594b472832c1c02b38f1d160f04214c12400d17912620983260b24f9e516b",
            "file": "projects/web-components/src/api/gallery-photo.interface.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface GalleryPhoto {\r\n  \"previewImageSrc\": string;\r\n  \"thumbnailImageSrc\": string;\r\n  \"alt\": string;\r\n  \"title\": string;\r\n}\r\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "previewImageSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "thumbnailImageSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "methods": []
        },
        {
            "name": "StepMenu",
            "id": "interface-StepMenu-5507e28af76db3d06ed418207011123b126878a21853d66396ffc89bc86742c4f7220f5305fd906b869355cb384026146089688fab4fb80cb7f976eb92548aa4",
            "file": "projects/web-components/src/components/feedback/steps/steps.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\nexport interface StepMenu extends FreudMenuItem {}\r\n\r\n@Component({\r\n  selector: 'freud-steps',\r\n  template: `\r\n    <p-steps\r\n      [model]=\"model\"\r\n      [activeIndex]=\"activeIndex\"\r\n      [readonly]=\"readonly\"\r\n      (activeIndexChange)=\"activeIndexChange.emit($event)\">\r\n    </p-steps>\r\n  `,\r\n  styleUrls: ['./steps.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-steps',\r\n    '[class.freud-steps-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudStepsComponent {\r\n\r\n  @Input() model!: StepMenu[];\r\n  @Input() readonly: boolean = false;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() activeIndex: number = 0;\r\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n}\r\n",
            "properties": [],
            "indexSignatures": [],
            "methods": [],
            "extends": "FreudMenuItem"
        }
    ],
    "injectables": [
        {
            "name": "FreudConfirmationService",
            "id": "injectable-FreudConfirmationService-7b512faa68323348f508f8d03f36f14438a411d733cf052effa8fadd5b93165c609ddcd51a60f8aaa510684bf500fa261107de1ecb24c86f08b38572796bda41",
            "file": "projects/web-components/src/services/confirmation.service.ts",
            "properties": [
                {
                    "name": "accept",
                    "defaultValue": "this.primeConfirmation['acceptConfirmationSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "requireConfirmation$",
                    "defaultValue": "this.primeConfirmation['requireConfirmationSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "confirmation",
                            "type": "Confirmation",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "this",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "confirmation",
                            "type": "Confirmation",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAccept",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Confirmation, ConfirmationService } from 'primeng/api';\r\n\r\n@Injectable()\r\nexport class FreudConfirmationService {\r\n\r\n  constructor(private primeConfirmation: ConfirmationService) {}\r\n\r\n  requireConfirmation$ = this.primeConfirmation['requireConfirmationSource'].asObservable();\r\n  accept = this.primeConfirmation['acceptConfirmationSource'].asObservable();\r\n\r\n  confirm(confirmation: Confirmation) {\r\n    this.primeConfirmation['requireConfirmationSource'].next(confirmation);\r\n    return this;\r\n  }\r\n\r\n  close() {\r\n    this.primeConfirmation['requireConfirmationSource'].next(null);\r\n    return this;\r\n  }\r\n\r\n  onAccept() {\r\n    this.primeConfirmation['acceptConfirmationSource'].next(null);\r\n  }\r\n\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primeConfirmation",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "primeConfirmation",
                        "type": "ConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FreudDialogService",
            "id": "injectable-FreudDialogService-b5f8435eb641f39c97b59970c06986291916cc20ba64e7ead4326bc2c7d8a7d9db747194c08e85d3e2ee41c5bfdc7a0256f7e3c77be86d0a69a878a715fb58ac",
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
            "properties": [
                {
                    "name": "dialogComponentRefMap",
                    "defaultValue": "this.dialogService.dialogComponentRefMap",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "methods": [
                {
                    "name": "open",
                    "args": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "config",
                            "type": "FreudDynamicDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "DynamicDialogRef",
                    "typeParameters": [],
                    "line": 10,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "componentType",
                            "type": "Type<any>",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "config",
                            "type": "FreudDynamicDialogConfig",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DialogService, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { Injectable, Type } from \"@angular/core\";\r\nimport { FreudDynamicDialogConfig } from \"./dynamic-dialog.interface\";\r\n\r\n@Injectable()\r\nexport class FreudDialogService {\r\n\r\n  dialogComponentRefMap = this.dialogService.dialogComponentRefMap;\r\n  constructor(private dialogService: DialogService) {}\r\n  open(componentType: Type<any>, config: FreudDynamicDialogConfig): DynamicDialogRef {\r\n    return this.dialogService.open(componentType, config);\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class FreudDynamicDialogRef extends DynamicDialogRef { }\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "DialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "FreudDynamicDialogRef",
            "id": "injectable-FreudDynamicDialogRef-b5f8435eb641f39c97b59970c06986291916cc20ba64e7ead4326bc2c7d8a7d9db747194c08e85d3e2ee41c5bfdc7a0256f7e3c77be86d0a69a878a715fb58ac",
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
            "properties": [],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { DialogService, DynamicDialogRef } from \"primeng/dynamicdialog\";\r\nimport { Injectable, Type } from \"@angular/core\";\r\nimport { FreudDynamicDialogConfig } from \"./dynamic-dialog.interface\";\r\n\r\n@Injectable()\r\nexport class FreudDialogService {\r\n\r\n  dialogComponentRefMap = this.dialogService.dialogComponentRefMap;\r\n  constructor(private dialogService: DialogService) {}\r\n  open(componentType: Type<any>, config: FreudDynamicDialogConfig): DynamicDialogRef {\r\n    return this.dialogService.open(componentType, config);\r\n  };\r\n}\r\n\r\n@Injectable()\r\nexport class FreudDynamicDialogRef extends DynamicDialogRef { }\r\n",
            "extends": "DynamicDialogRef",
            "type": "injectable"
        },
        {
            "name": "FreudMessageService",
            "id": "injectable-FreudMessageService-88f388eab9846ebf15b91c192684562bbac3e2f80e970bd040e23437bda970c10d44a1d0649f3a99314d3d0f9dd43a90946998783c3b83078336f764744116a0",
            "file": "projects/web-components/src/services/message.service.ts",
            "properties": [
                {
                    "name": "clearObserver",
                    "defaultValue": "this.primeMessage['clearSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "messageObserver",
                    "defaultValue": "this.primeMessage['messageSource'].asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "add",
                    "args": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "Message",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "addAll",
                    "args": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "messages",
                            "type": "Message[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Message, MessageService } from \"primeng/api\";\r\n\r\n@Injectable()\r\nexport class FreudMessageService {\r\n\r\n  constructor(private primeMessage: MessageService) { }\r\n\r\n  messageObserver = this.primeMessage['messageSource'].asObservable();\r\n  clearObserver = this.primeMessage['clearSource'].asObservable();\r\n\r\n  add(message: Message) {\r\n    if (message) {\r\n      this.primeMessage['messageSource'].next(message);\r\n    }\r\n  }\r\n\r\n  addAll(messages: Message[]) {\r\n    if (messages && messages.length) {\r\n      this.primeMessage['messageSource'].next(messages);\r\n    }\r\n  }\r\n\r\n  clear(key?: string) {\r\n    this.primeMessage['clearSource'].next(key || null);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "primeMessage",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 5,
                "jsdoctags": [
                    {
                        "name": "primeMessage",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "FreudSortableColumn",
            "id": "directive-FreudSortableColumn-6fdff9df5f83c89a77c69a6a3cbf604652c79e6e4e1e2fad544162ee0f8330c4c1ba5b62cea6ce18b9486393af9c8640a18da378975d062ba7d5d59031148494",
            "file": "projects/web-components/src/components/others/table/table.component.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren, Directive, HostListener,\r\n  Input, OnDestroy, OnInit,\r\n  QueryList,\r\n  TemplateRef, ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FreudTemplate } from \"../../directive/template\";\r\nimport { Table } from \"primeng/table\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { DomHandler } from \"primeng/dom\";\r\n\r\n@Component({\r\n  selector: 'freud-table',\r\n  template: `\r\n    <p-table\r\n      #tableRef\r\n      [value]=\"value\"\r\n      [columns]=\"columns\"\r\n      [style]=\"style\">\r\n\r\n      <ng-template pTemplate=\"caption\">\r\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"header\" let-columns>\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\r\n      </ng-template>\r\n      <ng-content></ng-content>\r\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n        <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"summary\">\r\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\r\n      </ng-template>\r\n    </p-table>\r\n  `,\r\n  styleUrls: ['./table.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-table',\r\n  }\r\n})\r\nexport class FreudTableComponent implements AfterContentInit {\r\n\r\n  @Input() value!: any[];\r\n  @Input() style!: string;\r\n  @Input() columns!: any[];\r\n  headerTemplate!: TemplateRef<any>;\r\n  headerGroupedTemplate!: TemplateRef<any>;\r\n  bodyTemplate!: TemplateRef<any>;\r\n  captionTemplate!: TemplateRef<any>;\r\n  summaryTemplate!: TemplateRef<any>;\r\n  @ContentChildren(FreudTemplate) templates!: QueryList<FreudTemplate>;\r\n  @ViewChild('tableRef') tableRef!: Table;\r\n\r\n  ngAfterContentInit() {\r\n    this.templates.forEach((item) => {\r\n      switch (item.getType()) {\r\n        case 'caption':\r\n          this.captionTemplate = item.template;\r\n          break;\r\n\r\n        case 'header':\r\n          this.headerTemplate = item.template;\r\n          break;\r\n\r\n        case 'headergrouped':\r\n          this.headerGroupedTemplate = item.template;\r\n          break;\r\n\r\n        case 'body':\r\n          this.bodyTemplate = item.template;\r\n          break;\r\n        case 'summary':\r\n          this.summaryTemplate = item.template;\r\n          break;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[freudSortableColumn]',\r\n  host: {\r\n    class: 'p-element',\r\n    '[class.p-sortable-column]': 'isEnabled()',\r\n    '[class.p-highlight]': 'sorted',\r\n    '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\r\n    '[attr.role]': '\"columnheader\"',\r\n    '[attr.aria-sort]': 'sortOrder'\r\n  }\r\n})\r\nexport class FreudSortableColumn implements AfterViewInit, OnDestroy {\r\n  @Input('freudSortableColumn') field!: string;\r\n\r\n  @Input() freudSortableColumnDisabled!: boolean;\r\n\r\n  sorted!: boolean;\r\n\r\n  sortOrder!: string;\r\n\r\n  subscription!: Subscription;\r\n\r\n  constructor(public dt: FreudTableComponent) {\r\n    if (this.isEnabled()) {\r\n      setTimeout(() => {\r\n        this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta) => {\r\n          this.updateSortState();\r\n        });\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.isEnabled()) {\r\n      this.updateSortState();\r\n    }\r\n  }\r\n\r\n  updateSortState() {\r\n    this.sorted = this.dt.tableRef?.isSorted(this.field);\r\n    this.sortOrder = this.sorted ? (this.dt.tableRef.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent) {\r\n    if (this.isEnabled() && !this.isFilterElement(<HTMLElement>event.target)) {\r\n      this.updateSortState();\r\n      this.dt.tableRef.sort({\r\n        originalEvent: event,\r\n        field: this.field\r\n      });\r\n\r\n      DomHandler.clearSelection();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.enter', ['$event'])\r\n  onEnterKey(event: MouseEvent) {\r\n    this.onClick(event);\r\n  }\r\n\r\n  isEnabled() {\r\n    return !this.freudSortableColumnDisabled;\r\n  }\r\n\r\n  isFilterElement(element: HTMLElement) {\r\n    return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-sortIcon',\r\n  template: `\r\n        <i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\r\n           [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\r\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\r\n    `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'p-element'\r\n  }\r\n})\r\nexport class FreudSortIcon implements AfterViewInit, OnDestroy {\r\n  @Input() field!: string;\r\n\r\n  subscription!: Subscription;\r\n\r\n  sortOrder: number = 0;\r\n\r\n  constructor(public dt: FreudTableComponent, public cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.cd.detectChanges();\r\n    setTimeout(() => {\r\n      this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta: any) => {\r\n        this.updateSortState();\r\n      });\r\n    }, 3000);\r\n    this.updateSortState();\r\n  }\r\n\r\n  onClick(event: any) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  updateSortState() {\r\n    if (this.dt.tableRef?.sortMode === 'single') {\r\n      this.sortOrder = this.dt.tableRef?.isSorted(this.field) ? this.dt.tableRef.sortOrder : 0;\r\n    } else if (this.dt.tableRef?.sortMode === 'multiple') {\r\n      let sortMeta = this.dt.tableRef.getSortMeta(this.field);\r\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getMultiSortMetaIndex() {\r\n    let multiSortMeta = this.dt.tableRef._multiSortMeta;\r\n    let index = -1;\r\n\r\n    if (multiSortMeta && this.dt.tableRef.sortMode === 'multiple' && (this.dt.tableRef.showInitialSortBadge || multiSortMeta.length > 1)) {\r\n      for (let i = 0; i < multiSortMeta.length; i++) {\r\n        let meta = multiSortMeta[i];\r\n        if (meta.field === this.field || meta.field === this.field) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  getBadgeValue() {\r\n    let index = this.getMultiSortMetaIndex();\r\n\r\n    return this.dt.tableRef.groupRowsBy && index > -1 ? index : index + 1;\r\n  }\r\n\r\n  isMultiSorted() {\r\n    return this.dt.tableRef?.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[freudSortableColumn]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "freudSortableColumn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "freudSortableColumnDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 130
                },
                {
                    "name": "keydown.enter",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "argsDecorator": [
                        "$event"
                    ],
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 143
                }
            ],
            "propertiesClass": [
                {
                    "name": "dt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 108,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sorted",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 102
                },
                {
                    "name": "sortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "isEnabled",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isFilterElement",
                    "args": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "element",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 155,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'click', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onEnterKey",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "decorators": [
                        {
                            "name": "HostListener",
                            "stringifiedArguments": "'keydown.enter', ['$event']"
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSortState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 106,
                "jsdoctags": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudTemplate",
            "id": "directive-FreudTemplate-c6572f008ca65589f5be5985a1e1d3d941b25bae56733595783f2e6ce426884f541d486e8b4e07ac253a003651e0c32ec84e3780ccc567c774d79c3c9a618948",
            "file": "projects/web-components/src/components/directive/template/template.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { NgModule, Directive, Input, TemplateRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: '[freudTemplate]',\r\n  host: {}\r\n})\r\nexport class FreudTemplate {\r\n  @Input() type!: string;\r\n\r\n  @Input('freudTemplate') name!: string;\r\n\r\n  constructor(public template: TemplateRef<any>) {}\r\n\r\n  getType(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FreudTemplate],\r\n  declarations: [FreudTemplate]\r\n})\r\nexport class FreudTemplateModule {}\r\n",
            "selector": "[freudTemplate]",
            "providers": [],
            "inputsClass": [
                {
                    "name": "freudTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "template",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getType",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 11,
                "jsdoctags": [
                    {
                        "name": "template",
                        "type": "TemplateRef<any>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        }
    ],
    "components": [
        {
            "name": "FreudAccordionComponent",
            "id": "component-FreudAccordionComponent-16cf3c1f7491f003bda809228750aff9be6f39e23bd179f2ff93e22755fc08084dcb480694902f60e16982137ecf5b4792673dad4d8a89440d66dc706975e658",
            "file": "projects/web-components/src/components/others/accordion/accordion.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-accordion",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "template": "<p-accordion\n  [activeIndex]=\"activeIndex\"\n  [multiple]=\"multiple\"\n  [tabindex]=\"tabindex\"\n  [expandIcon]=\"expandIcon\"\n  [collapseIcon]=\"collapseIcon\"\n  [style]=\"style\"\n  (onOpen)=\"onOpen.emit($event)\"\n  (onClose)=\"onClose.emit($event)\">\n    <ng-container *ngFor=\"let template of templates\">\n      <p-accordionTab\n        [disabled]=\"template.disabled\"\n        [selected]=\"template.selected\"\n        [tabindex]=\"template.tabindex\"\n        [header]=\"template.header\"\n        [style]=\"template.style\">\n        <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n      </p-accordionTab>\n    </ng-container>\n</p-accordion>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "collapseIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "expandIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onOpen",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FreudAccordionTabComponent>",
                    "optional": false,
                    "description": "",
                    "line": 77,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudAccordionTabComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList, ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-accordion-tab',\r\n  template: `\r\n    <div #ref>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./accordion.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-accordion-tab',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\n\r\nexport class FreudAccordionTabComponent {\r\n  @Input() disabled: boolean = false;\r\n  @Input() tabindex: number = 0;\r\n  @Input() selected: boolean = false;\r\n  @Input() header!: string;\r\n  @Input() style!: string;\r\n  @Input() bgColor: boolean = false;\r\n  @ViewChild('ref') ref!: any;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-accordion',\r\n  template: `\r\n    <p-accordion\r\n      [activeIndex]=\"activeIndex\"\r\n      [multiple]=\"multiple\"\r\n      [tabindex]=\"tabindex\"\r\n      [expandIcon]=\"expandIcon\"\r\n      [collapseIcon]=\"collapseIcon\"\r\n      [style]=\"style\"\r\n      (onOpen)=\"onOpen.emit($event)\"\r\n      (onClose)=\"onClose.emit($event)\">\r\n        <ng-container *ngFor=\"let template of templates\">\r\n          <p-accordionTab\r\n            [disabled]=\"template.disabled\"\r\n            [selected]=\"template.selected\"\r\n            [tabindex]=\"template.tabindex\"\r\n            [header]=\"template.header\"\r\n            [style]=\"template.style\">\r\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\r\n          </p-accordionTab>\r\n        </ng-container>\r\n    </p-accordion>\r\n  `,\r\n  styleUrls: ['./accordion.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-accordion',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\n\r\nexport class FreudAccordionComponent {\r\n  @Input() style!: string;\r\n  @Input() tabindex: number = 0;\r\n  @Input() multiple: boolean = false;\r\n  @Input() collapseIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() expandIcon: string = 'freud-icon freud-icon-chevron-right';\r\n  @Input() activeIndex!: number;\r\n  @Input() bgColor: boolean = false;\r\n  @ContentChildren(FreudAccordionTabComponent) templates!: QueryList<FreudAccordionTabComponent>;\r\n  @Output() onClose: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-accordion, .freud-accordion-tab {\r\n  .p-accordion .p-accordion-header .p-accordion-header-link {\r\n    background-color: $neutral-color-light-01;\r\n    border-color: $neutral-color-light-01;\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-accordion p-accordiontab:first-child .p-accordion-header .p-accordion-header-link {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-accordion p-accordiontab:last-child .p-accordion-header:not(.p-highlight) .p-accordion-header-link {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-accordion .p-accordion-header:not(.p-disabled) .p-accordion-header-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n  .p-accordion-header-text {\r\n    @include typography($font-size-xs, $font-weight-bold, 16px);\r\n  }\r\n\r\n  .p-accordion p-accordiontab .p-accordion-tab {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-accordion p-accordiontab .p-accordion-content,\r\n  .p-accordion .p-accordion-header:not(.p-disabled).p-highlight .p-accordion-header-link {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n}\r\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAccordionTabComponent",
            "id": "component-FreudAccordionTabComponent-16cf3c1f7491f003bda809228750aff9be6f39e23bd179f2ff93e22755fc08084dcb480694902f60e16982137ecf5b4792673dad4d8a89440d66dc706975e658",
            "file": "projects/web-components/src/components/others/accordion/accordion.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-accordion-tab",
            "styleUrls": [
                "./accordion.component.scss"
            ],
            "styles": [],
            "template": "<div #ref>\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ref'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList, ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-accordion-tab',\r\n  template: `\r\n    <div #ref>\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./accordion.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-accordion-tab',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\n\r\nexport class FreudAccordionTabComponent {\r\n  @Input() disabled: boolean = false;\r\n  @Input() tabindex: number = 0;\r\n  @Input() selected: boolean = false;\r\n  @Input() header!: string;\r\n  @Input() style!: string;\r\n  @Input() bgColor: boolean = false;\r\n  @ViewChild('ref') ref!: any;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-accordion',\r\n  template: `\r\n    <p-accordion\r\n      [activeIndex]=\"activeIndex\"\r\n      [multiple]=\"multiple\"\r\n      [tabindex]=\"tabindex\"\r\n      [expandIcon]=\"expandIcon\"\r\n      [collapseIcon]=\"collapseIcon\"\r\n      [style]=\"style\"\r\n      (onOpen)=\"onOpen.emit($event)\"\r\n      (onClose)=\"onClose.emit($event)\">\r\n        <ng-container *ngFor=\"let template of templates\">\r\n          <p-accordionTab\r\n            [disabled]=\"template.disabled\"\r\n            [selected]=\"template.selected\"\r\n            [tabindex]=\"template.tabindex\"\r\n            [header]=\"template.header\"\r\n            [style]=\"template.style\">\r\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\r\n          </p-accordionTab>\r\n        </ng-container>\r\n    </p-accordion>\r\n  `,\r\n  styleUrls: ['./accordion.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-accordion',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\n\r\nexport class FreudAccordionComponent {\r\n  @Input() style!: string;\r\n  @Input() tabindex: number = 0;\r\n  @Input() multiple: boolean = false;\r\n  @Input() collapseIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() expandIcon: string = 'freud-icon freud-icon-chevron-right';\r\n  @Input() activeIndex!: number;\r\n  @Input() bgColor: boolean = false;\r\n  @ContentChildren(FreudAccordionTabComponent) templates!: QueryList<FreudAccordionTabComponent>;\r\n  @Output() onClose: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onOpen: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-accordion, .freud-accordion-tab {\r\n  .p-accordion .p-accordion-header .p-accordion-header-link {\r\n    background-color: $neutral-color-light-01;\r\n    border-color: $neutral-color-light-01;\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-accordion p-accordiontab:first-child .p-accordion-header .p-accordion-header-link {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-accordion p-accordiontab:last-child .p-accordion-header:not(.p-highlight) .p-accordion-header-link {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-accordion .p-accordion-header:not(.p-disabled) .p-accordion-header-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n  .p-accordion-header-text {\r\n    @include typography($font-size-xs, $font-weight-bold, 16px);\r\n  }\r\n\r\n  .p-accordion p-accordiontab .p-accordion-tab {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-accordion p-accordiontab .p-accordion-content,\r\n  .p-accordion .p-accordion-header:not(.p-disabled).p-highlight .p-accordion-header-link {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n}\r\n",
                    "styleUrl": "./accordion.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudActionIconComponent",
            "id": "component-FreudActionIconComponent-369297fddf68e48c5a9d03826cc9f79e52096857c9d9201e616770d7d1e752797ca7dfc26f6ef0b5365fd9ea5a5816f051e9d7eac87bb01405802868a75b3ae4",
            "file": "projects/web-components/src/components/others/action-icon/action-icon.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-action-icon",
            "styleUrls": [
                "./action-icon.component.scss"
            ],
            "styles": [],
            "template": "<button type=\"button\">\n  <span class=\"freud-icon freud-icon-times\"></span>\n</button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-action-icon',\r\n  template: `\r\n    <button type=\"button\">\r\n      <span class=\"freud-icon freud-icon-times\"></span>\r\n    </button>\r\n  `,\r\n  styleUrls: ['./action-icon.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-action-icon',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudActionIconComponent {\r\n  @Input() bgColor: boolean = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-action-icon.freud-bgcolor {\r\n  button {\r\n    color: $neutral-color-white;\r\n  }\r\n  button:enabled:hover {\r\n    background: $brand-color-03;\r\n  }\r\n}\r\n\r\n.freud-action-icon {\r\n  button {\r\n    cursor: pointer;\r\n    width: 28px;\r\n    height: 28px;\r\n    border: 0 none;\r\n    background: transparent;\r\n    border-radius: 50%;\r\n    transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;\r\n    display: grid;\r\n    align-items: center;\r\n    .freud-icon {\r\n      font-size: 14px;\r\n    }\r\n  }\r\n}\r\n\r\n.freud-action-icon:not(.freud-bgcolor) {\r\n  button {\r\n    color: $neutral-color-dark-02;\r\n  }\r\n  button:enabled:hover {\r\n    background: $neutral-color-light-02;\r\n  }\r\n}\r\n",
                    "styleUrl": "./action-icon.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAlertMessageComponent",
            "id": "component-FreudAlertMessageComponent-0113c5e452cbd103531d97a0a4e2fcdaf7fc43ad7c9556a49a892e7c4dd1ebc1eb2f1e6fe42b59a7d43e79ac3fe321f581279f6a332227e0c4e8d1d6f5aa441b",
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-alert-message",
            "styleUrls": [
                "./alert-messages.component.scss"
            ],
            "styles": [],
            "template": "<p-message [severity]=\"severity\" [text]=\"text\"></p-message>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "severity",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "severities",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FreudMessage } from \"../../../api\";\r\n\r\ntype severities = 'success' | 'info' | 'warn' | 'error';\r\n\r\n@Component({\r\n  selector: 'freud-alert-messages',\r\n  template: `\r\n    <p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\r\n  `,\r\n  styleUrls: ['./alert-messages.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-alert-messages'\r\n  }\r\n})\r\nexport class FreudAlertMessagesComponent {\r\n  @Input() messages!: FreudMessage[];\r\n\r\n  @Input() severity: severities = 'success';\r\n  @Input() text!: string;\r\n  @Input() closable: boolean = true;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-alert-message',\r\n  template: `\r\n    <p-message [severity]=\"severity\" [text]=\"text\"></p-message>\r\n  `,\r\n  styleUrls: ['./alert-messages.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-alert-messages'\r\n  }\r\n})\r\nexport class FreudAlertMessageComponent {\r\n\r\n  @Input() severity: severities = 'success';\r\n  @Input() text!: string;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-alert-messages {\r\n  .p-message, .p-inline-message {\r\n    border: unset;\r\n    border-radius: $border-radius-md;\r\n    color: $neutral-color-dark-04;\r\n\r\n    &.p-message-success, &.p-inline-message-success {\r\n      background-color: $feedback-color-positive-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-positive-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-info, &.p-inline-message-info {\r\n      background-color: $feedback-color-neutral-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-neutral-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-warn, &.p-inline-message-warn {\r\n      background-color: $feedback-color-warning-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-alert-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-error, &.p-inline-message-error {\r\n      background-color: $feedback-color-negative-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-negative-pure;\r\n      }\r\n    }\r\n\r\n    .freud-icon {\r\n      font-size: 31px;\r\n      margin-left: -5px;\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n\r\n  .p-inline-message {\r\n    padding: 11px;\r\n  }\r\n\r\n  .p-message .p-message-summary {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-message-detail {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .pi-info-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9ed\";\r\n  }\r\n\r\n  .pi-exclamation-triangle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e903\";\r\n  }\r\n\r\n  .pi-times-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9b9\";\r\n  }\r\n  .pi-check:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e973\";\r\n  }\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./alert-messages.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAlertMessagesComponent",
            "id": "component-FreudAlertMessagesComponent-0113c5e452cbd103531d97a0a4e2fcdaf7fc43ad7c9556a49a892e7c4dd1ebc1eb2f1e6fe42b59a7d43e79ac3fe321f581279f6a332227e0c4e8d1d6f5aa441b",
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-alert-messages",
            "styleUrls": [
                "./alert-messages.component.scss"
            ],
            "styles": [],
            "template": "<p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "messages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "FreudMessage[]",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'success'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "severities",
                    "decorators": []
                },
                {
                    "name": "text",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, ViewEncapsulation } from '@angular/core';\r\nimport { Component, Input } from '@angular/core';\r\nimport { FreudMessage } from \"../../../api\";\r\n\r\ntype severities = 'success' | 'info' | 'warn' | 'error';\r\n\r\n@Component({\r\n  selector: 'freud-alert-messages',\r\n  template: `\r\n    <p-messages [(value)]=\"messages\" [closable]=\"closable\"></p-messages>\r\n  `,\r\n  styleUrls: ['./alert-messages.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-alert-messages'\r\n  }\r\n})\r\nexport class FreudAlertMessagesComponent {\r\n  @Input() messages!: FreudMessage[];\r\n\r\n  @Input() severity: severities = 'success';\r\n  @Input() text!: string;\r\n  @Input() closable: boolean = true;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-alert-message',\r\n  template: `\r\n    <p-message [severity]=\"severity\" [text]=\"text\"></p-message>\r\n  `,\r\n  styleUrls: ['./alert-messages.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-alert-messages'\r\n  }\r\n})\r\nexport class FreudAlertMessageComponent {\r\n\r\n  @Input() severity: severities = 'success';\r\n  @Input() text!: string;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-alert-messages {\r\n  .p-message, .p-inline-message {\r\n    border: unset;\r\n    border-radius: $border-radius-md;\r\n    color: $neutral-color-dark-04;\r\n\r\n    &.p-message-success, &.p-inline-message-success {\r\n      background-color: $feedback-color-positive-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-positive-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-info, &.p-inline-message-info {\r\n      background-color: $feedback-color-neutral-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-neutral-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-warn, &.p-inline-message-warn {\r\n      background-color: $feedback-color-warning-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-alert-pure;\r\n      }\r\n    }\r\n\r\n    &.p-message-error, &.p-inline-message-error {\r\n      background-color: $feedback-color-negative-01;\r\n      .p-message-icon, .p-inline-message-icon {\r\n        color: $feedback-color-negative-pure;\r\n      }\r\n    }\r\n\r\n    .freud-icon {\r\n      font-size: 31px;\r\n      margin-left: -5px;\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n\r\n  .p-inline-message {\r\n    padding: 11px;\r\n  }\r\n\r\n  .p-message .p-message-summary {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-message-detail {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .pi-info-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9ed\";\r\n  }\r\n\r\n  .pi-exclamation-triangle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e903\";\r\n  }\r\n\r\n  .pi-times-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9b9\";\r\n  }\r\n  .pi-check:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e973\";\r\n  }\r\n\r\n\r\n}\r\n",
                    "styleUrl": "./alert-messages.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudAutoCompleteComponent",
            "id": "component-FreudAutoCompleteComponent-b7da4c47b40caabf54eb94ae45ad36c3ff29f64d657b9bfb81087580c4ee5bc5e4e28e4dc1f37e540a3ee1c5c0b03dba51f4bb6a438bbd15df7fd50c729474d7",
            "file": "projects/web-components/src/components/forms/auto-complete/auto-complete.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudAutoCompleteComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-auto-complete",
            "styleUrls": [
                "./auto-complete.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-autoComplete\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [dropdown]=\"dropdown\"\n    [dropdownMode]=\"dropdownMode\"\n    [field]=\"field\"\n    [multiple]=\"multiple\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [suggestions]=\"suggestions\"\n    [forceSelection]=\"forceSelection\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (completeMethod)=\"completeMethod.emit($event)\"\n    (onDropdownClick)=\"onDropdownClick.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n    (onHide)=\"onHide.emit($event)\"\n    (onClear)=\"onClear.emit($event)\"\n\n  ></p-autoComplete>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dropdownMode",
                    "defaultValue": "'blank'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "\"blank\" | \"current\"",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "forceSelection",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "suggestions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "completeMethod",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onDropdownClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 101,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 118
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 120
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 111,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 115,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-auto-complete',\r\n  styleUrls: ['./auto-complete.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-autoComplete\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [dropdownIcon]=\"dropdownIcon\"\r\n        [dropdown]=\"dropdown\"\r\n        [dropdownMode]=\"dropdownMode\"\r\n        [field]=\"field\"\r\n        [multiple]=\"multiple\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [itemSize]=\"itemSize\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [suggestions]=\"suggestions\"\r\n        [forceSelection]=\"forceSelection\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (completeMethod)=\"completeMethod.emit($event)\"\r\n        (onDropdownClick)=\"onDropdownClick.emit($event)\"\r\n        (onShow)=\"onShow.emit($event)\"\r\n        (onHide)=\"onHide.emit($event)\"\r\n        (onClear)=\"onClear.emit($event)\"\r\n\r\n      ></p-autoComplete>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-auto-complete',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudAutoCompleteComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudAutoCompleteComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() suggestions!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() multiple: boolean = false;\r\n  @Input() dropdown: boolean = false;\r\n  @Input() forceSelection: boolean = false;\r\n  @Input() virtualScroll: boolean = false;\r\n  @Input() itemSize!: number;\r\n  @Input() field!: string;\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() dropdownMode: 'blank' | 'current' = 'blank';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() completeMethod: EventEmitter<any> = new EventEmitter();\r\n  @Output() onDropdownClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClear: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.valueChange.emit(this._value);\r\n    this.onModelTouched();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-auto-complete:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-auto-complete.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-auto-complete {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-button {\r\n    background: $neutral-color-white;\r\n    border: 1px solid $neutral-color-light-03;;\r\n    border-radius: $border-radius-md;\r\n    border-left: unset;\r\n  }\r\n\r\n  .p-button:hover {\r\n    background: $neutral-color-white;\r\n  }\r\n\r\n  .p-button:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n  }\r\n\r\n  .p-autocomplete-dd .p-inputtext {\r\n    border-right: unset;\r\n  }\r\n\r\n  .p-button-icon {\r\n    font-size: 14px;\r\n    color: $neutral-color-dark-02;\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-autocomplete {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-autocomplete:not(.p-disabled).p-focus,\r\n  .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-autocomplete:not(.p-disabled):hover,\r\n  .p-autocomplete .p-autocomplete-multiple-container:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n    .p-inputtext, .p-button {\r\n      border-color: $brand-color-pure;\r\n    }\r\n  }\r\n  .p-autocomplete .p-autocomplete-panel {\r\n    border-radius: $border-radius-md;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item {\r\n    padding: 12px 1rem;\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $brand-color-pure;\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  .p-autocomplete-panel .p-autocomplete-items .p-autocomplete-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  // Chip\r\n  .p-autocomplete .p-autocomplete-multiple-container .p-autocomplete-token {\r\n    padding: 0.25rem 0.5rem;\r\n    margin-right: 0.5rem;\r\n    @include typography($font-size-xxs, $font-weight-regular, 21px);\r\n    background: $brand-color-01;\r\n    color: $brand-color-pure;\r\n    border-radius: $border-radius-md;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./auto-complete.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 130,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 126
                    }
                }
            }
        },
        {
            "name": "FreudAutoCompleteExampleComponent",
            "id": "component-FreudAutoCompleteExampleComponent-104efbe9c60a0f252ac4e810058a0960ee0954650416902ddff2f6deb9b487f3afb5ed4a66da6ee4b2a9c180f3576cf02fcc98fafb7f2703857424a1f1c969d7",
            "file": "stories/forms/auto-complete/auto-complete-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-auto-complete-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-auto-complete\n  [(ngModel)]=\"selectedItem\"\n  [suggestions]=\"items\"\n  [label]=\"'Label'\"\n  [disabled]=\"disabled\"\n  [invalid]=\"invalid\"\n  [bgColor]=\"bgColor\"\n  [multiple]=\"multiple\"\n  [dropdown]=\"dropdown\"\n  [placeholder]=\"'Placeholder'\"\n  (completeMethod)=\"filterItems($event)\">\n</freud-auto-complete>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdown",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "allItems",
                    "defaultValue": "[\r\n    'Adamantina',\r\n    'Abc',\r\n    'New York',\r\n    'Rome',\r\n    'London',\r\n    'Islanbul',\r\n    'São Paulo',\r\n    'Rio de Janeiro'\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "items",
                    "defaultValue": "[\r\n    'Adamantina',\r\n    'Abc',\r\n    'New York',\r\n    'Rome',\r\n    'London',\r\n    'Islanbul',\r\n    'São Paulo',\r\n    'Rio de Janeiro'\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "filterItems",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-auto-complete-example',\r\n  template: `\r\n    <freud-auto-complete\r\n      [(ngModel)]=\"selectedItem\"\r\n      [suggestions]=\"items\"\r\n      [label]=\"'Label'\"\r\n      [disabled]=\"disabled\"\r\n      [invalid]=\"invalid\"\r\n      [bgColor]=\"bgColor\"\r\n      [multiple]=\"multiple\"\r\n      [dropdown]=\"dropdown\"\r\n      [placeholder]=\"'Placeholder'\"\r\n      (completeMethod)=\"filterItems($event)\">\r\n    </freud-auto-complete>\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudAutoCompleteExampleComponent {\r\n\r\n  allItems = [\r\n    'Adamantina',\r\n    'Abc',\r\n    'New York',\r\n    'Rome',\r\n    'London',\r\n    'Islanbul',\r\n    'São Paulo',\r\n    'Rio de Janeiro'\r\n  ];\r\n  items = [\r\n    'Adamantina',\r\n    'Abc',\r\n    'New York',\r\n    'Rome',\r\n    'London',\r\n    'Islanbul',\r\n    'São Paulo',\r\n    'Rio de Janeiro'\r\n  ]\r\n  selectedItem: string = '';\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() dropdown = false;\r\n  @Input() multiple = false;\r\n\r\n  @Input() invalid: boolean = false;\r\n  constructor() {}\r\n\r\n  filterItems(event: any) {\r\n    //in a real application, make a request to a remote url with the query and return filtered results, for demo we filter at client side\r\n    let filtered : any[] = [];\r\n    let query = event.query;\r\n    for(let i = 0; i < this.allItems.length; i++) {\r\n      let item = this.allItems[i];\r\n      if (item.toLowerCase().indexOf(query.toLowerCase()) == 0) {\r\n        filtered.push(item);\r\n      }\r\n    }\r\n\r\n    this.items = filtered;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 49
            }
        },
        {
            "name": "FreudAvatarComponent",
            "id": "component-FreudAvatarComponent-9a8fbf5420c9e55ba9e9f86a3539b288ca631115494a88e6c5bc0f9193d024e50c8220a53b89c03b01063a9e18790d8297fae68844906ef74aa5d1768e5084c8",
            "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-avatar",
            "styleUrls": [
                "./avatar.component.scss"
            ],
            "styles": [],
            "template": "<p-avatar\n  [label]=\"(image || withIcon) ? '' : label\"\n  [icon]=\"(withIcon || !label) ? 'freud-icon freud-icon-user' : ''\"\n  shape=\"circle\"\n  [image]=\"image\">\n  <freud-badge *ngIf=\"badge\" [value]=\"badge\" color=\"error\"></freud-badge>\n</p-avatar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "badge",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "image",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "avatarSizes",
                    "decorators": []
                },
                {
                    "name": "withIcon",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\ntype avatarSizes = 'sm' | 'md' | 'lg';\r\n@Component({\r\n  selector: 'freud-avatar',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-avatar\r\n      [label]=\"(image || withIcon) ? '' : label\"\r\n      [icon]=\"(withIcon || !label) ? 'freud-icon freud-icon-user' : ''\"\r\n      shape=\"circle\"\r\n      [image]=\"image\">\r\n      <freud-badge *ngIf=\"badge\" [value]=\"badge\" color=\"error\"></freud-badge>\r\n    </p-avatar>\r\n  `,\r\n  styleUrls: ['./avatar.component.scss'],\r\n  host: {\r\n    class: 'freud-avatar',\r\n    '[class.freud-avatar-bgcolor]': `bgColor`,\r\n\r\n    '[class.freud-avatar-size-small]': `size === 'sm'`,\r\n    '[class.freud-avatar-size-medium]': `size === 'md'`,\r\n    '[class.freud-avatar-size-large]': `size === 'lg'`,\r\n  }\r\n})\r\nexport class FreudAvatarComponent {\r\n\r\n  @Input() size: avatarSizes = 'md';\r\n  @Input() label: string = '';\r\n  @Input() withIcon: boolean = false;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() badge: string = '';\r\n  @Input() image: string = '';\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-avatar .p-avatar {\r\n    font-family: $font-family-base;\r\n}\r\n.freud-avatar {\r\n    position: relative;\r\n    display: block;\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-small, .freud-avatar-size-small .p-avatar {\r\n    width: 28px;\r\n    height: 28px;\r\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-medium, .freud-avatar-size-medium .p-avatar {\r\n    width: 42px;\r\n    height: 42px;\r\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-large, .freud-avatar-size-large .p-avatar {\r\n    width: 56px;\r\n    height: 56px;\r\n    @include typography($font-size-md, $font-weight-semibold, 30px);\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-medium {\r\n  .freud-icon {\r\n    font-size: 24px;\r\n  }\r\n}\r\n\r\n.freud-avatar.freud-avatar-size-large {\r\n  .freud-icon {\r\n    font-size: 30px;\r\n  }\r\n}\r\n\r\n\r\n.freud-avatar:not(.freud-avatar-bgcolor) .p-avatar {\r\n    background-color: $neutral-color-light-02;\r\n    color: $neutral-color-dark-03;\r\n}\r\n\r\n.freud-avatar.freud-avatar-bgcolor .p-avatar {\r\n    background-color: $brand-color-03;\r\n    color: $neutral-color-white;\r\n}\r\nfreud-badge {\r\n    position: absolute;\r\n    top: -12px;\r\n    right: -4px;\r\n}\r\n",
                    "styleUrl": "./avatar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBadgeComponent",
            "id": "component-FreudBadgeComponent-976c5d5ac24cdf644e51fbb1867ef79b6030b47a78ea0a534382ec01862a0e51e442590949d05e3f1e9ba6c6c9cfe6a81237f076c7cf9972e39a0224b6d1fed3",
            "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-badge",
            "styleUrls": [
                "./badge.component.scss"
            ],
            "styles": [],
            "template": "<p-badge [value]=\"value!\" class=\"freud-color-{{color}}\"></p-badge>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "colors",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "sizes",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n\r\ntype sizes = 'default' | 'large';\r\ntype colors = 'primary' | 'success' | 'info' | 'warning' | 'error' | 'actived';\r\n\r\n@Component({\r\n  selector: 'freud-badge',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-badge [value]=\"value!\" class=\"freud-color-{{color}}\"></p-badge>\r\n  `,\r\n  styleUrls: ['./badge.component.scss'],\r\n  host: {\r\n    class: 'freud-badge',\r\n    '[class.size-large]':  'size === \"large\"'\r\n  }\r\n})\r\nexport class FreudBadgeComponent {\r\n\r\n  @Input() value: string = '';\r\n  @Input() size: sizes = 'default';\r\n  @Input() color: colors = 'primary';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-badge span.p-badge {\r\n    background-color: $brand-color-pure;\r\n    font-weight: $font-weight-bold;\r\n    font-family: $font-family-base;\r\n    display: inline-block;\r\n}\r\n\r\n.freud-badge {\r\n  .freud-color-success span {\r\n    background-color: $feedback-color-positive-04;\r\n  }\r\n  .freud-color-info span {\r\n    background-color: $feedback-color-neutral-pure;\r\n  }\r\n  .freud-color-warning span {\r\n    background-color: $feedback-color-warning-pure;\r\n    color: $neutral-color-black;\r\n  }\r\n  .freud-color-error span {\r\n    background-color: $feedback-color-negative-04;\r\n  }\r\n  .freud-color-actived span {\r\n    background-color: $complementary-color-like-03;\r\n  }\r\n}\r\n\r\n.freud-badge:not(.size-large) span.p-badge {\r\n  border-radius: $border-radius-md;\r\n  min-width: 16px;\r\n  height: 16px;\r\n  line-height: $font-size-xs;\r\n  @include typography($font-size-xxxs, $font-weight-semibold, auto);\r\n}\r\n.freud-badge.size-large span.p-badge {\r\n  border-radius: 12px;\r\n  @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  display: inline-block;\r\n}\r\n",
                    "styleUrl": "./badge.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBlockExampleComponent",
            "id": "component-FreudBlockExampleComponent-4d5cfe3b7bc52e845e491b9087b4f12f7c9eb0499da0fb2367c6e65ac1bba96b83be6d74d3dd63ac7968944533cbfdf06c28e0f501c76e5913939d7179ee967e",
            "file": "stories/others/block-ui/block-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-block-ui-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-button (click)=\"onClick()\">Clique aqui!</freud-button>\n\n<ng-container *ngIf=\"!withTarget\">\n  <freud-block-ui [blocked]=\"blocked\">\n  </freud-block-ui>\n</ng-container>\n\n<ng-container *ngIf=\"withTarget\">\n  <br>\n  <freud-card [header]=\"'Card Title'\" #cardElement>\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\n    ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\n    laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\n    voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\n    non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n  </freud-card>\n  <freud-block-ui [blocked]=\"blocked\" [target]=\"cardElement\">\n  </freud-block-ui>\n</ng-container>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "withTarget",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "blocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-block-ui-example',\r\n  template: `\r\n    <freud-button (click)=\"onClick()\">Clique aqui!</freud-button>\r\n\r\n    <ng-container *ngIf=\"!withTarget\">\r\n      <freud-block-ui [blocked]=\"blocked\">\r\n      </freud-block-ui>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"withTarget\">\r\n      <br>\r\n      <freud-card [header]=\"'Card Title'\" #cardElement>\r\n        Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt\r\n        ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n        laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in\r\n        voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat\r\n        non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n      </freud-card>\r\n      <freud-block-ui [blocked]=\"blocked\" [target]=\"cardElement\">\r\n      </freud-block-ui>\r\n    </ng-container>\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudBlockExampleComponent {\r\n\r\n  public blocked: boolean = false;\r\n  @Input() withTarget: boolean = false;\r\n  onClick() {\r\n    this.blocked = true;\r\n    setTimeout(() => this.blocked = false, 5000);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBlockUIComponent",
            "id": "component-FreudBlockUIComponent-574286fde11b4381bdba16c426cb7eefe11c5a4b307a7034cec22aa8715688fb843e39620bb6791c1ee8b34e2901c201f7741acba73fecce0b6b7d4d6704ccaa",
            "file": "projects/web-components/src/components/others/block-ui/block-ui.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-block-ui",
            "styleUrls": [
                "./block-ui.component.scss"
            ],
            "styles": [],
            "template": "<p-blockUI\n  [blocked]=\"blocked\"\n  [target]=\"target\">\n  <i class=\"freud-icon freud-icon-lock\" style=\"font-size: 24px\"></i>\n</p-blockUI>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "blocked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-block-ui',\r\n  template: `\r\n    <p-blockUI\r\n      [blocked]=\"blocked\"\r\n      [target]=\"target\">\r\n      <i class=\"freud-icon freud-icon-lock\" style=\"font-size: 24px\"></i>\r\n    </p-blockUI>\r\n  `,\r\n  styleUrls: ['./block-ui.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-block-ui',\r\n  }\r\n})\r\nexport class FreudBlockUIComponent {\r\n\r\n  @Input() blocked: boolean = false;\r\n  @Input() target!: any;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n//.p-component-overlay.p-blockui {\r\n//  background-color: $neutral-color-dark-03;\r\n//}\r\n//\r\n//.p-component-overlay-enter {\r\n//  //animation: unset;\r\n//}\r\n",
                    "styleUrl": "./block-ui.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudBreadcrumbComponent",
            "id": "component-FreudBreadcrumbComponent-cd1ea854a531f77c23050bd1cd7f7d831ababaa66c99baec821bd7816f02a52e526c8e76840bf94f24970eefdfc6da523d6b8206537e41bf9e0648048f91c3e9",
            "file": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-breadcrumb",
            "styleUrls": [
                "./breadcrumb.component.scss"
            ],
            "styles": [],
            "template": "<p-breadcrumb\n  [model]=\"items\"\n  [home]=\"home\"\n  styleClass=\"freud-typography h6RegularAuto\"\n  (onItemClick)=\"onItemClick.emit($event)\"></p-breadcrumb>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "home",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FreudMenuItem",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\n@Component({\r\n  selector: 'freud-breadcrumb',\r\n  template: `\r\n    <p-breadcrumb\r\n      [model]=\"items\"\r\n      [home]=\"home\"\r\n      styleClass=\"freud-typography h6RegularAuto\"\r\n      (onItemClick)=\"onItemClick.emit($event)\"></p-breadcrumb>\r\n  `,\r\n  styleUrls: ['./breadcrumb.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-breadcrumb',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudBreadcrumbComponent {\r\n  @Input() items!: FreudMenuItem[];\r\n  @Input() home!: FreudMenuItem;\r\n  @Input() bgColor: boolean = false;\r\n  @Output() onItemClick: EventEmitter<any> = new EventEmitter();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-breadcrumb:not(.freud-bgcolor) {\r\n  .p-breadcrumb ul li.p-breadcrumb-chevron {\r\n    font-size: $font-size-xxxs;\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon, .p-breadcrumb ul li .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n}\r\n.freud-breadcrumb.freud-bgcolor {\r\n  .p-breadcrumb ul li.p-breadcrumb-chevron {\r\n    font-size: $font-size-xxxs;\r\n    color: $neutral-color-white;\r\n  }\r\n\r\n  .p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon, .p-breadcrumb ul li .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.p-breadcrumb {\r\n  background: transparent;\r\n  border: none;\r\n}\r\n\r\n.p-breadcrumb ul li .p-menuitem-link .p-menuitem-icon {\r\n  font-size: $font-size-sm;\r\n  line-height: $font-size-md;\r\n}\r\n\r\n.p-breadcrumb ul li .p-menuitem-link:focus {\r\n  box-shadow: unset;\r\n}\r\n",
                    "styleUrl": "./breadcrumb.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudButtonComponent",
            "id": "component-FreudButtonComponent-daff2068542b943d56c3de8b12dcd3ff8f705588971daa35245b1d34361bd6903eddc56cee2759a15913485fee6555bd19330cf4a31983cc1c7c9ddaee17adab",
            "file": "projects/web-components/src/components/buttons/button/button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "template": "<p-button [disabled]=\"disabled\" [loading]=\"loading\" [icon]=\"icon\" [type]=\"type\">\n  <div class=\"button-content\"><ng-content></ng-content></div>\n</p-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "buttonColors",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'md'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "buttonSizes",
                    "decorators": []
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\ntype buttonSizes = 'sm' | 'md' | 'lg';\r\ntype buttonColors = 'primary' | 'secondary' | 'ghost';\r\n\r\n@Component({\r\n  selector: 'freud-button',\r\n  styleUrls: ['./button.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-button [disabled]=\"disabled\" [loading]=\"loading\" [icon]=\"icon\" [type]=\"type\">\r\n      <div class=\"button-content\"><ng-content></ng-content></div>\r\n    </p-button>\r\n  `,\r\n  host: {\r\n    class: 'freud-btn',\r\n    '[class.freud-btn-color-primary]': `!['secondary', 'ghost'].includes(color)`,\r\n    '[class.freud-btn-color-secondary]': `color === 'secondary'`,\r\n    '[class.freud-btn-color-ghost]': `color === 'ghost'`,\r\n\r\n    '[class.freud-btn-bgcolor]': `bgColor`,\r\n    '[class.freud-btn-loading]': `loading`,\r\n\r\n    '[class.freud-btn-size-small]': `size === 'sm'`,\r\n    '[class.freud-btn-size-medium]': `size === 'md'`,\r\n    '[class.freud-btn-size-large]': `size === 'lg'`,\r\n  }\r\n})\r\nexport class FreudButtonComponent {\r\n\r\n  @Input() size: buttonSizes = 'md';\r\n  @Input() color: buttonColors = 'primary';\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() type!: string;\r\n  @Input() loading = false;\r\n  @Input() icon!: string;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-btn:not(.freud-btn-bgcolor) {\r\n  &.freud-btn-color-primary {\r\n    .p-button {\r\n      background-color:  $brand-color-pure;\r\n      border-color: $brand-color-pure;\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-secondary {\r\n    $freud-btn-color: $brand-color-pure;\r\n    $freud-btn-border: $brand-color-pure;\r\n    .p-button {\r\n      background-color: transparent;\r\n      border-color: $freud-btn-border;\r\n      color: $freud-btn-color;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-ghost {\r\n    $freud-btn-background: transparent;\r\n    $freud-btn-color: $brand-color-pure;\r\n    $freud-btn-border: transparent;\r\n    .p-button {\r\n      background-color: $freud-btn-background;\r\n      border-color: $freud-btn-border;\r\n      color: $freud-btn-color;\r\n    }\r\n  }\r\n\r\n  .p-button:enabled:hover {\r\n    background: $brand-color-01;\r\n    border-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n.freud-btn.freud-btn-bgcolor {\r\n  &.freud-btn-color-primary {\r\n    .p-button {\r\n      background-color: $neutral-color-white;\r\n      border-color: $neutral-color-white;\r\n      color: $brand-color-pure;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-secondary {\r\n    .p-button {\r\n      background-color: transparent;\r\n      border-color: $neutral-color-white;\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  &.freud-btn-color-ghost {\r\n    .p-button {\r\n      background-color: transparent;\r\n      border-color: transparent;\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  .p-button[disabled] {\r\n    opacity: $opacity-level-5;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-button:enabled:hover {\r\n    background: $brand-color-03;\r\n    border-color: $brand-color-03;\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n\r\n.freud-btn .p-button {\r\n  font-family: $font-family-base;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: $border-radius-md;\r\n  @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  &[disabled] {\r\n    opacity: $opacity-level-5;\r\n  }\r\n  &:focus {\r\n    box-shadow: unset;\r\n  }\r\n  &.p-button-icon-only {\r\n    width: auto;\r\n  }\r\n}\r\n\r\n\r\n.freud-btn-size-small {\r\n  .p-button {\r\n    font-size: $font-size-xxs;\r\n    padding: 0 $spacing-size-nano;\r\n    height: 32px;\r\n    &.p-button-icon-only {\r\n      padding: 0 3px;\r\n    }\r\n  }\r\n}\r\n\r\n.freud-btn-size-medium {\r\n  .p-button {\r\n    padding: 0 $spacing-size-xxxs;\r\n    height: 40px;\r\n    &.p-button-icon-only {\r\n      padding: 0 7px;\r\n    }\r\n  }\r\n}\r\n\r\n.freud-btn-size-large {\r\n  .p-button {\r\n    padding: 0 $spacing-size-xxs;\r\n    height: 48px;\r\n    &.p-button-icon-only {\r\n      padding: 0 11px;\r\n    }\r\n  }\r\n}\r\n\r\n.button-content:not(:empty) + .p-button-icon {\r\n  margin-left: $spacing-size-xxxs;\r\n}\r\n",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudCalendarComponent",
            "id": "component-FreudCalendarComponent-8850e7979f8325ed63bc9e53a4c4cdb27131c4afec39192efe9668bcb27525a7765e45d4fb2be03d41e10ba45e0d279bd10c3838eedfe2bef5e57b44517a1af4",
            "file": "projects/web-components/src/components/others/calendar/calendar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-calendar",
            "styleUrls": [
                "./calendar.component.scss"
            ],
            "styles": [],
            "template": "<p-calendar\n  [(ngModel)]=\"value\"\n  [inline]=\"inline\"\n  [view]=\"view\"\n  [selectionMode]=\"selectionMode\"\n  [dateFormat]=\"dateFormat\"\n  [showOtherMonths]=\"showOtherMonths\"\n  [selectOtherMonths]=\"selectOtherMonths\"\n  [showWeek]=\"showWeek\"\n  [yearNavigator]=\"yearNavigator\"\n  [yearRange]=\"yearRange\"\n  [defaultDate]=\"defaultDate\"\n  [showTime]=\"showTime\"\n  [hourFormat]=\"hourFormat\"\n  [disabled]=\"disabled\"\n  [timeOnly]=\"timeOnly\"\n  [required]=\"required\"\n  [maxDate]=\"maxDate\"\n  [monthNavigator]=\"monthNavigator\"\n  [disabledDates]=\"disabledDates\"\n  [minDate]=\"minDate\"\n  (ngModelChange)=\"modelValueChange()\"\n  (onSelect)=\"onSelect.emit($event)\"\n  (onBlur)=\"onBlur.emit($event)\"\n  (onFocus)=\"onFocus.emit($event)\"\n  (onClose)=\"onClose.emit($event)\"\n  (onShow)=\"onShow.emit($event)\"\n  (onTodayClick)=\"onTodayClick.emit($event)\"\n  (onClearClick)=\"onClearClick.emit($event)\"\n>\n</p-calendar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "dateFormat",
                    "defaultValue": "'dd/mm/yy'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabledDates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "Date[]",
                    "decorators": []
                },
                {
                    "name": "disabledDays",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "hourFormat",
                    "defaultValue": "'24'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "\"12\" | \"24\"",
                    "decorators": []
                },
                {
                    "name": "inline",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maxDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "minDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "Date",
                    "decorators": []
                },
                {
                    "name": "monthNavigator",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "selectionMode",
                    "defaultValue": "'single'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"single\" | \"multiple\" | \"range\"",
                    "decorators": []
                },
                {
                    "name": "selectOtherMonths",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showOtherMonths",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showTime",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showWeek",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "timeOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "view",
                    "defaultValue": "'date'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"date\" | \"month\"",
                    "decorators": []
                },
                {
                    "name": "yearNavigator",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "yearRange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClearClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onTodayClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 85,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 91
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 114,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 118,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-calendar',\r\n  template: `\r\n    <p-calendar\r\n      [(ngModel)]=\"value\"\r\n      [inline]=\"inline\"\r\n      [view]=\"view\"\r\n      [selectionMode]=\"selectionMode\"\r\n      [dateFormat]=\"dateFormat\"\r\n      [showOtherMonths]=\"showOtherMonths\"\r\n      [selectOtherMonths]=\"selectOtherMonths\"\r\n      [showWeek]=\"showWeek\"\r\n      [yearNavigator]=\"yearNavigator\"\r\n      [yearRange]=\"yearRange\"\r\n      [defaultDate]=\"defaultDate\"\r\n      [showTime]=\"showTime\"\r\n      [hourFormat]=\"hourFormat\"\r\n      [disabled]=\"disabled\"\r\n      [timeOnly]=\"timeOnly\"\r\n      [required]=\"required\"\r\n      [maxDate]=\"maxDate\"\r\n      [monthNavigator]=\"monthNavigator\"\r\n      [disabledDates]=\"disabledDates\"\r\n      [minDate]=\"minDate\"\r\n      (ngModelChange)=\"modelValueChange()\"\r\n      (onSelect)=\"onSelect.emit($event)\"\r\n      (onBlur)=\"onBlur.emit($event)\"\r\n      (onFocus)=\"onFocus.emit($event)\"\r\n      (onClose)=\"onClose.emit($event)\"\r\n      (onShow)=\"onShow.emit($event)\"\r\n      (onTodayClick)=\"onTodayClick.emit($event)\"\r\n      (onClearClick)=\"onClearClick.emit($event)\"\r\n    >\r\n    </p-calendar>\r\n  `,\r\n  styleUrls: ['./calendar.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-calendar',\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudCalendarComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudCalendarComponent implements ControlValueAccessor {\r\n  @Input() dateFormat: string = 'dd/mm/yy';\r\n  @Input() showTime: boolean = true\r\n  @Input() hourFormat: '12' | '24' = '24';\r\n  @Input() selectionMode: \"single\" | \"multiple\" | \"range\" = 'single';\r\n  @Input() view: 'date' | 'month' = 'date';\r\n  @Input() inline: boolean = true;\r\n  @Input() yearRange!: string;\r\n  @Input() disabledDates!: Date[];\r\n  @Input() disabledDays!: number[];\r\n\r\n  @Input() yearNavigator: boolean = false;\r\n  @Input() monthNavigator: boolean = false;\r\n  @Input() timeOnly: boolean = false;\r\n  @Input() showOtherMonths: boolean = true;\r\n  @Input() selectOtherMonths: boolean = true;\r\n  @Input() showWeek: boolean = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n\r\n  @Input() minDate!: Date;\r\n  @Input() maxDate!: Date;\r\n  @Input() defaultDate!: Date;\r\n\r\n  @Output() onSelect: EventEmitter<any> = new EventEmitter();\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\r\n  @Output() onTodayClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClearClick: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: any;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.modelValueChange();\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-calendar {\r\n  .p-datepicker {\r\n    border: unset;\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n\r\n  .p-datepicker .p-datepicker-header .p-datepicker-prev,\r\n  .p-datepicker .p-datepicker-header .p-datepicker-next {\r\n    width: 28px;\r\n    height: 28px;\r\n    border: 0 none;\r\n    background: transparent;\r\n    border-radius: 50%;\r\n    transition: background-color 0.2s, color 0.2s, box-shadow 0.2s;\r\n    display: grid;\r\n    align-items: center;\r\n  }\r\n\r\n  .p-datepicker .p-datepicker-header .p-datepicker-prev:focus,\r\n  .p-datepicker .p-datepicker-header .p-datepicker-next:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  button.p-datepicker-next {\r\n    color: $neutral-color-dark-02;\r\n  }\r\n  button.p-datepicker-next:enabled:hover {\r\n    background: $neutral-color-light-02;\r\n  }\r\n\r\n  .p-datepicker .p-datepicker-header {\r\n    color: $neutral-color-dark-02;\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-datepicker:not(.p-disabled) table td span:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $neutral-color-white;\r\n    background-color: $brand-color-03;\r\n  }\r\n\r\n  table {\r\n    td > span:focus {\r\n      box-shadow: unset;\r\n    }\r\n\r\n    thead {\r\n      color: $neutral-color-dark-04;\r\n      @include typography($font-size-xs, $font-weight-semibold, 24px);\r\n    }\r\n    tbody {\r\n      td:not(.p-datepicker-other-month) {\r\n        color: $neutral-color-dark-02;\r\n        @include typography($font-size-xs, $font-weight-regular, 24px);\r\n      }\r\n      td.p-datepicker-other-month {\r\n        color: $neutral-color-dark-01;\r\n        @include typography($font-size-xs, $font-weight-regular, 24px);\r\n      }\r\n    }\r\n    td.p-datepicker-today > span {\r\n      color: $neutral-color-white;\r\n      background-color: $brand-color-02;\r\n    }\r\n    td.p-datepicker-today > span.p-highlight,\r\n    td > span.p-highlight {\r\n      color: $neutral-color-white;\r\n      background-color: $brand-color-pure;\r\n    }\r\n  }\r\n  .p-datepicker .p-timepicker span {\r\n    @include typography($font-size-xs, $font-weight-regular, 19.2px);\r\n    color: $neutral-color-dark-02;\r\n  }\r\n\r\n  .p-datepicker:not(.p-disabled) .p-monthpicker .p-monthpicker-month:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $neutral-color-white;\r\n    background-color: $brand-color-03;\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-datepicker:not(.p-disabled) .p-monthpicker .p-monthpicker-month:not(.p-highlight):not(.p-disabled):focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-datepicker .p-monthpicker .p-monthpicker-month {\r\n    color: $neutral-color-dark-02;\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-datepicker .p-monthpicker .p-monthpicker-month.p-highlight {\r\n    border-radius: $border-radius-md;\r\n    background-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n",
                    "styleUrl": "./calendar.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 99,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                }
            }
        },
        {
            "name": "FreudCaptchaComponent",
            "id": "component-FreudCaptchaComponent-ec1d7fbcd15294a6ae016171ca71dbe0210066850ce92d58d925c110db239f6e3515e1fdf32fd7c73454d55cba4f5e18154b26d869f493ca57fac396f5ffcdfe",
            "file": "projects/web-components/src/components/others/captcha/captcha.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-captcha",
            "styleUrls": [
                "./captcha.component.scss"
            ],
            "styles": [],
            "template": "<p-captcha\n  [siteKey]=\"siteKey\"\n  [theme]=\"theme\"\n  [type]=\"type\"\n  [size]=\"size\"\n  [initCallback]=\"initCallback\"\n  (onExpire)=\"onExpire.emit($event)\"\n  (onResponse)=\"onResponse.emit($event)\"></p-captcha>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoLoadScript",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "initCallback",
                    "defaultValue": "'initRecaptcha'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "siteKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'normal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "theme",
                    "defaultValue": "'light'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "\"light\" | \"dark\"",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'image'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onExpire",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "EventEmitter"
                },
                {
                    "name": "onResponse",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "loadScript",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, OnInit, Output, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-captcha',\r\n  template: `\r\n    <p-captcha\r\n      [siteKey]=\"siteKey\"\r\n      [theme]=\"theme\"\r\n      [type]=\"type\"\r\n      [size]=\"size\"\r\n      [initCallback]=\"initCallback\"\r\n      (onExpire)=\"onExpire.emit($event)\"\r\n      (onResponse)=\"onResponse.emit($event)\"></p-captcha>\r\n  `,\r\n  styleUrls: ['./captcha.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-captcha',\r\n  }\r\n})\r\nexport class FreudCaptchaComponent implements OnInit {\r\n\r\n  @Input() siteKey!: string;\r\n  @Input() type: string = 'image';\r\n  @Input() size: string = 'normal';\r\n  @Input() autoLoadScript: boolean = false;\r\n  @Input() theme: 'light' | 'dark' = 'light';\r\n  @Input() initCallback: string = 'initRecaptcha';\r\n  @Output() onResponse = new EventEmitter();\r\n  @Output() onExpire = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    if (this.autoLoadScript) {\r\n      this.loadScript();\r\n    }\r\n  }\r\n\r\n  public loadScript() {\r\n    let node = document.createElement('script');\r\n    node.src = 'https://www.google.com/recaptcha/api.js?render=explicit&onload=initRecaptcha';\r\n    node.type = 'text/javascript';\r\n    node.async = true;\r\n    node.charset = 'utf-8';\r\n    document.getElementsByTagName('head')[0].appendChild(node);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-card {\r\n  .p-card {\r\n    color: $neutral-color-dark-03;\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n  .p-card .p-card-title {\r\n    @include typography($font-size-md, $font-weight-bold, 24px);\r\n  }\r\n\r\n  .p-card .p-card-content {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-card .p-card-subtitle {\r\n    color: $neutral-color-dark-02;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-card .p-card-footer {\r\n    padding: 0;\r\n  }\r\n\r\n  .p-card-header {\r\n    img {\r\n      border-top-left-radius: $border-radius-md;\r\n      border-top-right-radius: $border-radius-md;\r\n    }\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./captcha.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "FreudCardComponent",
            "id": "component-FreudCardComponent-5b4f6a725ba4908a97f5b398b15d2009fe9e664b47ea465de48b78061784341750ceda32bb821b329bfe65594026518fa7e8532bc7e4369cc3ce5934fb1512e1",
            "file": "projects/web-components/src/components/others/card/card.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-card",
            "styleUrls": [
                "./card.component.scss"
            ],
            "styles": [],
            "template": "<p-card\n  #cardElement\n  [header]=\"header\"\n  [subheader]=\"subheader\"\n  [style]=\"style\">\n  <ng-template pTemplate=\"header\">\n    <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n  </ng-template>\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"footer\">\n    <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n  </ng-template>\n</p-card>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "subheader",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cardElement",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Card",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cardElement'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getBlockableElement",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { Card } from \"primeng/card\";\r\n\r\n@Component({\r\n  selector: 'freud-card',\r\n  template: `\r\n    <p-card\r\n      #cardElement\r\n      [header]=\"header\"\r\n      [subheader]=\"subheader\"\r\n      [style]=\"style\">\r\n      <ng-template pTemplate=\"header\">\r\n        <ng-content select=\"[freudTemplateHeader]\"></ng-content>\r\n      </ng-template>\r\n      <ng-content></ng-content>\r\n      <ng-template pTemplate=\"footer\">\r\n        <ng-content select=\"[freudTemplatefooter]\"></ng-content>\r\n      </ng-template>\r\n    </p-card>\r\n  `,\r\n  styleUrls: ['./card.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-card',\r\n  }\r\n})\r\nexport class FreudCardComponent {\r\n\r\n  @Input() header!: string;\r\n  @Input() subheader!: string;\r\n  @Input() style!: string;\r\n  @ViewChild('cardElement') cardElement!: Card;\r\n\r\n  getBlockableElement() {\r\n    return this.cardElement.getBlockableElement();\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-card {\r\n  .p-card {\r\n    color: $neutral-color-dark-03;\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n  .p-card .p-card-title {\r\n    @include typography($font-size-md, $font-weight-bold, 24px);\r\n  }\r\n\r\n  .p-card .p-card-content {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-card .p-card-subtitle {\r\n    color: $neutral-color-dark-02;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-card .p-card-footer {\r\n    padding: 0;\r\n  }\r\n\r\n  .p-card-header {\r\n    img {\r\n      border-top-left-radius: $border-radius-md;\r\n      border-top-right-radius: $border-radius-md;\r\n    }\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./card.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudCascadeSelectComponent",
            "id": "component-FreudCascadeSelectComponent-77f19761a11e6e020d4c16786abab7dc1fbd87151858f0f79794165f733de9aa1c024e0fe569a15bde5f751dbf7fc262af49aaf7c2b74674a7333741b3dd278e",
            "file": "projects/web-components/src/components/forms/cascade-select/cascade-select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCascadeSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-cascade-select",
            "styleUrls": [
                "./cascade-select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-cascadeSelect\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [dataKey]=\"dataKey\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    (onGroupChange)=\"onGroupChange.emit($event)\"\n    (onBeforeShow)=\"onBeforeShow.emit($event)\"\n    (onBeforeHide)=\"onBeforeHide.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n\n  ></p-cascadeSelect>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "dataKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBeforeHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onBeforeShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onGroupChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-cascade-select',\r\n  styleUrls: ['./cascade-select.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-cascadeSelect\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [dataKey]=\"dataKey\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [options]=\"options\"\r\n        (onGroupChange)=\"onGroupChange.emit($event)\"\r\n        (onBeforeShow)=\"onBeforeShow.emit($event)\"\r\n        (onBeforeHide)=\"onBeforeHide.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\"\r\n        (onShow)=\"onShow.emit($event)\"\r\n\r\n      ></p-cascadeSelect>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-cascade-select',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudCascadeSelectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudCascadeSelectComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() options!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() dataKey!: string;\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren!: string[];\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onGroupChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBeforeHide: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBeforeShow: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.valueChange.emit(v);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-cascade-select:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-cascade-select.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-cascade-select {\r\n\r\n  .p-cascadeselect-panel {\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n  .pi {\r\n    font-size: 14px;\r\n  }\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-cascadeselect {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-cascadeselect:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-cascadeselect:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-cascadeselect .p-cascadeselect-panel {\r\n    border-radius: $border-radius-md;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item {\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item:not(.p-highlight):not(.p-disabled):hover {\r\n    color: $brand-color-pure;\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item:focus,\r\n  .p-cascadeselect-panel .p-cascadeselect-items .p-cascadeselect-item .p-cascadeselect-item-content:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./cascade-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 112
                    }
                }
            }
        },
        {
            "name": "FreudCheckboxComponent",
            "id": "component-FreudCheckboxComponent-c453b731a9d02d18d4d2de69a894183de04f8f10a666d2615fdd58b892fbb8fe76e7dbf2f939804e94b3a5ac4ffedaca07146191b806cf5c3807a6860f61bf9b",
            "file": "projects/web-components/src/components/forms/checkbox/checkbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudCheckboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-checkbox",
            "styleUrls": [
                "./checkbox.component.scss"
            ],
            "styles": [],
            "template": "<p-checkbox\n  [id]=\"id\"\n  [class.ng-invalid]=\"invalid\"\n  [class.ng-dirty]=\"invalid\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  [trueValue]=\"trueValue\"\n  [falseValue]=\"falseValue\"\n  [name]=\"name\"\n  [binary]=\"binary\"\n  [label]=\"label\"\n  [checkboxIcon]=\"checkboxIcon\"\n  [inputId]=\"inputId\"\n  (onChange)=\"onChange.emit($event)\">\n</p-checkbox>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "binary",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "checkboxIcon",
                    "defaultValue": "'freud-icon freud-icon-check'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 69
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 71
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-checkbox',\r\n  styleUrls: ['./checkbox.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-checkbox\r\n      [id]=\"id\"\r\n      [class.ng-invalid]=\"invalid\"\r\n      [class.ng-dirty]=\"invalid\"\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [required]=\"required\"\r\n      [trueValue]=\"trueValue\"\r\n      [falseValue]=\"falseValue\"\r\n      [name]=\"name\"\r\n      [binary]=\"binary\"\r\n      [label]=\"label\"\r\n      [checkboxIcon]=\"checkboxIcon\"\r\n      [inputId]=\"inputId\"\r\n      (onChange)=\"onChange.emit($event)\">\r\n    </p-checkbox>\r\n  `,\r\n  host: {\r\n    class: 'freud-checkbox',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudCheckboxComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudCheckboxComponent implements ControlValueAccessor {\r\n  @Input() invalid: boolean = false;\r\n  @Input() binary: boolean = true;\r\n  @Input() disabled = false;\r\n  @Input() label!: string;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() name!: string;\r\n  @Input() falseValue: any = false;\r\n  @Input() trueValue: any = true;\r\n\r\n  @Input() checkboxIcon: string = 'freud-icon freud-icon-check';\r\n  @Input() inputId!: string;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: any;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.modelValueChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-checkbox:not(.freud-bgcolor) {\r\n  .p-checkbox-label {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-checkbox.freud-bgcolor {\r\n  .p-checkbox-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-checkbox {\r\n  .p-checkbox .p-checkbox-box.p-highlight,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-focus {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-focus {\r\n    box-shadow: $shadow-focused-zen !important;\r\n  }\r\n  .p-checkbox-label {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    font-family: $font-family-base;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./checkbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 77,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 73
                    }
                }
            }
        },
        {
            "name": "FreudChipComponent",
            "id": "component-FreudChipComponent-3ac5f71e9a05987a1d9ec1ca0b5f720b97b0ca5994207e0fa5a19dfd996b26bab0dff4a36dfff03280ef7f39f29e872ed263d2864bbcc50f3dc81d5aa1f3197c",
            "file": "projects/web-components/src/components/others/chip/chip.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-chip",
            "styleUrls": [
                "./chip.component.scss"
            ],
            "styles": [],
            "template": "<p-chip\n  [label]=\"label\"\n  [removable]=\"removable\"\n  [removeIcon]=\"removeIcon\"\n  [styleClass]=\"styleClass\"\n  (onRemove)=\"onRemove.emit($event)\">\n</p-chip>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "removable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "removeIcon",
                    "defaultValue": "'freud-icon freud-icon-times-circle'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-chip',\r\n  template: `\r\n    <p-chip\r\n      [label]=\"label\"\r\n      [removable]=\"removable\"\r\n      [removeIcon]=\"removeIcon\"\r\n      [styleClass]=\"styleClass\"\r\n      (onRemove)=\"onRemove.emit($event)\">\r\n    </p-chip>\r\n  `,\r\n  styleUrls: ['./chip.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-chip',\r\n  }\r\n})\r\nexport class FreudChipComponent {\r\n  @Input() removable: boolean = false;\r\n  @Input() styleClass!: string;\r\n  @Input() label!: string;\r\n  @Input() removeIcon: string = 'freud-icon freud-icon-times-circle';\r\n  @Output() onRemove = new EventEmitter();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-chip {\r\n  .p-chip {\r\n    border-radius: $border-radius-md;\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-chip .pi-chip-remove-icon:focus {\r\n    box-shadow: unset;\r\n  }\r\n  .p-chip .pi-chip-remove-icon {\r\n    font-size: 16px;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./chip.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmationDialogExampleComponent",
            "id": "component-FreudConfirmationDialogExampleComponent-eb0fe2e77d9a5294dbd50733dd88bcbdf2a28dc9ad8cfba33502221f1f929a2939defa726afaa21302c39186b67b5160df8c0f3677cced6b3f24f838e6f52541",
            "file": "stories/modal-and-popover/modal-and-popover-examples/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-dialog-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-confirm-dialog></freud-confirm-dialog>\n<freud-button (click)=\"confirm()\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FreudConfirmationService } from \"../../../projects/web-components/src/services/confirmation.service\";\r\n\r\n@Component({\r\n  selector: 'freud-confirm-dialog-example',\r\n  template: `\r\n    <freud-confirm-dialog></freud-confirm-dialog>\r\n    <freud-button (click)=\"confirm()\">Clique aqui!</freud-button>\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudConfirmationDialogExampleComponent {\r\n\r\n  constructor(private confirmationService: FreudConfirmationService) {}\r\n\r\n  confirm() {\r\n    this.confirmationService.confirm({\r\n      header: 'Confirme',\r\n      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\r\n      acceptLabel: 'Aceitar',\r\n      rejectLabel: 'Rejeitar',\r\n\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudConfirmDialogComponent",
            "id": "component-FreudConfirmDialogComponent-5340323b371943e0724257b20eddece30658384531127cec32e0c45d3d7548fb280fbd2c98bde2154f4680618b93349fdb375bd4b5ade50c305605657e65abdb",
            "file": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-dialog",
            "styleUrls": [
                "./confirm-dialog.component.scss"
            ],
            "styles": [],
            "template": "<p-confirmDialog #cd\n  icon=\"freud-icon freud-icon-exclamation-triangle\">\n  <ng-template pTemplate=\"footer\">\n    <freud-button [color]=\"'secondary'\" (click)=\"cd.reject()\">{{cd.rejectButtonLabel}}</freud-button>\n    <freud-button (click)=\"cd.accept()\">{{cd.acceptButtonLabel}}</freud-button>\n  </ng-template>\n</p-confirmDialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-confirm-dialog',\r\n  template: `\r\n    <p-confirmDialog #cd\r\n      icon=\"freud-icon freud-icon-exclamation-triangle\">\r\n      <ng-template pTemplate=\"footer\">\r\n        <freud-button [color]=\"'secondary'\" (click)=\"cd.reject()\">{{cd.rejectButtonLabel}}</freud-button>\r\n        <freud-button (click)=\"cd.accept()\">{{cd.acceptButtonLabel}}</freud-button>\r\n      </ng-template>\r\n    </p-confirmDialog>\r\n  `,\r\n  styleUrls: ['./confirm-dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-confirm-dialog'\r\n  }\r\n})\r\nexport class FreudConfirmDialogComponent { }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-confirm-dialog {\r\n  .p-dialog.p-confirm-dialog {\r\n    max-width: 700px;\r\n    border-radius: 8px;\r\n  }\r\n  .p-dialog-footer {\r\n    display: flex;\r\n    place-content: flex-end;\r\n  }\r\n\r\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-icon {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .p-dialog.p-confirm-dialog .p-confirm-dialog-message {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dialog .p-dialog-header .p-dialog-title, .p-dialog .p-dialog-header {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\r\n    border-top-right-radius: 8px;\r\n    border-top-left-radius: 8px;\r\n  }\r\n  .p-dialog .p-dialog-footer {\r\n    border-bottom-right-radius: 8px;\r\n    border-bottom-left-radius: 8px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./confirm-dialog.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmPopupComponent",
            "id": "component-FreudConfirmPopupComponent-45715ce0f08e332921c5317fe74567fdc49965a6c91402f72f8c8be8581c485669138565f5b3f8e680ee64cbc73eb044bec158574ec2b144a1a3c32b8efd717e",
            "file": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-popup",
            "styleUrls": [
                "./confirm-popup.component.scss"
            ],
            "styles": [],
            "template": "<p-confirmPopup\n  styleClass=\"freud-confirm-popup\">\n</p-confirmPopup>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-confirm-popup',\r\n  template: `\r\n    <p-confirmPopup\r\n      styleClass=\"freud-confirm-popup\">\r\n    </p-confirmPopup>\r\n  `,\r\n  styleUrls: ['./confirm-popup.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-confirm-popup'\r\n  }\r\n})\r\nexport class FreudConfirmPopupComponent { }\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-confirm-popup {\r\n  &.p-confirm-popup {\r\n    max-width: 700px;\r\n    border-radius: 8px;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n  .p-dialog-footer {\r\n    display: flex;\r\n    place-content: flex-end;\r\n  }\r\n\r\n  &.p-confirm-popup .p-confirm-popup-icon {\r\n    font-size: 24px;\r\n  }\r\n\r\n  .p-confirm-popup-message {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-confirm-popup-header .p-confirm-popup-title {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\r\n    border-top-right-radius: 8px;\r\n    border-top-left-radius: 8px;\r\n  }\r\n  .p-confirm-popup-footer {\r\n    border-bottom-right-radius: 8px;\r\n    border-bottom-left-radius: 8px;\r\n    padding-bottom: $spacing-size-xxxs;\r\n\r\n    .p-confirm-popup-reject {\r\n      background-color: transparent;\r\n      border-color: $brand-color-pure;\r\n      color: $brand-color-pure;\r\n    }\r\n\r\n    .p-confirm-popup-accept {\r\n      background-color:  $brand-color-pure;\r\n      border-color: $brand-color-pure;\r\n      color: $neutral-color-white;\r\n    }\r\n\r\n    .p-button:enabled:hover {\r\n      background: $brand-color-01;\r\n      border-color: $brand-color-01;\r\n      color: $brand-color-pure;\r\n    }\r\n\r\n    .p-button {\r\n      font-family: $font-family-base;\r\n      border-radius: $border-radius-md;\r\n      @include typography($font-size-xs, $font-weight-semibold, auto);\r\n      &[disabled] {\r\n        opacity: $opacity-level-5;\r\n      }\r\n      &:focus {\r\n        box-shadow: unset;\r\n      }\r\n      &.p-button-icon-only {\r\n        width: auto;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./confirm-popup.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudConfirmPopupExampleComponent",
            "id": "component-FreudConfirmPopupExampleComponent-7d1d393e2bbeeab87d348afa8a2099ec676a2cbdff3a97af22a0f2bc5ac9d70cd97498418942551f86b16ccb102562f14a9a39edc4379c019821589816f99dd5",
            "file": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-confirm-popup-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-confirm-popup></freud-confirm-popup>\n<freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FreudConfirmationService } from \"../../../../projects/web-components/src/services/confirmation.service\";\r\n\r\n@Component({\r\n  selector: 'freud-confirm-popup-example',\r\n  template: `\r\n    <freud-confirm-popup></freud-confirm-popup>\r\n    <freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudConfirmPopupExampleComponent {\r\n\r\n  constructor(private confirmationService: FreudConfirmationService) {}\r\n\r\n  confirm(event: any) {\r\n    this.confirmationService.confirm({\r\n      target: event.target,\r\n      icon: 'freud-icon freud-icon-exclamation-triangle',\r\n      message: 'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.',\r\n      acceptLabel: 'Aceitar',\r\n      rejectLabel: 'Rejeitar',\r\n\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "confirmationService",
                        "type": "FreudConfirmationService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudDialogComponent",
            "id": "component-FreudDialogComponent-b0a138d0eaad91d283753c1fa30ac2f3bdb45c1d2d17827b3e3e619e0bd61c2d2cd80a4491b097c95449afe647e8cb8444f49a633d024ad3a4173c42fe110d4e",
            "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudDialogComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-dialog",
            "styleUrls": [
                "./dialog.component.scss"
            ],
            "styles": [],
            "template": "<p-dialog\n  [(visible)]=\"visible\"\n  [modal]=\"modal\"\n  [draggable]=\"draggable\"\n  [closable]=\"closable\"\n  [showHeader]=\"showHeader\"\n  [position]=\"position\"\n  [resizable]=\"resizable\"\n  [closeIcon]=\"closeIcon\"\n  [minimizeIcon]=\"minimizeIcon\"\n  [maximizeIcon]=\"maximizeIcon\"\n  [maximizable]=\"maximizable\"\n  [header]=\"header\">\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"footer\">\n    <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n  </ng-template>\n</p-dialog>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "closable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closeIcon",
                    "defaultValue": "'freud-icon freud-icon-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maximizable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "maximizeIcon",
                    "defaultValue": "'freud-icon freud-icon-window-maximize'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "minimizeIcon",
                    "defaultValue": "'freud-icon freud-icon-window-minimize'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "modal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'center'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "positions",
                    "decorators": []
                },
                {
                    "name": "resizable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "visibleChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 62
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\ntype positions = \"center\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\";\r\n@Component({\r\n  selector: 'freud-dialog',\r\n  template: `\r\n    <p-dialog\r\n      [(visible)]=\"visible\"\r\n      [modal]=\"modal\"\r\n      [draggable]=\"draggable\"\r\n      [closable]=\"closable\"\r\n      [showHeader]=\"showHeader\"\r\n      [position]=\"position\"\r\n      [resizable]=\"resizable\"\r\n      [closeIcon]=\"closeIcon\"\r\n      [minimizeIcon]=\"minimizeIcon\"\r\n      [maximizeIcon]=\"maximizeIcon\"\r\n      [maximizable]=\"maximizable\"\r\n      [header]=\"header\">\r\n      <ng-content></ng-content>\r\n      <ng-template pTemplate=\"footer\">\r\n        <ng-content select=\"[freudTemplatefooter]\"></ng-content>\r\n      </ng-template>\r\n    </p-dialog>\r\n  `,\r\n  styleUrls: ['./dialog.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-dialog'\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudDialogComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudDialogComponent implements ControlValueAccessor {\r\n\r\n  @Input() header!: string;\r\n  @Input() modal: boolean = false;\r\n  @Input() draggable: boolean = true;\r\n  @Input() resizable: boolean = false;\r\n  @Input() showHeader: boolean = true;\r\n  @Input() maximizable: boolean = false;\r\n  @Input() closable: boolean = true;\r\n  @Input() position:\tpositions\t= 'center';\r\n  @Input() closeIcon: string = 'freud-icon freud-icon-times';\r\n  @Input() minimizeIcon: string = 'freud-icon freud-icon-window-minimize';\r\n  @Input() maximizeIcon: string = 'freud-icon freud-icon-window-maximize';\r\n  @Output() visibleChange: EventEmitter<any> = new EventEmitter();\r\n  private _visible!: boolean;\r\n\r\n  modelValueChange() {\r\n    this.visibleChange.emit(this.visible);\r\n  }\r\n\r\n  onChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  @Input() get visible(){\r\n    return this._visible;\r\n  }\r\n\r\n  public set visible(v){\r\n    this._visible = v;\r\n    this.onChange(this._visible);\r\n    this.modelValueChange();\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._visible = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n$maxDialogWidth: 700px;\r\n.freud-dialog {\r\n  .p-dialog {\r\n    &:not(.p-dialog-maximized) {\r\n      max-width: $maxDialogWidth;\r\n    }\r\n    border-radius: 8px;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n  .p-dialog-footer {\r\n    display: flex;\r\n    place-content: flex-end;\r\n  }\r\n\r\n  .p-dialog .p-dialog-content {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dialog .p-dialog-header .p-dialog-header-icon:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-dialog .p-dialog-header .p-dialog-title, .p-dialog .p-dialog-header {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, 19.2px);\r\n    border-top-right-radius: 8px;\r\n    border-top-left-radius: 8px;\r\n  }\r\n  .p-dialog .p-dialog-footer {\r\n    border-bottom-right-radius: 8px;\r\n    border-bottom-left-radius: 8px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./dialog.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "visible": {
                    "name": "visible",
                    "setSignature": {
                        "name": "visible",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 68,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "visible",
                        "type": "",
                        "returnType": "",
                        "line": 64
                    }
                }
            }
        },
        {
            "name": "FreudDialogExampleComponent",
            "id": "component-FreudDialogExampleComponent-ce3216a77689bdc6563dab8a88e9dbb75c348eb4dff797c70eaf3086c3b40f067b62c9a3ea57cb1a92bf73c6667ccba24d3a2a4090376a2df799be4fae06fe88",
            "file": "stories/modal-and-popover/dialog/dialog-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-dialog-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./example.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "view",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"basic\" | \"modal\" | \"maximizable\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "displayBasic",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "displayBasic2",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "displayMaximizable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "displayModal",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "methodsClass": [
                {
                    "name": "showBasicDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showBasicDialog2",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showMaximizableDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showModalDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-dialog-example',\r\n  templateUrl: './example.component.html',\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudDialogExampleComponent {\r\n\r\n  @Input() view: 'basic' | 'modal' | 'maximizable' = 'basic';\r\n  displayModal: boolean = false;\r\n\r\n  displayBasic: boolean = false;\r\n\r\n  displayBasic2: boolean = false;\r\n\r\n  displayMaximizable: boolean = false;\r\n\r\n  showModalDialog() {\r\n    this.displayModal = true;\r\n  }\r\n\r\n  showBasicDialog() {\r\n    this.displayBasic = true;\r\n  }\r\n\r\n  showBasicDialog2() {\r\n    this.displayBasic2 = true;\r\n  }\r\n\r\n  showMaximizableDialog() {\r\n    this.displayMaximizable = true;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<ng-container *ngIf=\"view === 'basic'\">\r\n  <freud-button (click)=\"showBasicDialog()\" label=\"Show\">Clique para abrir modal!</freud-button>\r\n  <freud-dialog header=\"Header\" [(visible)]=\"displayBasic\" [style]=\"{width: '50vw'}\">\r\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n      cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n    <ng-container freudTemplatefooter>\r\n      <freud-button color=\"secondary\" (click)=\"displayBasic=false\" styleClass=\"freud-button-text\">Cancelar</freud-button>\r\n      <freud-button (click)=\"displayBasic=false\" styleClass=\"freud-button-text\">Ok</freud-button>\r\n    </ng-container>\r\n  </freud-dialog>\r\n\r\n  <br>\r\n\r\n  <freud-button (click)=\"showBasicDialog2()\" label=\"Long Content\">Clique para abrir dialog 2!</freud-button>\r\n  <freud-dialog header=\"Long Content\" [(visible)]=\"displayBasic2\" [style]=\"{width: '50vw'}\">\r\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi\r\n      ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in\r\n      culpa qui officia deserunt mollit anim id est laborum.</p>\r\n\r\n    <p>\"Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi architecto beatae vitae\r\n      dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione voluptatem sequi nesciunt. Neque porro quisquam est,\r\n      qui dolorem ipsum quia dolor sit amet, consectetur, adipisci velit, sed quia non numquam eius modi tempora incidunt ut labore et dolore magnam aliquam quaerat voluptatem. Ut enim ad minima veniam,\r\n      quis nostrum exercitationem ullam corporis suscipit laboriosam, nisi ut aliquid ex ea commodi consequatur? Quis autem vel eum iure reprehenderit qui in ea voluptate velit esse quam nihil molestiae consequatur,\r\n      vel illum qui dolorem eum fugiat quo voluptas nulla pariatur?</p>\r\n\r\n    <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident,\r\n      similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio\r\n      cumque nihil impedit quo minus id quod maxime aut reiciendis voluptatibus maiores alias consequatur aut perferendis doloribus asperiores repellat.</p>\r\n    <ng-container freudTemplatefooter>\r\n      <freud-button (click)=\"displayBasic2=false\" styleClass=\"freud-button-text\">Ok</freud-button>\r\n    </ng-container>\r\n  </freud-dialog>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"view === 'modal'\">\r\n  <freud-button (click)=\"showModalDialog()\" label=\"Show\">Clique para abrir modal!</freud-button>\r\n  <freud-dialog header=\"Header\" [(visible)]=\"displayModal\" [modal]=\"true\" [style]=\"{width: '50vw'}\"\r\n                [draggable]=\"false\" [resizable]=\"false\">\r\n    <p class=\"p-m-0\">Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco\r\n      laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n    <ng-container freudTemplatefooter>\r\n      <freud-button (click)=\"displayModal=false\" styleClass=\"freud-button-text\">Ok</freud-button>\r\n    </ng-container>\r\n  </freud-dialog>\r\n</ng-container>\r\n\r\n<ng-container *ngIf=\"view === 'maximizable'\">\r\n  <freud-button (click)=\"showMaximizableDialog()\" label=\"Show\">Clique para abrir modal!</freud-button>\r\n  <freud-dialog header=\"Godfather I\" [(visible)]=\"displayMaximizable\" [modal]=\"true\" [style]=\"{width: '50vw'}\" [maximizable]=\"true\"\r\n                [draggable]=\"false\" [resizable]=\"false\">\r\n    <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat\r\n      cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n    <ng-container freudTemplatefooter>\r\n      <freud-button (click)=\"displayMaximizable=false\" styleClass=\"freud-button-text\"> Ok</freud-button>\r\n    </ng-container>\r\n  </freud-dialog>\r\n</ng-container>\r\n\r\n"
        },
        {
            "name": "FreudDividerComponent",
            "id": "component-FreudDividerComponent-ffc57be48b39c8cf2557cb8c0a900c2578591e9648b029fc058806579181e0af1a5b285a1ba7ed1e19d8ebacc60cd9dc35e00e352df247cc1ae8e2b99985fdd5",
            "file": "projects/web-components/src/components/others/divider/divider.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-divider",
            "styleUrls": [
                "./divider.component.scss"
            ],
            "styles": [],
            "template": "<p-divider\n  [type]=\"type\"\n  [layout]=\"layout\"\n  [align]=\"align\"\n  [style]=\"style\">\n  <ng-content></ng-content>\n</p-divider>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "align",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "\"left\" | \"center\" | \"right\" | \"top\" | \"bottom\"",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'solid'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"dashed\" | \"dotted\" | \"solid\"",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-divider',\r\n  template: `\r\n    <p-divider\r\n      [type]=\"type\"\r\n      [layout]=\"layout\"\r\n      [align]=\"align\"\r\n      [style]=\"style\">\r\n      <ng-content></ng-content>\r\n    </p-divider>\r\n  `,\r\n  styleUrls: ['./divider.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-divider',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudDividerComponent {\r\n\r\n  @Input() type: \"dashed\" | \"dotted\" | 'solid' = 'solid';\r\n  @Input() bgColor: boolean = false;\r\n  @Input() style!: string;\r\n  @Input() layout: 'horizontal' | 'vertical' = 'horizontal';\r\n  @Input() align!: \"left\" | \"center\" | \"right\" | \"top\" | \"bottom\";\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-divider {\r\n  .p-divider.p-divider-horizontal .p-divider-content,\r\n  .p-divider.p-divider-vertical .p-divider-content {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n}\r\n\r\n.freud-divider:not(.freud-bgcolor) {\r\n  .p-divider.p-divider-vertical .p-divider-content,\r\n  .p-divider.p-divider-horizontal .p-divider-content {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n  .p-divider.p-divider-horizontal:before {\r\n    border-top-color: $neutral-color-light-03;\r\n  }\r\n}\r\n\r\n.freud-divider.freud-bgcolor {\r\n  .p-divider.p-divider-vertical .p-divider-content,\r\n  .p-divider.p-divider-horizontal .p-divider-content {\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-divider.p-divider-horizontal:before {\r\n    border-top-color: $neutral-color-light-02;\r\n  }\r\n\r\n  .p-divider.p-divider-vertical .p-divider-content,\r\n  .p-divider.p-divider-horizontal .p-divider-content {\r\n    background-color: $brand-color-06;\r\n  }\r\n}\r\n",
                    "styleUrl": "./divider.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudDynamicDialogExampleComponent",
            "id": "component-FreudDynamicDialogExampleComponent-1e775f5f57f96dbdfa4fae57d62a6ec6ec0294bbe9db3b2ab2502584805449cf1d9f2a5758f1ba61f463fc4adb9e214fd717a9671fade8060c44ff182150c15c",
            "file": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-dynamic-dialog-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FreudDialogService } from \"@freud-ds/web-components\";\r\n\r\n\r\n@Component({\r\n  selector: 'freud-dynamic-dialog-component-example',\r\n  template: `\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n    <br>\r\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n    <br>\r\n    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudDynamicExampleComponent {\r\n\r\n  constructor() {}\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-dynamic-dialog-example',\r\n  template: `\r\n    <freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudDynamicDialogExampleComponent {\r\n\r\n  constructor(private dialogService: FreudDialogService) {}\r\n\r\n  confirm(event: any) {\r\n    this.dialogService.open(FreudDynamicExampleComponent, {\r\n      header: 'Dynamic Dialog Header',\r\n      width: '70%'\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogService",
                        "type": "FreudDialogService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 29,
                "jsdoctags": [
                    {
                        "name": "dialogService",
                        "type": "FreudDialogService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudDynamicExampleComponent",
            "id": "component-FreudDynamicExampleComponent-1e775f5f57f96dbdfa4fae57d62a6ec6ec0294bbe9db3b2ab2502584805449cf1d9f2a5758f1ba61f463fc4adb9e214fd717a9671fade8060c44ff182150c15c",
            "file": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-dynamic-dialog-component-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\n<br>\nUt enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\n<br>\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FreudDialogService } from \"@freud-ds/web-components\";\r\n\r\n\r\n@Component({\r\n  selector: 'freud-dynamic-dialog-component-example',\r\n  template: `\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n    <br>\r\n    Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n    <br>\r\n    Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudDynamicExampleComponent {\r\n\r\n  constructor() {}\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-dynamic-dialog-example',\r\n  template: `\r\n    <freud-button (click)=\"confirm($event)\">Clique aqui!</freud-button>\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudDynamicDialogExampleComponent {\r\n\r\n  constructor(private dialogService: FreudDialogService) {}\r\n\r\n  confirm(event: any) {\r\n    this.dialogService.open(FreudDynamicExampleComponent, {\r\n      header: 'Dynamic Dialog Header',\r\n      width: '70%'\r\n    })\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            }
        },
        {
            "name": "FreudFileUploadComponent",
            "id": "component-FreudFileUploadComponent-48b79e31b4e409673c5bf530754f33ce4b337af1038052d0cc52238ae4569341dc26bc7849ecdecc7662dacb9d22355250b57477b6461ed4bc6122dbd5254392",
            "file": "projects/web-components/src/components/media/fille-upload/file-upload.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-file-upload",
            "styleUrls": [
                "./file-upload.component.scss"
            ],
            "styles": [],
            "template": "<p-fileUpload [name]=\"name\"\n              [url]=\"url\"\n              [auto]=\"auto\"\n              [accept]=\"accept\"\n              [multiple]=\"multiple\"\n              [method]=\"method\"\n              [fileLimit]=\"fileLimit\"\n              [chooseLabel]=\"chooseLabel\"\n              [uploadLabel]=\"uploadLabel\"\n              [cancelLabel]=\"cancelLabel\"\n              [chooseIcon]=\"chooseIcon\"\n              [uploadIcon]=\"uploadIcon\"\n              [cancelIcon]=\"cancelIcon\"\n              [withCredentials]=\"withCredentials\"\n              [mode]=\"mode\"\n              [customUpload]=\"customUpload\"\n              [showUploadButton]=\"showUploadButton\"\n              [showCancelButton]=\"showCancelButton\"\n              [headers]=\"headers\"\n              [invalidFileSizeMessageSummary]=\"invalidFileSizeMessageSummary\"\n              [invalidFileSizeMessageDetail]=\"invalidFileSizeMessageDetail\"\n              [invalidFileTypeMessageSummary]=\"invalidFileTypeMessageSummary\"\n              [invalidFileLimitMessageDetail]=\"invalidFileLimitMessageDetail\"\n              [invalidFileLimitMessageSummary]=\"invalidFileLimitMessageSummary\"\n              [invalidFileTypeMessageDetail]=\"invalidFileTypeMessageDetail\"\n              (onBeforeUpload)=\"onBeforeUpload.emit($event)\"\n              (onSend)=\"onSend.emit($event)\"\n              (onError)=\"onError.emit($event)\"\n              (onRemove)=\"onRemove.emit($event)\"\n              (onSelect)=\"onSelect.emit($event)\"\n              (onProgress)=\"onProgress.emit($event)\"\n              (uploadHandler)=\"uploadHandler.emit($event)\"\n              (onUpload)=\"onUpload.emit($event)\">\n</p-fileUpload>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "auto",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cancelIcon",
                    "defaultValue": "'freud-icon freud-icon-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "cancelLabel",
                    "defaultValue": "'Cancelar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseLabel",
                    "defaultValue": "'Escolha'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "customUpload",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fileLimit",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "HttpHeaders",
                    "decorators": []
                },
                {
                    "name": "invalidFileLimitMessageDetail",
                    "defaultValue": "'limite é de {0} no máximo.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileLimitMessageSummary",
                    "defaultValue": "'Número máximo de arquivos excedido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileSizeMessageDetail",
                    "defaultValue": "'o tamanho máximo de upload é {0}.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileSizeMessageSummary",
                    "defaultValue": "'{0}: Tamanho do arquivo inválido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileTypeMessageDetail",
                    "defaultValue": "'tipos de arquivo permitidos: {0}.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalidFileTypeMessageSummary",
                    "defaultValue": "'{0}: tipo de arquivo inválido, '",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "method",
                    "defaultValue": "'post'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "\"post\" | \"put\"",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'advanced'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "\"advanced\" | \"basic\"",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'file[]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCancelButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showUploadButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "uploadIcon",
                    "defaultValue": "'freud-icon freud-icon-upload'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "uploadLabel",
                    "defaultValue": "'Enviar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "withCredentials",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBeforeUpload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter"
                },
                {
                    "name": "onError",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "EventEmitter"
                },
                {
                    "name": "onProgress",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRemove",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSend",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onUpload",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "uploadHandler",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation, EventEmitter, Output } from '@angular/core';\r\nimport { HttpHeaders } from \"@angular/common/http\";\r\n\r\n\r\n@Component({\r\n  selector: 'freud-file-upload',\r\n  template: `\r\n    <p-fileUpload [name]=\"name\"\r\n                  [url]=\"url\"\r\n                  [auto]=\"auto\"\r\n                  [accept]=\"accept\"\r\n                  [multiple]=\"multiple\"\r\n                  [method]=\"method\"\r\n                  [fileLimit]=\"fileLimit\"\r\n                  [chooseLabel]=\"chooseLabel\"\r\n                  [uploadLabel]=\"uploadLabel\"\r\n                  [cancelLabel]=\"cancelLabel\"\r\n                  [chooseIcon]=\"chooseIcon\"\r\n                  [uploadIcon]=\"uploadIcon\"\r\n                  [cancelIcon]=\"cancelIcon\"\r\n                  [withCredentials]=\"withCredentials\"\r\n                  [mode]=\"mode\"\r\n                  [customUpload]=\"customUpload\"\r\n                  [showUploadButton]=\"showUploadButton\"\r\n                  [showCancelButton]=\"showCancelButton\"\r\n                  [headers]=\"headers\"\r\n                  [invalidFileSizeMessageSummary]=\"invalidFileSizeMessageSummary\"\r\n                  [invalidFileSizeMessageDetail]=\"invalidFileSizeMessageDetail\"\r\n                  [invalidFileTypeMessageSummary]=\"invalidFileTypeMessageSummary\"\r\n                  [invalidFileLimitMessageDetail]=\"invalidFileLimitMessageDetail\"\r\n                  [invalidFileLimitMessageSummary]=\"invalidFileLimitMessageSummary\"\r\n                  [invalidFileTypeMessageDetail]=\"invalidFileTypeMessageDetail\"\r\n                  (onBeforeUpload)=\"onBeforeUpload.emit($event)\"\r\n                  (onSend)=\"onSend.emit($event)\"\r\n                  (onError)=\"onError.emit($event)\"\r\n                  (onRemove)=\"onRemove.emit($event)\"\r\n                  (onSelect)=\"onSelect.emit($event)\"\r\n                  (onProgress)=\"onProgress.emit($event)\"\r\n                  (uploadHandler)=\"uploadHandler.emit($event)\"\r\n                  (onUpload)=\"onUpload.emit($event)\">\r\n    </p-fileUpload>\r\n  `,\r\n  styleUrls: ['./file-upload.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-file-upload',\r\n  }\r\n})\r\nexport class FreudFileUploadComponent {\r\n  @Input() name: string = 'file[]';\r\n  @Input() url!: string;\r\n  @Input() accept!: string;\r\n  @Input() auto: boolean = false;\r\n  @Input() multiple: boolean = false;\r\n  @Input() withCredentials: boolean = false;\r\n  @Input() method: 'post' | 'put' = 'post';\r\n  @Input() mode: 'advanced' | 'basic' = 'advanced';\r\n  @Input() fileLimit!: number;\r\n  @Input() customUpload: boolean = false;\r\n  @Input() showUploadButton: boolean = true;\r\n  @Input() showCancelButton: boolean = true;\r\n  @Input() headers!: HttpHeaders;\r\n  @Input() chooseIcon: string = 'freud-icon freud-icon-plus';\r\n  @Input() uploadIcon: string = 'freud-icon freud-icon-upload';\r\n  @Input() cancelIcon: string = 'freud-icon freud-icon-times';\r\n  @Input() chooseLabel: string = 'Escolha';\r\n  @Input() uploadLabel: string = 'Enviar';\r\n  @Input() cancelLabel: string = 'Cancelar';\r\n  @Input() invalidFileSizeMessageSummary: string = '{0}: Tamanho do arquivo inválido, ';\r\n  @Input() invalidFileSizeMessageDetail: string = 'o tamanho máximo de upload é {0}.';\r\n  @Input() invalidFileTypeMessageSummary: string = '{0}: tipo de arquivo inválido, ';\r\n  @Input() invalidFileLimitMessageDetail: string = 'limite é de {0} no máximo.';\r\n  @Input() invalidFileLimitMessageSummary: string = 'Número máximo de arquivos excedido, ';\r\n  @Input() invalidFileTypeMessageDetail: string = 'tipos de arquivo permitidos: {0}.';\r\n  @Output() onUpload = new EventEmitter();\r\n  @Output() uploadHandler = new EventEmitter();\r\n  @Output() onBeforeUpload = new EventEmitter();\r\n  @Output() onSend = new EventEmitter();\r\n  @Output() onError = new EventEmitter();\r\n  @Output() onRemove = new EventEmitter();\r\n  @Output() onSelect = new EventEmitter();\r\n  @Output() onProgress = new EventEmitter();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-file-upload {\r\n  .p-fileupload .p-fileupload-buttonbar {\r\n    border: 1px solid $neutral-color-light-03;\r\n    background-color: 1px solid $neutral-color-light-03;\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n  .p-fileupload .p-fileupload-content {\r\n    border: 1px solid $neutral-color-light-03;\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n  .p-button {\r\n    background-color:  $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n    padding: 0 $spacing-size-xxxs;\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    display: inline-flex;\r\n    flex-direction: row-reverse;\r\n    .p-button-icon-left {\r\n      margin-right: 0;\r\n      margin-left: 8px;\r\n    }\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n    &[disabled] {\r\n      opacity: $opacity-level-5;\r\n    }\r\n    &:focus {\r\n      box-shadow: unset;\r\n    }\r\n  }\r\n\r\n  .p-button:enabled:hover, .p-fileupload-choose:not(.p-disabled):hover {\r\n    background: $brand-color-01;\r\n    border-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n}\r\n",
                    "styleUrl": "./file-upload.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudFullCalendarComponent",
            "id": "component-FreudFullCalendarComponent-455ff467c184743cf4712f95106ef7c47c82ef124809863f65d7731561404f3e604dadacfbc41e99d4518bb03b45229204b6ce84271556f6c8f3c33ffd2189f6",
            "file": "projects/web-components/src/components/others/full-calendar/full-calendar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudFullCalendarComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-full-calendar",
            "styleUrls": [
                "./full-calendar.component.scss"
            ],
            "styles": [],
            "template": "<full-calendar\n  #calendarRef\n  [id]=\"id\"\n  [deepChangeDetection]=\"deepChangeDetection\"\n  [eventSources]=\"eventSources\"\n  [resources]=\"resources\"\n  [events]=\"events\"\n  [options]=\"options\">\n</full-calendar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "deepChangeDetection",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "events",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "CalendarOption<events> | null | undefined",
                    "decorators": []
                },
                {
                    "name": "eventSources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "CalendarOption<eventSources> | null | undefined",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "CalendarOptions",
                    "decorators": []
                },
                {
                    "name": "resources",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "CalendarOption<resources> | null | undefined",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "calendarComponent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FullCalendarComponent",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'calendarRef'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, forwardRef, Input, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { FullCalendarComponent } from \"@fullcalendar/angular\";\r\nimport { CalendarOptions } from \"@fullcalendar/core\";\r\nimport { CalendarOption } from \"@fullcalendar/angular/private-types\";\r\n\r\n@Component({\r\n  selector: 'freud-full-calendar',\r\n  template: `\r\n    <full-calendar\r\n      #calendarRef\r\n      [id]=\"id\"\r\n      [deepChangeDetection]=\"deepChangeDetection\"\r\n      [eventSources]=\"eventSources\"\r\n      [resources]=\"resources\"\r\n      [events]=\"events\"\r\n      [options]=\"options\">\r\n    </full-calendar>\r\n  `,\r\n  styleUrls: ['./full-calendar.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-full-calendar',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudFullCalendarComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudFullCalendarComponent {\r\n  @Input() events!: CalendarOption<'events'> | null | undefined;\r\n  @Input() options!: CalendarOptions;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() deepChangeDetection?: boolean;\r\n  @Input() eventSources?: CalendarOption<'eventSources'> | null | undefined;\r\n  @Input() resources?: CalendarOption<'resources'> | null | undefined;\r\n  @Input() id!: string;\r\n  @ViewChild('calendarRef') calendarComponent!: FullCalendarComponent;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-full-calendar {\r\n  font-family: $font-family-base;\r\n  &.freud-bgcolor {\r\n    .fc-toolbar-title {\r\n      @include typography(30px, $font-weight-semibold, 36px);\r\n      color: $neutral-color-white;\r\n    }\r\n    .fc.fc-theme-standard .fc-toolbar {\r\n      .fc-prev-button,\r\n      .fc-next-button,\r\n      .fc-today-button.fc-button {\r\n        background-color: $neutral-color-white;\r\n        border-color: $neutral-color-white;\r\n        color: $brand-color-pure;\r\n        &:focus {\r\n          box-shadow: unset;\r\n        }\r\n      }\r\n      .fc-today-button.fc-button {\r\n        border-radius: $border-radius-md;\r\n      }\r\n\r\n      .fc-button.fc-dayGridMonth-button,\r\n      .fc-button.fc-timeGridWeek-button,\r\n      .fc-button.fc-timeGridDay-button {\r\n        background-color: $brand-color-04;\r\n        border-color: $brand-color-05;\r\n        color: $neutral-color-white;\r\n        &.fc-button-active {\r\n          background-color: $neutral-color-white;\r\n          border-color: $neutral-color-light-04;\r\n          color: $neutral-color-dark-03;\r\n        }\r\n        &:focus {\r\n          box-shadow: unset;\r\n        }\r\n      }\r\n    }\r\n\r\n  }\r\n  &:not(.freud-bgcolor) {\r\n    .fc-toolbar-title {\r\n      @include typography(30px, $font-weight-semibold, 36px);\r\n      color: $neutral-color-dark-04;\r\n    }\r\n\r\n    .fc.fc-theme-standard .fc-toolbar {\r\n      .fc-prev-button,\r\n      .fc-next-button,\r\n      .fc-today-button.fc-button {\r\n        background-color: $brand-color-pure;\r\n        border-color: $brand-color-pure;\r\n        color: $neutral-color-white;\r\n        &:focus {\r\n          box-shadow: unset;\r\n        }\r\n      }\r\n      .fc-today-button.fc-button {\r\n        border-radius: $border-radius-md;\r\n      }\r\n\r\n      .fc-button.fc-dayGridMonth-button,\r\n      .fc-button.fc-timeGridWeek-button,\r\n      .fc-button.fc-timeGridDay-button {\r\n        background-color: $neutral-color-white;\r\n        border-color: $neutral-color-light-04;\r\n        color: $neutral-color-dark-03;\r\n        &.fc-button-active {\r\n          background-color: $brand-color-pure;\r\n          border-color: $brand-color-pure;\r\n          color: $neutral-color-white;\r\n        }\r\n        &:focus {\r\n          box-shadow: unset;\r\n        }\r\n      }\r\n    }\r\n  }\r\n  .fc.fc-theme-standard .fc-toolbar .fc-button {\r\n    @include typography($font-size-xxs, $font-weight-bold, $font-size-xxs);\r\n    height: 40px;\r\n  }\r\n  .fc.fc-theme-standard .fc-toolbar .fc-today-button.fc-button {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n\r\n  .fc.fc-theme-standard .fc-toolbar .fc-button-group .fc-button:first-child {\r\n    border-top-left-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n  .fc.fc-theme-standard .fc-toolbar .fc-button-group .fc-button:last-child {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-bottom-right-radius: $border-radius-md;\r\n  }\r\n\r\n  .fc.fc-theme-standard .fc-view-harness .fc-event.fc-daygrid-block-event {\r\n    border-radius: 0;\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n    padding-left: 4px;\r\n    @include typography($font-size-xxxs, $font-weight-regular, 14.4px);\r\n  }\r\n\r\n  .fc.fc-theme-standard .fc-toolbar .fc-button:not(:disabled):hover {\r\n    background: $brand-color-01;\r\n    border-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .fc .fc-col-header-cell-cushion {\r\n    @include typography($font-size-xs, $font-weight-semibold, 24px);\r\n    color: $neutral-color-dark-03;\r\n  }\r\n  .fc .fc-daygrid-day-number {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n  .fc.fc-theme-standard a {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n}\r\n",
                    "styleUrl": "./full-calendar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudGalleryComponent",
            "id": "component-FreudGalleryComponent-d212f0b2ec9c4375603c55fa25a99c68a0ac33801b5901fad62a638251a2a8285b60de4b5d09009826221e07011af98c747149cfd6ecdbb07c0563e527e8ee75",
            "file": "projects/web-components/src/components/media/gallery/gallery.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-gallery",
            "styleUrls": [
                "./gallery.component.scss"
            ],
            "styles": [],
            "template": "<p-galleria [value]=\"images\" [numVisible]=\"10\" [responsiveOptions]=\"responsiveOptions\" [showThumbnails]=\"showThumbnails\" [showIndicators]=\"!showThumbnails\">\n  <ng-template pTemplate=\"item\" let-item>\n    <img [src]=\"item.previewImageSrc\" style=\"width: 100%;\" />\n  </ng-template>\n  <ng-template pTemplate=\"thumbnail\" let-item>\n    <div class=\"p-grid p-nogutter p-justify-center\">\n      <img [src]=\"item.thumbnailImageSrc\" style=\"width: 80px;height: 60px\"/>\n    </div>\n  </ng-template>\n</p-galleria>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "images",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "GalleryPhoto[]",
                    "decorators": []
                },
                {
                    "name": "responsiveOptions",
                    "defaultValue": "[\r\n    {\r\n      breakpoint: '1366px',\r\n      numVisible: 9\r\n    },\r\n    {\r\n      breakpoint: '1024px',\r\n      numVisible: 8\r\n    },\r\n    {\r\n      breakpoint: '960px',\r\n      numVisible: 5\r\n    },\r\n    {\r\n      breakpoint: '768px',\r\n      numVisible: 4\r\n    },\r\n    {\r\n      breakpoint: '560px',\r\n      numVisible: 2\r\n    }\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "{}",
                    "decorators": []
                },
                {
                    "name": "showThumbnails",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { GalleryPhoto } from \"../../../api/gallery-photo.interface\";\r\n\r\n@Component({\r\n  selector: 'freud-gallery',\r\n  template: `\r\n    <p-galleria [value]=\"images\" [numVisible]=\"10\" [responsiveOptions]=\"responsiveOptions\" [showThumbnails]=\"showThumbnails\" [showIndicators]=\"!showThumbnails\">\r\n      <ng-template pTemplate=\"item\" let-item>\r\n        <img [src]=\"item.previewImageSrc\" style=\"width: 100%;\" />\r\n      </ng-template>\r\n      <ng-template pTemplate=\"thumbnail\" let-item>\r\n        <div class=\"p-grid p-nogutter p-justify-center\">\r\n          <img [src]=\"item.thumbnailImageSrc\" style=\"width: 80px;height: 60px\"/>\r\n        </div>\r\n      </ng-template>\r\n    </p-galleria>\r\n  `,\r\n  styleUrls: ['./gallery.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-gallery',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudGalleryComponent {\r\n  @Input() images: GalleryPhoto[] = [];\r\n  @Input() bgColor: boolean = false;\r\n  @Input() showThumbnails: boolean = true;\r\n\r\n  @Input() responsiveOptions = [\r\n    {\r\n      breakpoint: '1366px',\r\n      numVisible: 9\r\n    },\r\n    {\r\n      breakpoint: '1024px',\r\n      numVisible: 8\r\n    },\r\n    {\r\n      breakpoint: '960px',\r\n      numVisible: 5\r\n    },\r\n    {\r\n      breakpoint: '768px',\r\n      numVisible: 4\r\n    },\r\n    {\r\n      breakpoint: '560px',\r\n      numVisible: 2\r\n    }\r\n  ];\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-gallery:not(.freud-bgcolor) {\r\n\r\n}\r\n.freud-gallery.freud-bgcolor {\r\n}\r\n\r\n.freud-gallery {\r\n  .p-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n  .p-galleria .p-galleria-indicators .p-galleria-indicator.p-highlight button {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-galleria .p-galleria-indicators .p-galleria-indicator button {\r\n    background-color: $neutral-color-light-03;\r\n  }\r\n  .p-galleria .p-galleria-thumbnail-container .p-galleria-thumbnail-item-content:focus {\r\n    box-shadow: 0 0 0 0.2rem $brand-color-pure;\r\n  }\r\n}\r\n",
                    "styleUrl": "./gallery.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudHeaderComponent",
            "id": "component-FreudHeaderComponent-17db650a63b06b7ac533a00274143611fec3b59143edc38e309b9e9d5f84b218f0cccb5f5f2848fbfa626648fb2b0494ca0a653d5a755ce5d6d03867bed87384",
            "file": "stories/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"header\">\n  <div class=\"container\">\n    <h2 class=\"title\">{{title}}</h2>\n    <p>{{description}}</p>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-header',\r\n  template: `\r\n    <div class=\"header\">\r\n      <div class=\"container\">\r\n        <h2 class=\"title\">{{title}}</h2>\r\n        <p>{{description}}</p>\r\n      </div>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./header.component.scss']\r\n})\r\nexport class FreudHeaderComponent {\r\n\r\n  @Input() title!: string;\r\n  @Input() description!: string;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "// TODO: Verificar o import\r\n@import '../../../tokens/dist/style/scss/_variables.scss';\r\n\r\ndiv.header {\r\n  font-family: $font-family-base;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-start;\r\n  margin-bottom: 32px;\r\n  background: url(./bg.png) center no-repeat;\r\n  background-size: 100% 300px;\r\n  z-index: 0;\r\n\r\n  & > div {\r\n    width: 100%;\r\n    z-index: 1;\r\n  }\r\n}\r\n\r\n.container {\r\n  margin: 0 auto;\r\n  max-width: 87%;\r\n  padding-bottom: 90px;\r\n}\r\n\r\nh2.title {\r\n  align-items: center;\r\n  color: white;\r\n  display: flex;\r\n  flex-direction: row;\r\n  font-size: 40px;\r\n  font-weight: 700;\r\n  letter-spacing: -1px;\r\n  line-height: 60px;\r\n  margin: 0 0 30px 0;\r\n  padding: 90px 0 0 0;\r\n  text-align: left;\r\n}\r\n\r\np {\r\n  color: white;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudImageComponent",
            "id": "component-FreudImageComponent-eef1c70a6479c29c7f2841cf3989fc17179e370f63996db28ee8afa69aa2d1dd48d46fe58515cbc1ce796a6ae5182f413ac3ad8112474234b3541816f54c75fc",
            "file": "projects/web-components/src/components/media/image/image.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-image",
            "styleUrls": [
                "./image.component.scss"
            ],
            "styles": [],
            "template": "<p-image\n  [width]=\"width\"\n  [height]=\"height\"\n  [src]=\"src\"\n  [alt]=\"alt\"\n  [preview]=\"preview\"\n  (onShow)=\"onShow.emit($event)\"\n  (onHide)=\"onHide.emit($event)\"></p-image>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'100px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "preview",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-image',\r\n  template: `\r\n    <p-image\r\n      [width]=\"width\"\r\n      [height]=\"height\"\r\n      [src]=\"src\"\r\n      [alt]=\"alt\"\r\n      [preview]=\"preview\"\r\n      (onShow)=\"onShow.emit($event)\"\r\n      (onHide)=\"onHide.emit($event)\"></p-image>\r\n  `,\r\n  styleUrls: ['./image.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-image'\r\n  }\r\n})\r\nexport class FreudImageComponent {\r\n  @Input() width: string = '100%';\r\n  @Input() height: string = '100px';\r\n  @Input() alt!: string;\r\n  @Input() src!: string;\r\n  @Input() preview: boolean = false;\r\n  @Output() onShow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() onHide: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-image {\r\n  .p-image-toolbar {\r\n    z-index: 100000;\r\n  }\r\n  .p-link:focus {\r\n    box-shadow: 0 0 0 0.2rem $brand-color-pure;\r\n  }\r\n  .p-image-preview-container:hover > .p-image-preview-indicator {\r\n    background-color: rgba(0, 0, 0, 0.64);\r\n  }\r\n  .p-image-preview-icon {\r\n    color: $neutral-color-light-01;\r\n  }\r\n  .p-image-preview {\r\n    max-height: calc(100vh - 115px);\r\n  }\r\n}\r\n",
                    "styleUrl": "./image.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudInputMaskComponent",
            "id": "component-FreudInputMaskComponent-a8b97a59b73dcc2f35733b9908d5523c38e7ee90defacbc49658673edaab043d080838c14fd7a649874bc3a8db1a77ff8052e4b2d4cd6f86b91c910f17e73a3f",
            "file": "projects/web-components/src/components/forms/input-mask/input-mask.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputMaskComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-mask",
            "styleUrls": [
                "./input-mask.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-inputMask\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [mask]=\"mask\"\n    [unmask]=\"unmask\"\n    [slotChar]=\"slotChar\"\n    [characterPattern]=\"characterPattern\"\n    [placeholder]=\"placeholder || ''\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [autoClear]=\"false\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onInput)=\"onInput.emit($event)\"\n    (onComplete)=\"onComplete.emit($event)\"\n    (onKeydown)=\"onKeydown.emit($event)\"\n  ></p-inputMask>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mask",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "slotChar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "unmask",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onComplete",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 99
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-mask',\r\n  styleUrls: ['./input-mask.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-inputMask\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [mask]=\"mask\"\r\n        [unmask]=\"unmask\"\r\n        [slotChar]=\"slotChar\"\r\n        [characterPattern]=\"characterPattern\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [autoClear]=\"false\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (onInput)=\"onInput.emit($event)\"\r\n        (onComplete)=\"onComplete.emit($event)\"\r\n        (onKeydown)=\"onKeydown.emit($event)\"\r\n      ></p-inputMask>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-mask',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputMaskComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputMaskComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() mask: string = '';\r\n  @Input() unmask: boolean = false;\r\n  @Input() slotChar: string = '';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n  @Output() onComplete: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.valueChange.emit(this._value);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-mask:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-mask.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-mask {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n}\r\n",
                    "styleUrl": "./input-mask.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 109,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 105
                    }
                }
            }
        },
        {
            "name": "FreudInputNumberComponent",
            "id": "component-FreudInputNumberComponent-79f5ad30c473d187dc471361369cecbc79201c0a7329d5fa09690ad24366764043faa7b3571b01909c6e88d8dd0de150726f56cfc46df924e4a5fd607b8a944b",
            "file": "projects/web-components/src/components/forms/input-number/input-number.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputNumberComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-number",
            "styleUrls": [
                "./input-number.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n      <p-inputNumber\n        [id]=\"id\"\n        [inputId]=\"id\"\n        type=\"text\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        [(ngModel)]=\"value\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n\n        [format]=\"format\"\n        [buttonLayout]=\"buttonLayout\"\n        [incrementButtonIcon]=\"incrementButtonIcon\"\n        [decrementButtonIcon]=\"decrementButtonIcon\"\n        [showButtons]=\"showButtons\"\n        [locale]=\"locale\"\n        [localeMatcher]=\"localeMatcher\"\n        [mode]=\"mode\"\n\n        [prefix]=\"prefix\"\n        [useGrouping]=\"useGrouping\"\n        [suffix]=\"suffix\"\n        [currency]=\"currency\"\n        [currencyDisplay]=\"currencyDisplay\"\n\n        [minFractionDigits]=\"minFractionDigits\"\n        [maxFractionDigits]=\"maxFractionDigits\"\n\n        [min]=\"min\"\n        [max]=\"max\"\n\n        [step]=\"step\"\n        [allowEmpty]=\"allowEmpty\"\n\n        (ngModelChange)=\"modelValueChange()\"\n        (focus)=\"onFocus.emit($event)\"\n        (blur)=\"onBlur.emit($event)\"\n        (input)=\"onInput.emit($event)\"\n        (keydown)=\"onKeydown.emit($event)\"\n      ></p-inputNumber>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "allowEmpty",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 98,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonLayout",
                    "defaultValue": "'stacked'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "\"stacked\" | \"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "currency",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "currencyDisplay",
                    "defaultValue": "\"symbol\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "decrementButtonIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 99,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "format",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "incrementButtonIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 97,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "locale",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "localeMatcher",
                    "defaultValue": "'best fit'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "\"lookup\" | \"best fit\"",
                    "decorators": []
                },
                {
                    "name": "max",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "maxFractionDigits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "minFractionDigits",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "\"decimal\"",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "\"decimal\" | \"currency\"",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 96,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "prefix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 100,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showButtons",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "suffix",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useGrouping",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 105,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 103,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 106,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 108,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 104,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 110,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 116
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 118
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 146,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 135,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 131,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-number',\r\n  styleUrls: ['./input-number.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n          <p-inputNumber\r\n            [id]=\"id\"\r\n            [inputId]=\"id\"\r\n            type=\"text\"\r\n            [class.ng-invalid]=\"invalid\"\r\n            [class.ng-dirty]=\"invalid\"\r\n            [(ngModel)]=\"value\"\r\n            [placeholder]=\"placeholder || ''\"\r\n            [disabled]=\"disabled\"\r\n            [required]=\"required\"\r\n\r\n            [format]=\"format\"\r\n            [buttonLayout]=\"buttonLayout\"\r\n            [incrementButtonIcon]=\"incrementButtonIcon\"\r\n            [decrementButtonIcon]=\"decrementButtonIcon\"\r\n            [showButtons]=\"showButtons\"\r\n            [locale]=\"locale\"\r\n            [localeMatcher]=\"localeMatcher\"\r\n            [mode]=\"mode\"\r\n\r\n            [prefix]=\"prefix\"\r\n            [useGrouping]=\"useGrouping\"\r\n            [suffix]=\"suffix\"\r\n            [currency]=\"currency\"\r\n            [currencyDisplay]=\"currencyDisplay\"\r\n\r\n            [minFractionDigits]=\"minFractionDigits\"\r\n            [maxFractionDigits]=\"maxFractionDigits\"\r\n\r\n            [min]=\"min\"\r\n            [max]=\"max\"\r\n\r\n            [step]=\"step\"\r\n            [allowEmpty]=\"allowEmpty\"\r\n\r\n            (ngModelChange)=\"modelValueChange()\"\r\n            (focus)=\"onFocus.emit($event)\"\r\n            (blur)=\"onBlur.emit($event)\"\r\n            (input)=\"onInput.emit($event)\"\r\n            (keydown)=\"onKeydown.emit($event)\"\r\n          ></p-inputNumber>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-number',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputNumberComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\n\r\nexport class FreudInputNumberComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() format: boolean = true;\r\n  @Input() allowEmpty: boolean = true;\r\n  @Input() useGrouping: boolean = true;\r\n  @Input() showButtons: boolean = false;\r\n  @Input() buttonLayout: 'stacked' | 'horizontal' | 'vertical' = 'stacked';\r\n  @Input() incrementButtonIcon: string = 'freud-icon freud-icon-chevron-up';\r\n  @Input() decrementButtonIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() locale!: string;\r\n  @Input() localeMatcher: \"lookup\" | \"best fit\" = 'best fit';\r\n  @Input() mode: \"decimal\" | \"currency\" = \"decimal\";\r\n  @Input() currencyDisplay: string = \"symbol\";\r\n  @Input() currency!: string;\r\n  @Input() prefix!: string;\r\n  @Input() suffix!: string;\r\n  @Input() minFractionDigits!: number;\r\n  @Input() maxFractionDigits!: number;\r\n  @Input() min!: number;\r\n  @Input() max!: number;\r\n  @Input() step: number = 1;\r\n\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.modelValueChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-number:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-number.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-number {\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputnumber:not(.p-inputnumber-buttons-vertical) {\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputnumber-button-group .p-inputnumber-button .freud-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .p-inputnumber-buttons-horizontal .p-inputnumber-input {\r\n    text-align: center;\r\n  }\r\n\r\n  .p-button.p-button-icon-only {\r\n    padding: 7px 0;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-button:hover {\r\n    background: $brand-color-03;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $brand-color-03;\r\n  }\r\n  .p-button {\r\n    border-radius: $border-radius-md;\r\n    background-color: $brand-color-pure;\r\n    border: 1px solid $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-number.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 124,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                }
            }
        },
        {
            "name": "FreudInputPasswordComponent",
            "id": "component-FreudInputPasswordComponent-a9b4fca1645df3df13bf31ea67509ccca47155d94e14469b60af9b3cd81c6c68cfead7a820f2d35085e2231f45ded8f0effbe8cd2d85faaa92adba7775e9c364",
            "file": "projects/web-components/src/components/forms/input-password/input-password.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputPasswordComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-password",
            "styleUrls": [
                "./input-password.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <p-password\n      [id]=\"id\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      [(ngModel)]=\"value\"\n      [placeholder]=\"placeholder || ''\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      [toggleMask]=\"toggleMask\"\n      [feedback]=\"feedback\"\n\n      [promptLabel]=\"promptLabel\"\n      [mediumRegex]=\"mediumRegex\"\n      [strongRegex]=\"strongRegex\"\n      [weakLabel]=\"weakLabel\"\n      [mediumLabel]=\"mediumLabel\"\n      [strongLabel]=\"strongLabel\"\n\n      (ngModelChange)=\"modelValueChange()\"\n      (focus)=\"onFocus.emit($event)\"\n      (blur)=\"onBlur.emit($event)\"\n      (input)=\"onInput.emit($event)\"\n      (keydown)=\"onKeydown.emit($event)\">\n        <ng-template pTemplate=\"header\">\n          <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n        </ng-template>\n        <ng-template pTemplate=\"footer\">\n          <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n        </ng-template>\n    </p-password>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "feedback",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "headerLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumRegex",
                    "defaultValue": "'^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "strongRegex",
                    "defaultValue": "'^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "toggleMask",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 93
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 95
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-password',\r\n  styleUrls: ['./input-password.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n        <p-password\r\n          [id]=\"id\"\r\n          [class.ng-invalid]=\"invalid\"\r\n          [class.ng-dirty]=\"invalid\"\r\n          [(ngModel)]=\"value\"\r\n          [placeholder]=\"placeholder || ''\"\r\n          [disabled]=\"disabled\"\r\n          [required]=\"required\"\r\n          [toggleMask]=\"toggleMask\"\r\n          [feedback]=\"feedback\"\r\n\r\n          [promptLabel]=\"promptLabel\"\r\n          [mediumRegex]=\"mediumRegex\"\r\n          [strongRegex]=\"strongRegex\"\r\n          [weakLabel]=\"weakLabel\"\r\n          [mediumLabel]=\"mediumLabel\"\r\n          [strongLabel]=\"strongLabel\"\r\n\r\n          (ngModelChange)=\"modelValueChange()\"\r\n          (focus)=\"onFocus.emit($event)\"\r\n          (blur)=\"onBlur.emit($event)\"\r\n          (input)=\"onInput.emit($event)\"\r\n          (keydown)=\"onKeydown.emit($event)\">\r\n            <ng-template pTemplate=\"header\">\r\n              <ng-content select=\"[freudTemplateHeader]\"></ng-content>\r\n            </ng-template>\r\n            <ng-template pTemplate=\"footer\">\r\n              <ng-content select=\"[freudTemplatefooter]\"></ng-content>\r\n            </ng-template>\r\n        </p-password>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-password',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputPasswordComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputPasswordComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() promptLabel!: string;\r\n  @Input() mediumRegex: string = '^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).';\r\n  @Input() strongRegex: string = '^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})';\r\n  @Input() weakLabel!: string;\r\n  @Input() mediumLabel!: string;\r\n  @Input() strongLabel!: string;\r\n  @Input() headerLabel!: string;\r\n  @Input() invalid: boolean = false;\r\n  @Input() toggleMask: boolean = true;\r\n  @Input() feedback: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.modelValueChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-password:not(.freud-bgcolor) {\r\n  .freud-label {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-password.freud-bgcolor {\r\n  .freud-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-password {\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-password {\r\n    width: 100%;\r\n  }\r\n\r\n  hr {\r\n    border: 1px solid $neutral-color-light-03;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-password-panel {\r\n    border-radius: $border-radius-md;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    color: $neutral-color-dark-03;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n\r\n  .p-password-panel .p-password-meter {\r\n    margin-bottom: 0.5rem;\r\n    background: $neutral-color-light-03;\r\n  }\r\n  .p-password-panel .p-password-meter .p-password-strength.weak {\r\n    background: $feedback-color-negative-03;\r\n  }\r\n  .p-password-panel .p-password-meter .p-password-strength.medium {\r\n    background: $feedback-color-warning-03;\r\n  }\r\n  .p-password-panel .p-password-meter .p-password-strength.strong {\r\n    background: $feedback-color-positive-03;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-password.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 101,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 97
                    }
                }
            }
        },
        {
            "name": "FreudInputTextAreaComponent",
            "id": "component-FreudInputTextAreaComponent-4017f250607b25eecdf1a9a1f2991b7feaf373d67a2b52ebc2cb077b2d541e1373601038158ae53024b0c8aec0c0d4f15a5d67ed63d35a67383f5e9361c653e5",
            "file": "projects/web-components/src/components/forms/input-textarea/input-textarea.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputTextAreaComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-textarea",
            "styleUrls": [
                "./input-textarea.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <textarea\n      [id]=\"id\"\n      type=\"text\"\n      [class.ng-invalid]=\"invalid\"\n      [class.ng-dirty]=\"invalid\"\n      [(ngModel)]=\"value\"\n      [rows]=\"rows\"\n      [cols]=\"cols\"\n      [autoResize]=\"autoResize\"\n      pInputTextarea\n      [placeholder]=\"placeholder || ''\"\n      [disabled]=\"disabled\"\n      [required]=\"required\"\n      (focus)=\"onFocus.emit($event)\"\n      (blur)=\"onBlur.emit($event)\"\n      (input)=\"onInput.emit($event)\"\n      (keydown)=\"onKeydown.emit($event)\"\n    ></textarea>\n  <small id=\"{{id}}-help\"\n         [class.disabled]=\"disabled\"\n         class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoResize",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 75,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 103
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 105
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-textarea',\r\n  styleUrls: ['./input-textarea.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n        <textarea\r\n          [id]=\"id\"\r\n          type=\"text\"\r\n          [class.ng-invalid]=\"invalid\"\r\n          [class.ng-dirty]=\"invalid\"\r\n          [(ngModel)]=\"value\"\r\n          [rows]=\"rows\"\r\n          [cols]=\"cols\"\r\n          [autoResize]=\"autoResize\"\r\n          pInputTextarea\r\n          [placeholder]=\"placeholder || ''\"\r\n          [disabled]=\"disabled\"\r\n          [required]=\"required\"\r\n          (focus)=\"onFocus.emit($event)\"\r\n          (blur)=\"onBlur.emit($event)\"\r\n          (input)=\"onInput.emit($event)\"\r\n          (keydown)=\"onKeydown.emit($event)\"\r\n        ></textarea>\r\n      <small id=\"{{id}}-help\"\r\n             [class.disabled]=\"disabled\"\r\n             class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-textarea',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputTextAreaComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputTextAreaComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() cols!: number;\r\n  @Input() rows!: number;\r\n  @Input() invalid: boolean = false;\r\n  @Input() autoResize: boolean = false;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id!: string;\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onChange(this._value);\r\n    this.onTouched();\r\n    this.valueChange.emit(v);\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onChange: any = () => { };\r\n\r\n  onTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-textarea:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-textarea.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-textarea {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-textarea.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 81,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 77
                    }
                }
            }
        },
        {
            "name": "FreudInputTextComponent",
            "id": "component-FreudInputTextComponent-0aa3b360cd1e6ac4d91422aa08d63ed68ad5b8627ad2e1905134acc64891648b1387bac47fbbb85b859889e40ff9de901789f9ae276e2fcdaebad81800a8273c",
            "file": "projects/web-components/src/components/forms/input-text/input-text.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudInputTextComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-text",
            "styleUrls": [
                "./input-text.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n    <span [class.p-input-icon-right]=\"rightIcon\">\n      <i class=\"{{rightIcon}}\" *ngIf=\"rightIcon\"></i>\n      <input\n        [id]=\"id\"\n        type=\"text\"\n        [class.ng-invalid]=\"invalid\"\n        [class.ng-dirty]=\"invalid\"\n        pInputText\n        [(ngModel)]=\"value\"\n        [placeholder]=\"placeholder || ''\"\n        [disabled]=\"disabled\"\n        [required]=\"required\"\n        (ngModelChange)=\"modelValueChange()\"\n        (focus)=\"onFocus.emit($event)\"\n        (blur)=\"onBlur.emit($event)\"\n        (input)=\"onInput.emit($event)\"\n        (keydown)=\"onKeydown.emit($event)\"\n      />\n    </span>\n  <small [class.disabled]=\"disabled\"\n         class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "Math.random().toString(36).substring(2)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rightIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onInput",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onKeydown",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 71,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 79
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 107,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-text',\r\n  styleUrls: ['./input-text.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n        <span [class.p-input-icon-right]=\"rightIcon\">\r\n          <i class=\"{{rightIcon}}\" *ngIf=\"rightIcon\"></i>\r\n          <input\r\n            [id]=\"id\"\r\n            type=\"text\"\r\n            [class.ng-invalid]=\"invalid\"\r\n            [class.ng-dirty]=\"invalid\"\r\n            pInputText\r\n            [(ngModel)]=\"value\"\r\n            [placeholder]=\"placeholder || ''\"\r\n            [disabled]=\"disabled\"\r\n            [required]=\"required\"\r\n            (ngModelChange)=\"modelValueChange()\"\r\n            (focus)=\"onFocus.emit($event)\"\r\n            (blur)=\"onBlur.emit($event)\"\r\n            (input)=\"onInput.emit($event)\"\r\n            (keydown)=\"onKeydown.emit($event)\"\r\n          />\r\n        </span>\r\n      <small [class.disabled]=\"disabled\"\r\n             class=\"help-text freud-typography bodyRegularAuto\">{{helpText ? helpText : ''}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-text',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudInputTextComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudInputTextComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() rightIcon!: string;\r\n  @Input() invalid: boolean = false;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id: string = Math.random().toString(36).substring(2);\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n  @Output() onInput: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onKeydown: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: string;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.modelValueChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-input-text:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-input-text.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-input-text {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .p-input-icon-left>i, .p-input-icon-right>i {\r\n    margin-top: -10px;\r\n    font-size: 24px;\r\n  }\r\n\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    &::placeholder {\r\n      color: $feedback-color-negative-04;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./input-text.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 85,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 81
                    }
                }
            }
        },
        {
            "name": "FreudKnobComponent",
            "id": "component-FreudKnobComponent-195152c198c4454c59d4dbfc30dae08eb4599f8e112c6b445238b165e3197caa584726c99e7170276f99759f8670644e7e539cf76064133150ab14007d6d2943",
            "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-knob",
            "styleUrls": [
                "./knob.component.scss"
            ],
            "styles": [],
            "template": "<p-knob\n  [(ngModel)]=\"value\"\n  (onChange)=\"onChangeValue($event)\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [size]=\"size === 'large' ? 200 : 100\"\n  [step]=\"step\"\n  [valueColor]=\"bgColor ? 'white' : '#6732D1'\"\n  [rangeColor]=\"bgColor ? '#5127A4' : '#F0F2F5'\"\n  [textColor]=\"bgColor ? 'white' : '#6B7280'\"\n  [disabled]=\"disabled\"></p-knob>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'default'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "sizes",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onChangeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit, ViewEncapsulation, Input, Output, EventEmitter } from '@angular/core';\r\n\r\ntype sizes = 'default' | 'large';\r\n@Component({\r\n  selector: 'freud-knob',\r\n  template: `\r\n    <p-knob\r\n      [(ngModel)]=\"value\"\r\n      (onChange)=\"onChangeValue($event)\"\r\n      [min]=\"min\"\r\n      [max]=\"max\"\r\n      [size]=\"size === 'large' ? 200 : 100\"\r\n      [step]=\"step\"\r\n      [valueColor]=\"bgColor ? 'white' : '#6732D1'\"\r\n      [rangeColor]=\"bgColor ? '#5127A4' : '#F0F2F5'\"\r\n      [textColor]=\"bgColor ? 'white' : '#6B7280'\"\r\n      [disabled]=\"disabled\"></p-knob>\r\n  `,\r\n  styleUrls: ['./knob.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-knob freud-typography',\r\n    '[class.freud-knob-bgcolor]': `bgColor`,\r\n    '[class.h1Regular1-2]': `size === 'large'`,\r\n    '[class.h5Regular1-2]': `size === 'default'`,\r\n  }\r\n})\r\nexport class FreudKnobComponent {\r\n\r\n  @Input() value: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() min: number = 0;\r\n  @Input() step: number = 1;\r\n  @Input() size: sizes = 'default';\r\n  @Input() disabled: boolean = false;\r\n  @Input() bgColor: boolean = false;\r\n  @Output() valueChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n  onChangeValue(value: number) {\r\n    this.value = value;\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../scss/typography';\r\n\r\n",
                    "styleUrl": "./knob.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudListboxComponent",
            "id": "component-FreudListboxComponent-bd9998fc4ea7946822de5592db3229fbc8bf64a4b26601285d6a36348021e899366a14d5b97233caf019edfecc40936850d61bf14c6d68daf8c8e98bc22080ee",
            "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudListboxComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-listbox",
            "styleUrls": [
                "./listbox.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <p-listbox\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [checkbox]=\"checkbox\"\n    [filter]=\"filter\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [group]=\"group\"\n    [multiple]=\"multiple\"\n    [emptyFilterMessage]=\"emptyFilterMessage\"\n    [emptyMessage]=\"emptyMessage\"\n    [showToggleAll]=\"showToggleAll\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    [filterPlaceHolder]=\"filterPlaceHolder\"\n    (onDblClick)=\"onDblClick.emit($event)\"\n    (onClick)=\"onClick.emit($event)\"\n    (onChange)=\"onChange.emit($event)\">\n  </p-listbox>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "checkbox",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "emptyFilterMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterMatchMode",
                    "defaultValue": "'contains'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "listboxFilterMatchModes",
                    "decorators": []
                },
                {
                    "name": "filterPlaceHolder",
                    "defaultValue": "'Filtrar'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "group",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showToggleAll",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onDblClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 87,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "filterValue",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 85
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 104
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 106
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\nexport type listboxFilterMatchModes = \"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\";\r\n\r\n@Component({\r\n  selector: 'freud-listbox',\r\n  styleUrls: ['./listbox.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <p-listbox\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [checkbox]=\"checkbox\"\r\n        [filter]=\"filter\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [group]=\"group\"\r\n        [multiple]=\"multiple\"\r\n        [emptyFilterMessage]=\"emptyFilterMessage\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [showToggleAll]=\"showToggleAll\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [options]=\"options\"\r\n        [filterPlaceHolder]=\"filterPlaceHolder\"\r\n        (onDblClick)=\"onDblClick.emit($event)\"\r\n        (onClick)=\"onClick.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\">\r\n      </p-listbox>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-listbox',\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudListboxComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudListboxComponent implements ControlValueAccessor {\r\n  @Input() checkbox: boolean = false;\r\n  @Input() options!: any[];\r\n  @Input() showToggleAll: boolean = true;\r\n  @Input() group!: boolean;\r\n  @Input() filterPlaceHolder: string = 'Filtrar';\r\n  @Input() filter: boolean = false;\r\n  @Input() invalid: boolean = false;\r\n  @Input() multiple: boolean = false;\r\n  @Input() emptyFilterMessage: string = 'Sem resultados';\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() filterMatchMode: listboxFilterMatchModes = 'contains';\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() optionDisabled: string = 'disabled';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id!: string;\r\n\r\n  @Output() onDblClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClick: EventEmitter<any> = new EventEmitter();\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  filterValue = '';\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.valueChange.emit(v);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-listbox {\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-listbox {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n\r\n  .p-listbox:not(.p-disabled) .p-listbox-item:not(.p-highlight):not(.p-disabled):hover {\r\n    background-color: $brand-color-02;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-listbox .p-listbox-list .p-listbox-item {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n  .p-listbox .p-listbox-list .p-listbox-item:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-listbox .p-listbox-list .p-listbox-item.p-highlight {\r\n    color: $brand-color-pure;\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  // Input\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-listbox .p-listbox-header {\r\n    background-color: $neutral-color-light-01;\r\n  }\r\n\r\n  // Checkbox\r\n  .p-checkbox .p-checkbox-box.p-highlight,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n}\r\n\r\n",
                    "styleUrl": "./listbox.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 116,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 112
                    }
                }
            }
        },
        {
            "name": "FreudMenubarComponent",
            "id": "component-FreudMenubarComponent-47dc71f2c46267380fcb3cfe4e0ee12a60ee0f4a226d05e7b0a2345ba0270badd541556ee04cd35a6a6b33eeccbb6ff5ffc68614f7802698c60ff5d7c76527e6",
            "file": "projects/web-components/src/components/structure/menubar/menubar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-menubar",
            "styleUrls": [
                "./menubar.component.scss"
            ],
            "styles": [],
            "template": "<p-menubar [model]=\"items\" [autoDisplay]=\"autoDisplay\">\n  <ng-template pTemplate=\"start\">\n    <a class=\"menubar-home-logo\" [href]=\"startImgHref\">\n      <img [src]=\"startImgSrc\" height=\"32\" class=\"mr-2\" [alt]=\"startImgAlt\">\n    </a>\n  </ng-template>\n</p-menubar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoDisplay",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "startImgAlt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "startImgHref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "startImgSrc",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onItemClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\n@Component({\r\n  selector: 'freud-menubar',\r\n  template: `\r\n    <p-menubar [model]=\"items\" [autoDisplay]=\"autoDisplay\">\r\n      <ng-template pTemplate=\"start\">\r\n        <a class=\"menubar-home-logo\" [href]=\"startImgHref\">\r\n          <img [src]=\"startImgSrc\" height=\"32\" class=\"mr-2\" [alt]=\"startImgAlt\">\r\n        </a>\r\n      </ng-template>\r\n    </p-menubar>\r\n  `,\r\n  styleUrls: ['./menubar.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-menubar',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudMenubarComponent {\r\n  @Input() items!: FreudMenuItem[];\r\n  @Input() startImgSrc!: string;\r\n  @Input() startImgAlt!: string;\r\n  @Input() startImgHref!: string;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() autoDisplay: boolean = false;\r\n  @Output() onItemClick: EventEmitter<any> = new EventEmitter();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-menubar:not(.freud-bgcolor) {\r\n  .p-menubar {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-submenu-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-icon {\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover {\r\n    @media screen and (min-width: 961px) {\r\n      background-color: $neutral-color-light-02;\r\n    }\r\n  }\r\n\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover .p-submenu-icon {\r\n    @media screen and (min-width: 961px) {\r\n      color: $brand-color-pure !important;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    .p-menubar .p-menubar-button:focus {\r\n      box-shadow: unset;\r\n    }\r\n  }\r\n}\r\n.freud-menubar.freud-bgcolor {\r\n  .p-menubar {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-submenu-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link .p-submenu-icon,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover .p-submenu-icon {\r\n    @media screen and (min-width: 961px) {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link,\r\n  .p-menubar .p-menubar-root-list > .p-menuitem.p-menuitem-active > .p-menuitem-link:not(.p-disabled):hover{\r\n    @media screen and (min-width: 961px) {\r\n      background-color: $brand-color-03;\r\n    }\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    .p-menubar .p-menubar-button {\r\n      color: $neutral-color-white;\r\n    }\r\n    .p-menubar .p-menubar-button:focus {\r\n      box-shadow: unset;\r\n    }\r\n\r\n    .p-menubar .p-menubar-button:hover {\r\n      background-color: $brand-color-03;\r\n    }\r\n\r\n  }\r\n}\r\n.p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:focus {\r\n  box-shadow: unset;\r\n}\r\n\r\n.freud-menubar {\r\n  .p-menubar {\r\n    border: unset;\r\n    height: 60px;\r\n    padding: 0 $spacing-size-xxs;\r\n    border-radius: 0;\r\n  }\r\n  .menubar-home-logo {\r\n    text-align: center;\r\n    display: flex;\r\n  }\r\n\r\n  p-menubarsub {\r\n    width: 100%;\r\n    ul {\r\n      float: right;\r\n    }\r\n  }\r\n  .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link {\r\n    height: 60px;\r\n    border-radius: 0;\r\n    @include typography($font-size-xxs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .p-menubar .p-menuitem.p-menuitem-active > .p-menuitem-link,\r\n  .p-menubar .p-menuitem.p-menuitem-active > .p-menuitem-link span.p-submenu-icon,\r\n  .p-menubar .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-icon,\r\n  .p-menubar .p-menuitem.p-menuitem-active > .p-menuitem-link .p-menuitem-text {\r\n    background-color: $brand-color-02;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-menubar .p-menuitem.p-menuitem-active > .p-menuitem-link .p-submenu-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .p-menubar .p-menuitem > .p-menuitem-link .p-menuitem-icon {\r\n    font-size: 14px;\r\n    color: $neutral-color-dark-02;\r\n  }\r\n\r\n  @media screen and (min-width: 961px) {\r\n    .p-menubar .p-submenu-list {\r\n      border-radius: $border-radius-md;\r\n      border: unset;\r\n      box-shadow: $shadow-level-3;\r\n    }\r\n  }\r\n\r\n  .p-menubar .p-menuitem-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  @media screen and (max-width: 960px) {\r\n    .p-menubar-root-list {\r\n      border-radius: $border-radius-md;\r\n      border: unset;\r\n      box-shadow: $shadow-level-3;\r\n    }\r\n\r\n    .p-menubar .p-menubar-root-list > .p-menuitem > .p-menuitem-link:not(.p-disabled):hover,\r\n    .p-menubar .p-menubar-root-list ul li a {\r\n      background-color: $brand-color-02;\r\n      color: $brand-color-pure;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@media screen and (max-width: 960px) {\r\n  .menubar-home-logo {\r\n    display: none !important;\r\n  }\r\n}\r\n",
                    "styleUrl": "./menubar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudMenuComponent",
            "id": "component-FreudMenuComponent-4042f89cf4a67131fcee9cfb7b9690ff782d60b880965312744758ebceedddf9633f61f0335b3ee16cac12be11f24ba2204e085ec7e063305d6fbb85ff6124ce",
            "file": "projects/web-components/src/components/structure/menu/menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-menu",
            "styleUrls": [
                "./menu.component.scss"
            ],
            "styles": [],
            "template": "<p-menu\n  #pMenu\n  [model]=\"items\"\n  [appendTo]=\"appendTo\"\n  [popup]=\"popup\"\n  (onHide)=\"onHide.emit($event)\"\n  (onShow)=\"onShow.emit($event)\"\n></p-menu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "popup",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "reference",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'pMenu'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\n@Component({\r\n  selector: 'freud-menu',\r\n  template: `\r\n    <p-menu\r\n      #pMenu\r\n      [model]=\"items\"\r\n      [appendTo]=\"appendTo\"\r\n      [popup]=\"popup\"\r\n      (onHide)=\"onHide.emit($event)\"\r\n      (onShow)=\"onShow.emit($event)\"\r\n    ></p-menu>\r\n  `,\r\n  styleUrls: ['./menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-menu',\r\n  }\r\n})\r\nexport class FreudMenuComponent {\r\n\r\n  @Input() items!: FreudMenuItem[];\r\n  @Input() popup: boolean = false;\r\n  @Input() appendTo!: string;\r\n\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onHide: EventEmitter<any> = new EventEmitter<any>();\r\n  @ViewChild('pMenu') reference!: any;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-menu {\r\n  .p-menu .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 16px);\r\n  }\r\n\r\n  .p-menu .p-submenu-header {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n    color: $neutral-color-dark-03;\r\n  }\r\n\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover {\r\n    background-color: $brand-color-01;\r\n  }\r\n\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text,\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon {\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-menu .p-menuitem-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-menu {\r\n    border-radius: $border-radius-md;\r\n    border: unset;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n\r\n  .freud-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudMultiSelectComponent",
            "id": "component-FreudMultiSelectComponent-a6982e485fbf17839f81824cb097e3cf2a2bd1f8ee780219e134d71174eb7dec013f2b94f24d31299d6db1d010fb3d59a98f2fb81880f5a1e1c33f37062fc4a5",
            "file": "projects/web-components/src/components/forms/multi-select/multi-select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudMultiSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-multi-select",
            "styleUrls": [
                "./multi-select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-multiSelect\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [display]=\"display\"\n    [options]=\"options\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onFilter)=\"onFilter.emit($event)\"\n    (onPanelShow)=\"onPanelShow.emit($event)\"\n    (onPanelHide)=\"onPanelHide.emit($event)\"\n  ></p-multiSelect>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "display",
                    "defaultValue": "'comma'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "\"comma\" | \"chip\"",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 62,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 63,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 88,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 90,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 84,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPanelHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onPanelShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 95,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 112
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 114
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 105,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 109,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-multi-select',\r\n  styleUrls: ['./multi-select.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-multiSelect\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [dropdownIcon]=\"dropdownIcon\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [itemSize]=\"itemSize\"\r\n        [disabled]=\"disabled\"\r\n        [display]=\"display\"\r\n        [options]=\"options\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\"\r\n        (onFilter)=\"onFilter.emit($event)\"\r\n        (onPanelShow)=\"onPanelShow.emit($event)\"\r\n        (onPanelHide)=\"onPanelHide.emit($event)\"\r\n      ></p-multiSelect>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-multi-select',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudMultiSelectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudMultiSelectComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() options!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() virtualScroll: boolean = false;\r\n  @Input() itemSize!: number;\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() optionDisabled: string = 'disabled';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() characterPattern: string = '';\r\n  @Input() display: 'comma' | 'chip' = 'comma';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id!: string;\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n  @Output() onPanelShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onPanelHide: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: any;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.valueChange.emit(v);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-multi-select:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-multi-select.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-multi-select {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-multiselect {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-multiselect:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-multiselect:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-multiselect .p-multiselect-panel {\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-3;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item {\r\n    padding: 12px 1rem;\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item:not(.p-highlight):not(.p-disabled):hover {\r\n    background-color: $brand-color-02;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-header {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox .p-checkbox-box.p-highlight,\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-checkbox:not(.p-checkbox-disabled) .p-checkbox-box:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-multiselect-panel .p-multiselect-items .p-multiselect-item:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  // Input\r\n  .p-inputtext {\r\n    height: 40px;\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n    &::placeholder {\r\n      color: $neutral-color-dark-02;\r\n      opacity: 1;\r\n      @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    }\r\n  }\r\n\r\n  .p-inputtext:enabled:focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputtext:enabled:hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-multiselect-panel .p-multiselect-header {\r\n    background-color: $neutral-color-light-01;\r\n    border-bottom: 1px solid $neutral-color-light-03;\r\n  }\r\n\r\n  // Chip\r\n  .p-multiselect.p-multiselect-chip .p-multiselect-token {\r\n    padding: 0.25rem 0.5rem;\r\n    margin-right: 0.5rem;\r\n    @include typography($font-size-xxs, $font-weight-regular, 21px);\r\n    background: $brand-color-01;\r\n    color: $brand-color-pure;\r\n    border-radius: $border-radius-md;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./multi-select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 124,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 120
                    }
                }
            }
        },
        {
            "name": "FreudPaginatorComponent",
            "id": "component-FreudPaginatorComponent-794546c5ec63603004bfbc5f7e65b5ca41d09b7b04f65281c9a86dd609cc9e900ff12e7ee2406a7e15f233804dca1511fa886415258f6b5da66481374fc56c3e",
            "file": "projects/web-components/src/components/others/paginator/paginator.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-paginator",
            "styleUrls": [
                "./paginator.component.scss"
            ],
            "styles": [],
            "template": "<p-paginator\n  [totalRecords]=\"totalRecords\"\n  [rows]=\"rows\"\n  [first]=\"first\"\n  [alwaysShow]=\"alwaysShow\"\n  [showFirstLastIcon]=\"showFirstLastIcon\"\n  [pageLinkSize]=\"pageLinkSize\"\n  [currentPageReportTemplate]=\"currentPageReportTemplate\"\n  [showCurrentPageReport]=\"showCurrentPageReport\"\n  (onPageChange)=\"onPageChange.emit($event)\">\n</p-paginator>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "alwaysShow",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "currentPageReportTemplate",
                    "defaultValue": "'({currentPage} de {totalPages})'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "first",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "pageLinkSize",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rows",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showCurrentPageReport",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showFirstLastIcon",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-paginator',\r\n  template: `\r\n    <p-paginator\r\n      [totalRecords]=\"totalRecords\"\r\n      [rows]=\"rows\"\r\n      [first]=\"first\"\r\n      [alwaysShow]=\"alwaysShow\"\r\n      [showFirstLastIcon]=\"showFirstLastIcon\"\r\n      [pageLinkSize]=\"pageLinkSize\"\r\n      [currentPageReportTemplate]=\"currentPageReportTemplate\"\r\n      [showCurrentPageReport]=\"showCurrentPageReport\"\r\n      (onPageChange)=\"onPageChange.emit($event)\">\r\n    </p-paginator>\r\n  `,\r\n  styleUrls: ['./paginator.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-paginator',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudPaginatorComponent {\r\n\r\n  @Input() totalRecords: number = 0;\r\n  @Input() rows: number = 0;\r\n  @Input() first: number = 0;\r\n  @Input() pageLinkSize: number = 5;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() showCurrentPageReport: boolean = false;\r\n  @Input() currentPageReportTemplate: string = '({currentPage} de {totalPages})';\r\n  @Input() showFirstLastIcon: boolean = true;\r\n  @Input() alwaysShow: boolean = true;\r\n  @Output() onPageChange = new EventEmitter();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-paginator {\r\n  .p-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n  .p-paginator .p-paginator-pages .p-paginator-page {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n  .p-paginator .p-paginator-pages .p-paginator-page:not(.p-highlight):hover {\r\n    background-color: $brand-color-02;\r\n    color: $neutral-color-white;\r\n    border-radius: 50%;\r\n  }\r\n}\r\n\r\n.freud-paginator:not(.freud-bgcolor) {\r\n  .p-paginator .p-paginator-pages .p-paginator-page {\r\n    color: $neutral-color-dark-02;\r\n  }\r\n  .p-paginator .p-paginator-first,\r\n  .p-paginator .p-paginator-last {\r\n    color: $neutral-color-black;\r\n  }\r\n  .p-paginator .p-paginator-pages .p-paginator-page.p-highlight {\r\n    background-color: transparent;\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n    color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n.freud-paginator.freud-bgcolor {\r\n  .p-paginator {\r\n    background-color: transparent;\r\n  }\r\n\r\n  .p-paginator .p-paginator-pages .p-paginator-page {\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-paginator .p-paginator-first,\r\n  .p-paginator .p-paginator-prev,\r\n  .p-paginator .p-paginator-next,\r\n  .p-paginator .p-paginator-last {\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-paginator .p-paginator-first,\r\n  .p-paginator .p-paginator-last {\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-paginator .p-paginator-pages .p-paginator-page.p-highlight {\r\n    background-color: transparent;\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n    color: $brand-color-03;\r\n  }\r\n}\r\n",
                    "styleUrl": "./paginator.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudPanelComponent",
            "id": "component-FreudPanelComponent-62238b4e3d7a0ed0a09777cf7c88ee1fde9326fbd6ee081117c42c217c68317d9e5c30daf6a38c9649d797144d1cbbedf895491c0bba1f0bb0be3804a54de0c0",
            "file": "projects/web-components/src/components/structure/panel/panel.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-panel",
            "styleUrls": [
                "./panel.component.scss"
            ],
            "styles": [],
            "template": "<p-panel\n  [header]=\"header\"\n  [collapsed]=\"collapsed\"\n  [expandIcon]=\"expandIcon\"\n  [showHeader]=\"showHeader\"\n  [toggler]=\"toggler\"\n  [collapseIcon]=\"collapseIcon\"\n  [toggleable]=\"toggleable\"\n  (onBeforeToggle)=\"onBeforeToggle.emit($event)\"\n  (onAfterToggle)=\"onAfterToggle.emit($event)\"\n  >\n  <ng-template pTemplate=\"icons\">\n    <ng-content select=\"[freudTemplateIcons]\"></ng-content>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\">\n    <ng-content select=\"[freudTemplateHeader]\"></ng-content>\n  </ng-template>\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"footer\">\n    <ng-content select=\"[freudTemplatefooter]\"></ng-content>\n  </ng-template>\n</p-panel>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "collapsed",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "collapseIcon",
                    "defaultValue": "'freud-icon freud-icon-minus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "expandIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showHeader",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "toggleable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "toggler",
                    "defaultValue": "'icon'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "\"icon\" | \"header\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onAfterToggle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "EventEmitter"
                },
                {
                    "name": "onBeforeToggle",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-panel',\r\n  template: `\r\n    <p-panel\r\n      [header]=\"header\"\r\n      [collapsed]=\"collapsed\"\r\n      [expandIcon]=\"expandIcon\"\r\n      [showHeader]=\"showHeader\"\r\n      [toggler]=\"toggler\"\r\n      [collapseIcon]=\"collapseIcon\"\r\n      [toggleable]=\"toggleable\"\r\n      (onBeforeToggle)=\"onBeforeToggle.emit($event)\"\r\n      (onAfterToggle)=\"onAfterToggle.emit($event)\"\r\n      >\r\n      <ng-template pTemplate=\"icons\">\r\n        <ng-content select=\"[freudTemplateIcons]\"></ng-content>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"header\">\r\n        <ng-content select=\"[freudTemplateHeader]\"></ng-content>\r\n      </ng-template>\r\n      <ng-content></ng-content>\r\n      <ng-template pTemplate=\"footer\">\r\n        <ng-content select=\"[freudTemplatefooter]\"></ng-content>\r\n      </ng-template>\r\n    </p-panel>\r\n  `,\r\n  styleUrls: ['./panel.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-panel',\r\n  }\r\n})\r\nexport class FreudPanelComponent {\r\n\r\n  @Input() header!: string;\r\n  @Input() toggleable: boolean = false;\r\n  @Input() collapsed: boolean = false;\r\n  @Input() showHeader: boolean = true;\r\n  @Input() toggler: 'icon' | 'header' = 'icon';\r\n  @Input() style!: any;\r\n  @Input() expandIcon: string = 'freud-icon freud-icon-plus';\r\n  @Input() collapseIcon: string = 'freud-icon freud-icon-minus';\r\n  @Output() onBeforeToggle = new EventEmitter();\r\n  @Output() onAfterToggle = new EventEmitter();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-panel {\r\n  .p-panel .p-panel-header .p-panel-title {\r\n    font-weight: 700;\r\n  }\r\n  .p-panel .p-panel-header .p-panel-header-icon:focus {\r\n    box-shadow: unset;\r\n  }\r\n  .p-toggleable-content {\r\n    background-color: white;\r\n  }\r\n  .p-panel .p-panel-header .p-panel-header-icon,\r\n  .p-panel-icons .freud-btn:not(.freud-btn-bgcolor).freud-btn-color-ghost .p-button {\r\n    color: $neutral-color-dark-02;\r\n  }\r\n  .p-panel .p-panel-header .p-panel-header-icon:enabled:hover {\r\n    background: #EEE6FC;\r\n    border-color: #EEE6FC;\r\n  }\r\n  .p-panel-icons freud-button .p-button-label {\r\n    display: none;\r\n  }\r\n  .p-panel .p-panel-header {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, 16px);\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n    background-color: $neutral-color-light-01;\r\n    border-color: $neutral-color-light-02;\r\n  }\r\n  .p-panel .p-panel-content {\r\n    border-bottom: 0 none;\r\n    border-color: $neutral-color-light-02;\r\n    color: $neutral-color-dark-02;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    border-bottom-right-radius: 0;\r\n    border-bottom-left-radius: 0;\r\n  }\r\n  .p-panel .p-panel-footer {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    padding: 16px;\r\n    border-radius: 0 0 $border-radius-md $border-radius-md;\r\n    border-color: $neutral-color-light-02;\r\n    color: $neutral-color-dark-04;\r\n    &:empty {\r\n      padding: 8px;\r\n      margin-top: -16px;\r\n    }\r\n    &:not(:empty) {\r\n      border-top: 1px solid $neutral-color-light-02;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./panel.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudPanelMenuComponent",
            "id": "component-FreudPanelMenuComponent-7f4ee7c078fcdb575bc0663690ec99d5c07c9b3abf23f0d04346f11e76dea34d65e480c7c2a272f9a8bd21f95dac4a9f8554c468aefcc3cf34030d221cd68725",
            "file": "projects/web-components/src/components/structure/panel-menu/panel-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-panel-menu",
            "styleUrls": [
                "./panel-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-panelMenu\n  [model]=\"items\"\n  [style]=\"styleParams\">\n</p-panelMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "styleParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\n@Component({\r\n  selector: 'freud-panel-menu',\r\n  template: `\r\n    <p-panelMenu\r\n      [model]=\"items\"\r\n      [style]=\"styleParams\">\r\n    </p-panelMenu>\r\n  `,\r\n  styleUrls: ['./panel-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-panel-menu'\r\n  }\r\n})\r\nexport class FreudPanelMenuComponent {\r\n\r\n  @Input() items!: FreudMenuItem[];\r\n  @Input() styleParams!: any;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-panel-menu {\r\n\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link .p-menuitem-icon,\r\n  .p-panelmenu .p-panelmenu-header > a .p-menuitem-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link .p-menuitem-icon {\r\n    color: $neutral-color-dark-02;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-panel {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-panel:first-child .p-panelmenu-header > a, {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-panel:last-child .p-panelmenu-header:not(.p-highlight) > a {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header:not(.p-highlight):not(.p-disabled) > a:hover {\r\n    background-color: $neutral-color-light-01;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link:not(.p-disabled):hover,\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link:not(.p-disabled):hover span {\r\n    background-color: $brand-color-02;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header:not(.p-highlight) > a {\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header.p-highlight > a {\r\n    border-top-right-radius: $border-radius-md;\r\n    border-top-left-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-panel .p-panelmenu-content {\r\n    border-bottom-right-radius: $border-radius-md;\r\n    border-bottom-left-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-02;\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header > a {\r\n    color: $neutral-color-dark-03;\r\n    border: unset;\r\n    @include typography($font-size-xs, $font-weight-bold, 16px);\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .p-panelmenu .p-panelmenu-header > a:focus,\r\n  .p-panelmenu .p-panelmenu-content .p-menuitem .p-menuitem-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./panel-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudProgressBarComponent",
            "id": "component-FreudProgressBarComponent-ab240991347979c8591cea6f6f68d3961e2242c521770ba6c283b4119fb425f19255a5feb3e5c4d8fe8226a690d3460074fd765cd0f24609f89f35c46a2a03e9",
            "file": "projects/web-components/src/components/feedback/progress-bar/progress-bar.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-progress-bar",
            "styleUrls": [
                "./progress-bar.component.scss"
            ],
            "styles": [],
            "template": "<p-progressBar\n  [value]=\"value\"\n  [showValue]=\"showValue\"\n  [unit]=\"unit\"\n  [mode]=\"mode\">\n</p-progressBar>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'determinate'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "\"determinate\" | \"indeterminate\"",
                    "decorators": []
                },
                {
                    "name": "showValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "unit",
                    "defaultValue": "'%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'freud-progress-bar',\r\n  template: `\r\n    <p-progressBar\r\n      [value]=\"value\"\r\n      [showValue]=\"showValue\"\r\n      [unit]=\"unit\"\r\n      [mode]=\"mode\">\r\n    </p-progressBar>\r\n  `,\r\n  styleUrls: ['./progress-bar.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-progress-bar',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudProgressBarComponent {\r\n  @Input() value: number = 0;\r\n  @Input() showValue:\tboolean\t= true;\r\n  @Input() mode: 'determinate' | 'indeterminate' = 'determinate';\r\n  @Input() unit: string = '%';\r\n  @Input() bgColor: boolean = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-progress-bar:not(.freud-bgcolor) {\r\n  .p-progressbar {\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n  .p-progressbar-value {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-progressbar-determinate .p-progressbar-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n.freud-progress-bar.freud-bgcolor {\r\n  .p-progressbar {\r\n    background-color: $brand-color-04;\r\n  }\r\n  .p-progressbar-value {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-progressbar-determinate .p-progressbar-label {\r\n    color: $brand-color-05;\r\n  }\r\n}\r\n\r\n.freud-progress-bar {\r\n  .p-progressbar {\r\n    border-radius: $border-radius-md;\r\n  }\r\n  .p-progressbar-determinate .p-progressbar-label {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n  .p-progressbar-determinate {\r\n    height: 21px;\r\n  }\r\n  .p-progressbar-indeterminate {\r\n    height: 6px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./progress-bar.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudProgressSpinnerComponent",
            "id": "component-FreudProgressSpinnerComponent-de6e798383cf0a38051067f70af12eb615d0fec6ec3a8b37c866c66bd6267042956346c5185a6e145ae48c39d0ba569c22cd008c103036885a3bb3597f612d4a",
            "file": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-progress-spinner",
            "styleUrls": [
                "./progress-spinner.component.scss"
            ],
            "styles": [],
            "template": "<p-progressSpinner animationDuration=\"1s\"></p-progressSpinner>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n\r\n@Component({\r\n  selector: 'freud-progress-spinner',\r\n  template: `\r\n    <p-progressSpinner animationDuration=\"1s\"></p-progressSpinner>\r\n  `,\r\n  styleUrls: ['./progress-spinner.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-progress-spinner',\r\n    '[class.freud-progress-spinner-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudProgressSpinnerComponent {\r\n  @Input() bgColor: boolean = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n@keyframes freud-progress-spinner-color {\r\n  100%,\r\n  0% {\r\n    stroke: $feedback-color-negative-03;\r\n  }\r\n  33% {\r\n    stroke: $feedback-color-warning-03;\r\n  }\r\n  66% {\r\n    stroke: $feedback-color-positive-03;\r\n  }\r\n}\r\n\r\n.freud-progress-spinner .p-progress-spinner-circle {\r\n  animation: p-progress-spinner-dash 1.5s ease-in-out infinite, freud-progress-spinner-color 6s ease-in-out infinite;\r\n\r\n}\r\n",
                    "styleUrl": "./progress-spinner.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudRadioButtonComponent",
            "id": "component-FreudRadioButtonComponent-996b5652585d768c0213864420f4757795478f501384046816d5a4fa2691c0e92bf64307a59277514348e74daf135139ecff8e698cb94c3b2c92db4b8f51e9b3",
            "file": "projects/web-components/src/components/forms/radio-button/radio-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudRadioButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-radio-button",
            "styleUrls": [
                "./radio-button.component.scss"
            ],
            "styles": [],
            "template": "<p-radioButton\n  [id]=\"id\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [name]=\"name\"\n  [value]=\"radioValue\"\n  [label]=\"label\"\n  [inputId]=\"inputId\"\n\n  (focus)=\"onFocus.emit($event)\"\n  (blur)=\"onBlur.emit($event)\">\n</p-radioButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "radioValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 61
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 63
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-radio-button',\r\n  styleUrls: ['./radio-button.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-radioButton\r\n      [id]=\"id\"\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [name]=\"name\"\r\n      [value]=\"radioValue\"\r\n      [label]=\"label\"\r\n      [inputId]=\"inputId\"\r\n\r\n      (focus)=\"onFocus.emit($event)\"\r\n      (blur)=\"onBlur.emit($event)\">\r\n    </p-radioButton>\r\n  `,\r\n  host: {\r\n    class: 'freud-radio-button',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudRadioButtonComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudRadioButtonComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() bgColor: boolean = false;\r\n  @Input() inputId!: string;\r\n  @Input() name!: string;\r\n  @Input() disabled = false;\r\n  @Input() radioValue!: any;\r\n  @Input() required: boolean = false;\r\n  @Input() id!: string;\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: any;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.modelValueChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-radio-button:not(.freud-bgcolor) {\r\n  .p-radiobutton-label {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-radio-button.freud-bgcolor {\r\n  .p-radiobutton-label {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-radio-button {\r\n  .p-radiobutton .p-radiobutton-box.p-highlight,\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-highlight:hover {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-radiobutton .p-radiobutton-box {\r\n    width: 20px;\r\n    height: 20px;\r\n  }\r\n  .p-radiobutton .p-radiobutton-box .p-radiobutton-icon {\r\n    width: 8px;\r\n    height: 8px\r\n  }\r\n\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box:hover,\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-focus {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-radiobutton:not(.p-radiobutton-disabled) .p-radiobutton-box.p-focus {\r\n    box-shadow: $shadow-focused-zen !important;\r\n  }\r\n  .p-radiobutton-label {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n    font-family: $font-family-base;\r\n  }\r\n}\r\n",
                    "styleUrl": "./radio-button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 69,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 65
                    }
                }
            }
        },
        {
            "name": "FreudRadioButtonExampleComponent",
            "id": "component-FreudRadioButtonExampleComponent-8b895c941271a9a545d23504c32195c2dc3508389d815dc4f82e75e01c17a6b31497762725c5f1629f8a682ea7bb80a7f1c89fdfd33f377cc85ccc35be839973",
            "file": "stories/forms/radio-button/radio-button-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-radio-button-example",
            "styleUrls": [],
            "styles": [],
            "template": "<freud-radio-button\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [label]=\"label ? (label + ' 1'): ''\"\n  [name]=\"'label'\"\n  [radioValue]=\"'item2'\"\n  [bgColor]=\"bgColor\">\n</freud-radio-button>\n<br><br>\n<freud-radio-button\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [label]=\"label ? (label + ' 2'): ''\"\n  [name]=\"'label'\"\n  [radioValue]=\"'item1'\"\n  [bgColor]=\"bgColor\">\n</freud-radio-button>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "selectedItem",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-radio-button-example',\r\n  template: `\r\n    <freud-radio-button\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [label]=\"label ? (label + ' 1'): ''\"\r\n      [name]=\"'label'\"\r\n      [radioValue]=\"'item2'\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-radio-button>\r\n    <br><br>\r\n    <freud-radio-button\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [label]=\"label ? (label + ' 2'): ''\"\r\n      [name]=\"'label'\"\r\n      [radioValue]=\"'item1'\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-radio-button>\r\n  `\r\n})\r\nexport class FreudRadioButtonExampleComponent {\r\n\r\n  selectedItem: string = '';\r\n  @Input() value!: any;\r\n  @Input() label!: string;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": ""
        },
        {
            "name": "FreudRatingComponent",
            "id": "component-FreudRatingComponent-fa0d110f8424348af883e2ab2c946ce064e3b27f6e1fe3d95cd881e808d03dde26549e239788deb002ec5cac8e6957a99b83dc9f57f2a19041b482b6c85e281e",
            "file": "projects/web-components/src/components/feedback/rating/rating.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-rating",
            "styleUrls": [
                "./rating.component.scss"
            ],
            "styles": [],
            "template": "<p-rating\n  [(ngModel)]=\"value\"\n  [stars]=\"stars\"\n  [disabled]=\"disabled\"\n  [iconOnClass]=\"iconOnClass\"\n  [iconOffClass]=\"iconOffClass\"\n  [cancel]=\"false\"\n  (onRate)=\"onRateChange($event)\">\n</p-rating>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "iconOffClass",
                    "defaultValue": "'freud-icon freud-icon-star'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconOnClass",
                    "defaultValue": "'freud-icon freud-icon-star-fill'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "stars",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCancel",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onRate",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onRateChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-rating',\r\n  template: `\r\n    <p-rating\r\n      [(ngModel)]=\"value\"\r\n      [stars]=\"stars\"\r\n      [disabled]=\"disabled\"\r\n      [iconOnClass]=\"iconOnClass\"\r\n      [iconOffClass]=\"iconOffClass\"\r\n      [cancel]=\"false\"\r\n      (onRate)=\"onRateChange($event)\">\r\n    </p-rating>\r\n  `,\r\n  styleUrls: ['./rating.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-rating',\r\n    '[class.freud-rating-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudRatingComponent {\r\n\r\n  @Input() value: number = 0;\r\n  @Input() stars: number = 5;\r\n  @Input() disabled: boolean = false;\r\n  @Input() iconOnClass: string = 'freud-icon freud-icon-star-fill';\r\n  @Input() iconOffClass: string = 'freud-icon freud-icon-star';\r\n  @Input() bgColor: boolean = false;\r\n  @Output() onRate: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onCancel: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  onRateChange(event: any) {\r\n    this.onRate.emit(event);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-rating {\r\n  .p-rating:not(.p-disabled):not(.p-readonly) .p-rating-icon:hover,\r\n  .p-rating .p-rating-icon.freud-icon-star-fill {\r\n    color: $feedback-color-warning-pure;\r\n  }\r\n  .p-rating .p-rating-icon:not(.freud-icon-star-fill) {\r\n    color: $neutral-color-dark-01;\r\n  }\r\n\r\n  .p-rating .p-rating-icon {\r\n    font-size: 16px;\r\n  }\r\n}\r\n.freud-rating.freud-rating-bgcolor {\r\n  .p-rating .p-rating-icon:not(.freud-icon-star-fill) {\r\n    color: $neutral-color-dark-01;\r\n  }\r\n}\r\n\r\n.freud-rating .p-rating .p-rating-icon:focus {\r\n  box-shadow: unset;\r\n}\r\n",
                    "styleUrl": "./rating.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudReactiveFormExampleComponent",
            "id": "component-FreudReactiveFormExampleComponent-e4cc6c5cbaaa35bd1a80058492975df27a4b1f39120b2121c04786b5e70f4a55cb5ba936a9271388ccf63afe754be6bd60a20fa0ee12fd234654553eca75d9e5",
            "file": "stories/forms/reactive-form-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-reactive-form-example",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<form [formGroup]=\"formParams\" (ngSubmit)=\"onSubmit()\">\n  <freud-input-text label=\"Name\" formControlName=\"name\"></freud-input-text>\n  <freud-input-text label=\"email\" formControlName=\"email\"></freud-input-text>\n  <button type=\"submit\">Enviar</button>\n  <div>\n    <p>FormValid: {{formParams.valid}}</p>\n    <p>FormParams: {{formParams.value | json}}</p>\n  </div>\n</form>\n<freud-input-text label=\"ngModel\" [(ngModel)]=\"nameNgModel\"></freud-input-text>\n<p>Value NgModel {{nameNgModel}}</p>\n\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "formParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "nameNgModel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-reactive-form-example',\r\n  template: `\r\n    <form [formGroup]=\"formParams\" (ngSubmit)=\"onSubmit()\">\r\n      <freud-input-text label=\"Name\" formControlName=\"name\"></freud-input-text>\r\n      <freud-input-text label=\"email\" formControlName=\"email\"></freud-input-text>\r\n      <button type=\"submit\">Enviar</button>\r\n      <div>\r\n        <p>FormValid: {{formParams.valid}}</p>\r\n        <p>FormParams: {{formParams.value | json}}</p>\r\n      </div>\r\n    </form>\r\n    <freud-input-text label=\"ngModel\" [(ngModel)]=\"nameNgModel\"></freud-input-text>\r\n    <p>Value NgModel {{nameNgModel}}</p>\r\n\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudReactiveFormExampleComponent implements OnInit {\r\n\r\n  formParams!: FormGroup;\r\n  nameNgModel: string = '';\r\n  constructor() {}\r\n\r\n  ngOnInit() {\r\n    this.formParams = new FormGroup({\r\n      name: new FormControl('', [Validators.required, Validators.minLength(2)]),\r\n      email: new FormControl('', [Validators.email])\r\n    })\r\n  }\r\n\r\n  onSubmit() {\r\n    this.formParams.markAsUntouched();\r\n    console.log('formParams', this.formParams);\r\n    console.log('formParams >>> Value', this.formParams.value);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "implements": [
                "OnInit"
            ]
        },
        {
            "name": "FreudScrollPanelComponent",
            "id": "component-FreudScrollPanelComponent-0c49d08dbcd2b524041b10f9ee9dc05a6395ba21b2463cf2af897dbf4efcaeb5a1bdc47da66fdc9d5a66a45190c24a4b725b393561b3ee8d14c2cd119d41c8a3",
            "file": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-panel",
            "styleUrls": [
                "./scroll-panel.component.scss"
            ],
            "styles": [],
            "template": "<p-scrollPanel [style]=\"style\">\n  <ng-content></ng-content>\n</p-scrollPanel>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-scroll-panel',\r\n  template: `\r\n      <p-scrollPanel [style]=\"style\">\r\n        <ng-content></ng-content>\r\n      </p-scrollPanel>\r\n  `,\r\n  styleUrls: ['./scroll-panel.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-scroll-panel',\r\n  }\r\n})\r\nexport class FreudScrollPanelComponent {\r\n\r\n  @Input() style!: any;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-scroll-panel {\r\n\r\n  .p-scrollpanel, p-scrollpanel-bar {\r\n    background-color: $neutral-color-white;\r\n    padding: 14px 14px 14px 14px;\r\n    border-radius: $border-radius-md;\r\n  }\r\n  .p-scrollpanel .p-scrollpanel-bar {\r\n    margin-left: -20px;\r\n    background-color: $neutral-color-dark-01;\r\n  }\r\n  .p-scrollpanel-content {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./scroll-panel.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudScrollTopComponent",
            "id": "component-FreudScrollTopComponent-c5113d66a85a9b93c702f605495157de47b6c821966b906c2bd4f8827a16b6c26c1b90596620e6761a5fa7d5b2f69d8f1a774408a9b9d7d2a0951381103ef054",
            "file": "projects/web-components/src/components/others/scroll-top/scroll-top.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-top",
            "styleUrls": [
                "./scroll-top.component.scss"
            ],
            "styles": [],
            "template": "<p-scrollTop #element [threshold]=\"threshold\"\n             [target]=\"target\"\n             [icon]=\"icon\"\n             styleClass=\"freud-scrolltop\"\n             [behavior]=\"behavior\"></p-scrollTop>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "behavior",
                    "defaultValue": "'smooth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "\"smooth\" | \"auto\"",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "defaultValue": "'window'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "\"window\" | \"parent\"",
                    "decorators": []
                },
                {
                    "name": "threshold",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "element",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ScrollTop",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'element'"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "bindParentScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "unbindParentScrollListener",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Input, OnInit, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { ScrollTop } from \"primeng/scrolltop\";\r\n\r\n@Component({\r\n  selector: 'freud-scroll-top',\r\n  template: `\r\n    <p-scrollTop #element [threshold]=\"threshold\"\r\n                 [target]=\"target\"\r\n                 [icon]=\"icon\"\r\n                 styleClass=\"freud-scrolltop\"\r\n                 [behavior]=\"behavior\"></p-scrollTop>\r\n  `,\r\n  styleUrls: ['./scroll-top.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-scroll-top',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudScrollTopComponent implements AfterViewInit {\r\n  @Input() threshold: number = 400;\r\n  @Input() target: 'window' | 'parent' = 'window';\r\n  @Input() behavior: 'smooth' | 'auto' = 'smooth';\r\n  @Input() bgColor: boolean = false;\r\n  @Input() icon: string = 'freud-icon freud-icon-chevron-up';\r\n  @ViewChild('element') element!: ScrollTop;\r\n\r\n  ngAfterViewInit() {\r\n    if (this.target === 'parent') {\r\n      this.element.bindParentScrollListener = this.bindParentScrollListener.bind(this);\r\n      this.element.unbindParentScrollListener = this.unbindParentScrollListener.bind(this);\r\n      this.element.onClick = this.onClick.bind(this);\r\n      this.element.bindParentScrollListener();\r\n    }\r\n  }\r\n\r\n  bindParentScrollListener() {\r\n    this.element.scrollListener = () => {\r\n      this.element.checkVisibility(this.element.el.nativeElement.parentElement.parentElement.scrollTop);\r\n    };\r\n\r\n    this.element.el.nativeElement.parentElement.parentElement.addEventListener('scroll', this.element.scrollListener);\r\n  }\r\n\r\n  onClick() {\r\n    let scrollElement = this.target === 'window' ? window : this.element.el.nativeElement.parentElement.parentElement;\r\n    scrollElement.scroll({\r\n      top: 0,\r\n      behavior: this.behavior\r\n    });\r\n  }\r\n\r\n  unbindParentScrollListener() {\r\n    if (this.element.scrollListener) {\r\n      this.element.el.nativeElement.parentElement.parentElement.removeEventListener('scroll', this.element.scrollListener);\r\n      this.element.scrollListener = null;\r\n    }\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-scroll-top {\r\n  .p-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n.freud-scroll-top.freud-bgcolor {\r\n  .p-scrolltop.p-link {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-scrolltop .p-scrolltop-icon {\r\n    color: $brand-color-pure;\r\n  }\r\n  .p-scrolltop.p-link:hover {\r\n    background-color: $brand-color-04;\r\n    .p-scrolltop-icon {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n}\r\n\r\n.freud-scroll-top:not(.freud-bgcolor) {\r\n  .p-scrolltop.p-link {\r\n    background-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-scrolltop .p-scrolltop-icon {\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-scrolltop.p-link:hover {\r\n    background-color: $brand-color-04;\r\n    .p-scrolltop-icon {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./scroll-top.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ]
        },
        {
            "name": "FreudScrollTopComponent",
            "id": "component-FreudScrollTopComponent-02d8b62bc5e0f2206ebc4b3ff173d7815c2a6425ad0e325bad12b3aebd761865f54d67f943fd1843753da50530a344acf6dbc69e7038041da828167ce5b3618a-1",
            "file": "projects/web-components/src/components/others/timeline/timeline.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-scroll-top",
            "styleUrls": [
                "./timeline.component.scss"
            ],
            "styles": [],
            "template": "<p-timeline [threshold]=\"threshold\" [target]=\"target\" [behavior]=\"behavior\"></p-timeline>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "behavior",
                    "defaultValue": "'smooth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "\"smooth\" | \"auto\"",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "defaultValue": "'freud-icon freud-icon-chevron-up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "target",
                    "defaultValue": "'window'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "\"window\" | \"parent\"",
                    "decorators": []
                },
                {
                    "name": "threshold",
                    "defaultValue": "400",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-scroll-top',\r\n  template: `\r\n    <p-timeline [threshold]=\"threshold\" [target]=\"target\" [behavior]=\"behavior\"></p-timeline>\r\n  `,\r\n  styleUrls: ['./timeline.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-scroll-top',\r\n  }\r\n})\r\nexport class FreudScrollTopComponent {\r\n\r\n  @Input() threshold: number = 400;\r\n  @Input() target: 'window' | 'parent' = 'window';\r\n  @Input() behavior: 'smooth' | 'auto' = 'smooth';\r\n  @Input() icon: string = 'freud-icon freud-icon-chevron-up';\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n",
                    "styleUrl": "./timeline.component.scss"
                }
            ],
            "stylesData": "",
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "FreudScrollTopComponent-1"
        },
        {
            "name": "FreudSelectButtonComponent",
            "id": "component-FreudSelectButtonComponent-efcc98b1d7d301c28dc1efa7d6df2b5fde829d4053a11afea2e53299f78da2d83a656574469f8a633cb13e2794c66a709fce29987fd8abe9e7ffe4d6a3dafb73",
            "file": "projects/web-components/src/components/others/select-button/select-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSelectButtonComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-select-button",
            "styleUrls": [
                "./select-button.component.scss"
            ],
            "styles": [],
            "template": "<p-selectButton\n  [options]=\"options\"\n  [(ngModel)]=\"selectedOption\"\n  [multiple]=\"multiple\"\n  [tabindex]=\"tabindex\"\n  [optionDisabled]=\"optionDisabled\"\n  [optionLabel]=\"optionLabel\"\n  [disabled]=\"disabled\"\n  (onChange)=\"selectedOptionChange.emit($event)\">\n</p-selectButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "selectedOption",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 45,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-select-button',\r\n  template: `\r\n    <p-selectButton\r\n      [options]=\"options\"\r\n      [(ngModel)]=\"selectedOption\"\r\n      [multiple]=\"multiple\"\r\n      [tabindex]=\"tabindex\"\r\n      [optionDisabled]=\"optionDisabled\"\r\n      [optionLabel]=\"optionLabel\"\r\n      [disabled]=\"disabled\"\r\n      (onChange)=\"selectedOptionChange.emit($event)\">\r\n    </p-selectButton>\r\n  `,\r\n  styleUrls: ['./select-button.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-select-button',\r\n    '[class.freud-select-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudSelectButtonComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudSelectButtonComponent implements ControlValueAccessor {\r\n\r\n  @Input() options!: any[];\r\n  @Input() optionLabel!: string;\r\n  @Input() selectedOption!: any;\r\n  @Input() multiple: boolean = false;\r\n  @Input() disabled: boolean = false;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() optionDisabled!: string;\r\n  @Input() tabindex: number = 0;\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() selectedOptionChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _value!: any;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.modelValueChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-select-button.freud-select-bgcolor {\r\n  .p-selectbutton .p-button.p-highlight {\r\n    color: $brand-color-04;\r\n    background: $neutral-color-white;\r\n    border: 1px solid $neutral-color-white;\r\n  }\r\n  .p-selectbutton .p-button {\r\n    border: 1px solid $brand-color-05;\r\n    background: $brand-color-04;\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-select-button {\r\n  .p-selectbutton .p-button {\r\n    @include typography($font-size-xxs, $font-weight-bold, $font-size-xxs);\r\n    border-radius: $border-radius-md;\r\n  }\r\n}\r\n\r\n.p-button:focus {\r\n  box-shadow: 0 0 0 1px $brand-color-pure;\r\n}\r\n\r\n\r\n.freud-select-button:not(.freud-select-bgcolor) {\r\n  .p-selectbutton .p-button.p-highlight {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n  }\r\n  .p-selectbutton .p-button {\r\n    border: 1px solid $neutral-color-light-04;\r\n    color: $neutral-color-dark-03;\r\n  }\r\n}\r\n",
                    "styleUrl": "./select-button.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 59,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 55
                    }
                }
            }
        },
        {
            "name": "FreudSelectComponent",
            "id": "component-FreudSelectComponent-839ac20152a92ae9a5a83d9043da6649d0a49cb4fc38de631d947d28b3b8b23ccb6b304bace7ad609320b7d6626524908027f232b01de1a99bbc6e09d36a9d20",
            "file": "projects/web-components/src/components/forms/select/select.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSelectComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-select",
            "styleUrls": [
                "./select.component.scss"
            ],
            "styles": [],
            "template": "<div class=\"freud-field\" [class.disabled]=\"disabled\">\n  <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\n  <p-dropdown\n    [id]=\"id\"\n    [class.ng-invalid]=\"invalid\"\n    [class.ng-dirty]=\"invalid\"\n    [(ngModel)]=\"value\"\n    [optionLabel]=\"optionLabel\"\n    [optionValue]=\"optionValue\"\n    [optionDisabled]=\"optionDisabled\"\n    [optionGroupLabel]=\"optionGroupLabel\"\n    [optionGroupChildren]=\"optionGroupChildren\"\n    [placeholder]=\"placeholder || ''\"\n    [virtualScroll]=\"virtualScroll\"\n    [dropdownIcon]=\"dropdownIcon\"\n    [emptyMessage]=\"emptyMessage\"\n    [itemSize]=\"itemSize\"\n    [disabled]=\"disabled\"\n    [required]=\"required\"\n    [options]=\"options\"\n    (onFocus)=\"onFocus.emit($event)\"\n    (onBlur)=\"onBlur.emit($event)\"\n    (onChange)=\"onChange.emit($event)\"\n    (onFilter)=\"onFilter.emit($event)\"\n    (onShow)=\"onShow.emit($event)\"\n    (onHide)=\"onHide.emit($event)\"\n    (onClear)=\"onClear.emit($event)\"\n\n  ></p-dropdown>\n  <small\n    [class.disabled]=\"disabled\"\n    *ngIf=\"helpText\"\n    class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "autoClear",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "characterPattern",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 81,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "dropdownIcon",
                    "defaultValue": "'freud-icon freud-icon-chevron-down'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Sem resultados'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "helpText",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 83,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 68,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "itemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 70,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionDisabled",
                    "defaultValue": "'disabled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupChildren",
                    "defaultValue": "'items'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionGroupLabel",
                    "defaultValue": "'label'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 76,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 73,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 74,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onBlur",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClear",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 94,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFilter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 91,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onFocus",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 85,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 93,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 92,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 95,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 98,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 115
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 117
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 108,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-select',\r\n  styleUrls: ['./select.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <div class=\"freud-field\" [class.disabled]=\"disabled\">\r\n      <label for=\"{{id}}\" class=\"freud-typography bodySemibold1-2 freud-label\" *ngIf=\"label\">{{label}}</label>\r\n      <p-dropdown\r\n        [id]=\"id\"\r\n        [class.ng-invalid]=\"invalid\"\r\n        [class.ng-dirty]=\"invalid\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionGroupLabel]=\"optionGroupLabel\"\r\n        [optionGroupChildren]=\"optionGroupChildren\"\r\n        [placeholder]=\"placeholder || ''\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [dropdownIcon]=\"dropdownIcon\"\r\n        [emptyMessage]=\"emptyMessage\"\r\n        [itemSize]=\"itemSize\"\r\n        [disabled]=\"disabled\"\r\n        [required]=\"required\"\r\n        [options]=\"options\"\r\n        (onFocus)=\"onFocus.emit($event)\"\r\n        (onBlur)=\"onBlur.emit($event)\"\r\n        (onChange)=\"onChange.emit($event)\"\r\n        (onFilter)=\"onFilter.emit($event)\"\r\n        (onShow)=\"onShow.emit($event)\"\r\n        (onHide)=\"onHide.emit($event)\"\r\n        (onClear)=\"onClear.emit($event)\"\r\n\r\n      ></p-dropdown>\r\n      <small\r\n        [class.disabled]=\"disabled\"\r\n        *ngIf=\"helpText\"\r\n        class=\"help-text freud-typography bodyRegularAuto\">{{helpText}}</small>\r\n    </div>\r\n  `,\r\n  host: {\r\n    class: 'freud-select',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudSelectComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudSelectComponent implements ControlValueAccessor {\r\n  @Input() label: string = '';\r\n  @Input() options!: any[];\r\n  @Input() helpText: string = '';\r\n  @Input() placeholder: string = '';\r\n  @Input() invalid: boolean = false;\r\n  @Input() virtualScroll: boolean = false;\r\n  @Input() itemSize!: number;\r\n  @Input() emptyMessage: string = 'Sem resultados';\r\n  @Input() dropdownIcon: string = 'freud-icon freud-icon-chevron-down';\r\n  @Input() optionLabel!: string;\r\n  @Input() optionValue!: string;\r\n  @Input() optionDisabled: string = 'disabled';\r\n  @Input() optionGroupLabel: string = 'label';\r\n  @Input() optionGroupChildren: string = 'items';\r\n  @Input() characterPattern: string = '';\r\n  @Input() autoClear: boolean = true;\r\n  @Input() bgColor = false;\r\n  @Input() disabled = false;\r\n  @Input() required: boolean = false;\r\n  @Input() id!: string;\r\n\r\n  @Output() onFocus: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onBlur: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() onFilter: EventEmitter<any> = new EventEmitter();\r\n  @Output() onShow: EventEmitter<any> = new EventEmitter();\r\n  @Output() onHide: EventEmitter<any> = new EventEmitter();\r\n  @Output() onClear: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n\r\n  private _value!: string;\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onModelChange: any = () => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.valueChange.emit(v);\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-select:not(.freud-bgcolor) {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-dark-04;\r\n  }\r\n}\r\n\r\n.freud-select.freud-bgcolor {\r\n  .freud-label, .help-text {\r\n    color: $neutral-color-white;\r\n  }\r\n}\r\n\r\n.freud-select {\r\n  .help-text {\r\n    margin-top: $spacing-size-quark;\r\n  }\r\n  .freud-field {\r\n    display: flex;\r\n    flex-flow: column;\r\n  }\r\n  .freud-label {\r\n    margin-bottom: $spacing-size-quark;\r\n  }\r\n\r\n  .p-dropdown-panel {\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n\r\n  .p-inputtext {\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dropdown {\r\n    border-radius: $border-radius-md;\r\n    border: 1px solid $neutral-color-light-03;\r\n    width: 100%;\r\n  }\r\n\r\n  .p-inputtext.ng-invalid {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n\r\n  .p-dropdown:not(.p-disabled).p-focus {\r\n    box-shadow: $shadow-focused-zen;\r\n    border-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-dropdown:not(.p-disabled):hover {\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-dropdown .p-dropdown-panel {\r\n    border-radius: $border-radius-md;\r\n    margin-top: 1px;\r\n  }\r\n\r\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item {\r\n    padding: 12px 1rem;\r\n    color: $neutral-color-dark-03;\r\n    transition: box-shadow 0.2s;\r\n    border-radius: 0;\r\n  }\r\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item:not(.p-highlight):not(.p-disabled):hover {\r\n    background-color: $brand-color-02;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .p-dropdown-panel .p-dropdown-items .p-dropdown-item.p-highlight {\r\n    background-color: $brand-color-01;\r\n    color: $brand-color-pure;\r\n  }\r\n}\r\n\r\n",
                    "styleUrl": "./select.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 127,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 123
                    }
                }
            }
        },
        {
            "name": "FreudSkeletonComponent",
            "id": "component-FreudSkeletonComponent-a278002852d4d2cf8f918bf502140d5aea2c2f13d91d6b897f80d0d4af972a33d4d34e1b9f7613e8632aebfd418de7200fd2d3e6006405287e9ca8099afa5268",
            "file": "projects/web-components/src/components/feedback/skeleton/skeleton.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-skeleton",
            "styleUrls": [
                "./skeleton.component.scss"
            ],
            "styles": [],
            "template": "<p-skeleton\n  [width]=\"width\"\n  [height]=\"height\"\n></p-skeleton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "'100px'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "'100%'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'freud-skeleton',\r\n  template: `\r\n    <p-skeleton\r\n      [width]=\"width\"\r\n      [height]=\"height\"\r\n    ></p-skeleton>\r\n  `,\r\n  styleUrls: ['./skeleton.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-skeleton',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudSkeletonComponent {\r\n  @Input() width: string = '100%';\r\n  @Input() height: string = '100px';\r\n  @Input() bgColor: boolean = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-skeleton:not(.freud-bgcolor) {\r\n  .p-skeleton {\r\n    background-color: $neutral-color-light-02;\r\n  }\r\n}\r\n.freud-skeleton.freud-bgcolor {\r\n  .p-skeleton {\r\n    background-color: $brand-color-06;\r\n  }\r\n  .p-skeleton:after {\r\n    background: linear-gradient(\r\n        90deg, rgba(255, 255, 255, 0),\r\n        rgba(255, 255, 255, 0.15), rgba(255, 255, 255, 0));\r\n  }\r\n}\r\n",
                    "styleUrl": "./skeleton.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSlideMenuComponent",
            "id": "component-FreudSlideMenuComponent-c0ddb41e9b272b05d2ca2418758eef0bd95bbad1560987038463219a50195765d2541cdcba867e2a5220515a62cc8f6abfde553b2c64ddd1a44eed315db5323b",
            "file": "projects/web-components/src/components/structure/slide-menu/slide-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-slide-menu",
            "styleUrls": [
                "./slide-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-slideMenu #slideMenu [model]=\"items\"></p-slideMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "slide",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SlideMenu",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'slideMenu'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\nimport { SlideMenu } from \"primeng/slidemenu\";\r\n\r\n@Component({\r\n  selector: 'freud-slide-menu',\r\n  template: `\r\n    <p-slideMenu #slideMenu [model]=\"items\"></p-slideMenu>\r\n  `,\r\n  styleUrls: ['./slide-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-slide-menu',\r\n  }\r\n})\r\nexport class FreudSlideMenuComponent {\r\n\r\n  @Input() items!: FreudMenuItem[];\r\n  @ViewChild('slideMenu') slide!: SlideMenu;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-slide-menu {\r\n  .p-slidemenu .p-menuitem-link .p-menuitem-text {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 16px);\r\n  }\r\n  .p-slidemenu {\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-1;\r\n  }\r\n  .p-slidemenu .p-slidemenu-wrapper, .p-slidemenu .p-slidemenu-rootlist {\r\n    width: 100% !important;\r\n  }\r\n  .p-slidemenu .p-menuitem-link:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n",
                    "styleUrl": "./slide-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSliderComponent",
            "id": "component-FreudSliderComponent-10aafa630af0d6eb23838f49c1e23a267d90d73518ebcd799d79035cddcf1d455e3e892ffd4534483c583d2923fec022f5d2f71e96dc0abe933dd808df905200",
            "file": "projects/web-components/src/components/others/slider/slider.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSliderComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-slider",
            "styleUrls": [
                "./slider.component.scss"
            ],
            "styles": [],
            "template": "<p-slider\n  [(ngModel)]=\"value\"\n  [min]=\"min\"\n  [max]=\"max\"\n  [step]=\"step\"\n  [range]=\"range\"\n  [orientation]=\"orientation\"\n  [tabindex]=\"tabindex\"\n  [disabled]=\"disabled\"\n  (ngModelChange)=\"modelValueChange()\"\n  (onChange)=\"selectedOptionChange.emit($event)\">\n</p-slider>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "max",
                    "defaultValue": "100",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "min",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "orientation",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "range",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "step",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "tabindex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "selectedOptionChange",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 46,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 54
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, forwardRef, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-slider',\r\n  template: `\r\n    <p-slider\r\n      [(ngModel)]=\"value\"\r\n      [min]=\"min\"\r\n      [max]=\"max\"\r\n      [step]=\"step\"\r\n      [range]=\"range\"\r\n      [orientation]=\"orientation\"\r\n      [tabindex]=\"tabindex\"\r\n      [disabled]=\"disabled\"\r\n      (ngModelChange)=\"modelValueChange()\"\r\n      (onChange)=\"selectedOptionChange.emit($event)\">\r\n    </p-slider>\r\n  `,\r\n  styleUrls: ['./slider.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-slider',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudSliderComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudSliderComponent implements ControlValueAccessor {\r\n  @Input() min: number = 0;\r\n  @Input() max: number = 100;\r\n  @Input() step: number = 1;\r\n  @Input() range: boolean = false;\r\n  @Input() orientation: 'horizontal' | 'vertical' = 'horizontal';\r\n  @Input() disabled: boolean = false;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() tabindex: number = 0;\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() selectedOptionChange: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  private _value!: any;\r\n\r\n  modelValueChange() {\r\n    this.valueChange.emit(this.value);\r\n  }\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.modelValueChange();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: string){\r\n    this.value = newValue;\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-slider:not(.freud-bgcolor) {\r\n  .p-slider .p-slider-range {\r\n    background-color: $brand-color-pure;\r\n  }\r\n  .p-slider .p-slider-handle {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n  }\r\n  .p-slider {\r\n    background: $neutral-color-light-02;\r\n  }\r\n}\r\n\r\n.freud-slider.freud-bgcolor {\r\n  .p-slider .p-slider-range {\r\n    background-color: $neutral-color-white;\r\n  }\r\n  .p-slider .p-slider-handle {\r\n    background-color: $neutral-color-white;\r\n    border-color: $neutral-color-white;\r\n  }\r\n  .p-slider {\r\n    background: $brand-color-04;\r\n  }\r\n}\r\n.freud-slider {\r\n  .p-slider .p-slider-handle {\r\n    width: 16px;\r\n    height: 16px;\r\n  }\r\n  .p-slider.p-slider-vertical .p-slider-handle {\r\n    margin-left: -8px;\r\n    margin-bottom: -8px;\r\n  }\r\n\r\n  .p-slider .p-slider-range {\r\n    border-radius: $border-radius-md;\r\n  }\r\n\r\n  .p-slider .p-slider-handle:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n",
                    "styleUrl": "./slider.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 60,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 56
                    }
                }
            }
        },
        {
            "name": "FreudSortIcon",
            "id": "component-FreudSortIcon-6fdff9df5f83c89a77c69a6a3cbf604652c79e6e4e1e2fad544162ee0f8330c4c1ba5b62cea6ce18b9486393af9c8640a18da378975d062ba7d5d59031148494",
            "file": "projects/web-components/src/components/others/table/table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-sortIcon",
            "styleUrls": [],
            "styles": [],
            "template": "<i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\n   [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\n<span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 176,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cd",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ChangeDetectorRef",
                    "optional": false,
                    "description": "",
                    "line": 182,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "dt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudTableComponent",
                    "optional": false,
                    "description": "",
                    "line": 182,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "sortOrder",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 180
                },
                {
                    "name": "subscription",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 178
                }
            ],
            "methodsClass": [
                {
                    "name": "getBadgeValue",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 227,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getMultiSortMetaIndex",
                    "args": [],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 210,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isMultiSorted",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 233,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 185,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnDestroy",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 237,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onClick",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 195,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateSortState",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 199,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren, Directive, HostListener,\r\n  Input, OnDestroy, OnInit,\r\n  QueryList,\r\n  TemplateRef, ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FreudTemplate } from \"../../directive/template\";\r\nimport { Table } from \"primeng/table\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { DomHandler } from \"primeng/dom\";\r\n\r\n@Component({\r\n  selector: 'freud-table',\r\n  template: `\r\n    <p-table\r\n      #tableRef\r\n      [value]=\"value\"\r\n      [columns]=\"columns\"\r\n      [style]=\"style\">\r\n\r\n      <ng-template pTemplate=\"caption\">\r\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"header\" let-columns>\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\r\n      </ng-template>\r\n      <ng-content></ng-content>\r\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n        <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"summary\">\r\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\r\n      </ng-template>\r\n    </p-table>\r\n  `,\r\n  styleUrls: ['./table.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-table',\r\n  }\r\n})\r\nexport class FreudTableComponent implements AfterContentInit {\r\n\r\n  @Input() value!: any[];\r\n  @Input() style!: string;\r\n  @Input() columns!: any[];\r\n  headerTemplate!: TemplateRef<any>;\r\n  headerGroupedTemplate!: TemplateRef<any>;\r\n  bodyTemplate!: TemplateRef<any>;\r\n  captionTemplate!: TemplateRef<any>;\r\n  summaryTemplate!: TemplateRef<any>;\r\n  @ContentChildren(FreudTemplate) templates!: QueryList<FreudTemplate>;\r\n  @ViewChild('tableRef') tableRef!: Table;\r\n\r\n  ngAfterContentInit() {\r\n    this.templates.forEach((item) => {\r\n      switch (item.getType()) {\r\n        case 'caption':\r\n          this.captionTemplate = item.template;\r\n          break;\r\n\r\n        case 'header':\r\n          this.headerTemplate = item.template;\r\n          break;\r\n\r\n        case 'headergrouped':\r\n          this.headerGroupedTemplate = item.template;\r\n          break;\r\n\r\n        case 'body':\r\n          this.bodyTemplate = item.template;\r\n          break;\r\n        case 'summary':\r\n          this.summaryTemplate = item.template;\r\n          break;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[freudSortableColumn]',\r\n  host: {\r\n    class: 'p-element',\r\n    '[class.p-sortable-column]': 'isEnabled()',\r\n    '[class.p-highlight]': 'sorted',\r\n    '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\r\n    '[attr.role]': '\"columnheader\"',\r\n    '[attr.aria-sort]': 'sortOrder'\r\n  }\r\n})\r\nexport class FreudSortableColumn implements AfterViewInit, OnDestroy {\r\n  @Input('freudSortableColumn') field!: string;\r\n\r\n  @Input() freudSortableColumnDisabled!: boolean;\r\n\r\n  sorted!: boolean;\r\n\r\n  sortOrder!: string;\r\n\r\n  subscription!: Subscription;\r\n\r\n  constructor(public dt: FreudTableComponent) {\r\n    if (this.isEnabled()) {\r\n      setTimeout(() => {\r\n        this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta) => {\r\n          this.updateSortState();\r\n        });\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.isEnabled()) {\r\n      this.updateSortState();\r\n    }\r\n  }\r\n\r\n  updateSortState() {\r\n    this.sorted = this.dt.tableRef?.isSorted(this.field);\r\n    this.sortOrder = this.sorted ? (this.dt.tableRef.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent) {\r\n    if (this.isEnabled() && !this.isFilterElement(<HTMLElement>event.target)) {\r\n      this.updateSortState();\r\n      this.dt.tableRef.sort({\r\n        originalEvent: event,\r\n        field: this.field\r\n      });\r\n\r\n      DomHandler.clearSelection();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.enter', ['$event'])\r\n  onEnterKey(event: MouseEvent) {\r\n    this.onClick(event);\r\n  }\r\n\r\n  isEnabled() {\r\n    return !this.freudSortableColumnDisabled;\r\n  }\r\n\r\n  isFilterElement(element: HTMLElement) {\r\n    return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-sortIcon',\r\n  template: `\r\n        <i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\r\n           [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\r\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\r\n    `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'p-element'\r\n  }\r\n})\r\nexport class FreudSortIcon implements AfterViewInit, OnDestroy {\r\n  @Input() field!: string;\r\n\r\n  subscription!: Subscription;\r\n\r\n  sortOrder: number = 0;\r\n\r\n  constructor(public dt: FreudTableComponent, public cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.cd.detectChanges();\r\n    setTimeout(() => {\r\n      this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta: any) => {\r\n        this.updateSortState();\r\n      });\r\n    }, 3000);\r\n    this.updateSortState();\r\n  }\r\n\r\n  onClick(event: any) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  updateSortState() {\r\n    if (this.dt.tableRef?.sortMode === 'single') {\r\n      this.sortOrder = this.dt.tableRef?.isSorted(this.field) ? this.dt.tableRef.sortOrder : 0;\r\n    } else if (this.dt.tableRef?.sortMode === 'multiple') {\r\n      let sortMeta = this.dt.tableRef.getSortMeta(this.field);\r\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getMultiSortMetaIndex() {\r\n    let multiSortMeta = this.dt.tableRef._multiSortMeta;\r\n    let index = -1;\r\n\r\n    if (multiSortMeta && this.dt.tableRef.sortMode === 'multiple' && (this.dt.tableRef.showInitialSortBadge || multiSortMeta.length > 1)) {\r\n      for (let i = 0; i < multiSortMeta.length; i++) {\r\n        let meta = multiSortMeta[i];\r\n        if (meta.field === this.field || meta.field === this.field) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  getBadgeValue() {\r\n    let index = this.getMultiSortMetaIndex();\r\n\r\n    return this.dt.tableRef.groupRowsBy && index > -1 ? index : index + 1;\r\n  }\r\n\r\n  isMultiSorted() {\r\n    return this.dt.tableRef?.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 180,
                "jsdoctags": [
                    {
                        "name": "dt",
                        "type": "FreudTableComponent",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "cd",
                        "type": "ChangeDetectorRef",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "AfterViewInit",
                "OnDestroy"
            ]
        },
        {
            "name": "FreudSpeedDialComponent",
            "id": "component-FreudSpeedDialComponent-2889fdfac719af75232e37a074359a2707612ad3bd9019dd36558ff0a9f99505ac36b74122cdf5d506e0ecf1e5c0c758e968eecf6b1c38beec34cdcaa22d840a",
            "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-speed-dial",
            "styleUrls": [
                "./speed-dial.component.scss"
            ],
            "styles": [],
            "template": "<p-speedDial\n  [id]=\"id\"\n  [visible]=\"visible\"\n  [mask]=\"mask\"\n  [disabled]=\"disabled\"\n  [showIcon]=\"showIcon\"\n  [hideIcon]=\"hideIcon\"\n  [type]=\"type\"\n  [direction]=\"direction\"\n  [model]=\"items\"\n  (onShow)=\"onShow.emit()\"\n  (onHide)=\"onHide.emit()\"\n  (onVisibleChange)=\"onVisibleChange.emit()\">\n</p-speedDial>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "direction",
                    "defaultValue": "'up'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "directions",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "hideIcon",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "mask",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showIcon",
                    "defaultValue": "'freud-icon freud-icon-plus'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'linear'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "types",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onVisibleChange",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "EventEmitter<void>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\ntype directions = 'up' | 'down' | 'left' | 'right' | 'up-left' | 'up-right' | 'down-left' | 'down-right';\r\ntype types = 'linear' | 'circle' | 'semi-circle' | 'quarter-circle';\r\n@Component({\r\n  selector: 'freud-speed-dial',\r\n  template: `\r\n    <p-speedDial\r\n      [id]=\"id\"\r\n      [visible]=\"visible\"\r\n      [mask]=\"mask\"\r\n      [disabled]=\"disabled\"\r\n      [showIcon]=\"showIcon\"\r\n      [hideIcon]=\"hideIcon\"\r\n      [type]=\"type\"\r\n      [direction]=\"direction\"\r\n      [model]=\"items\"\r\n      (onShow)=\"onShow.emit()\"\r\n      (onHide)=\"onHide.emit()\"\r\n      (onVisibleChange)=\"onVisibleChange.emit()\">\r\n    </p-speedDial>\r\n  `,\r\n  styleUrls: ['./speed-dial.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-speed-dial',\r\n    '[class.freud-speed-dial-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudSpeedDialComponent {\r\n\r\n  @Input() id: string = '';\r\n  @Input() visible: boolean = false;\r\n  @Input() mask: boolean = false;\r\n  @Input() items!: FreudMenuItem[];\r\n  @Input() disabled: boolean = false;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() showIcon: string = 'freud-icon freud-icon-plus';\r\n  @Input() hideIcon: string = '';\r\n  @Input() type: types = 'linear';\r\n  @Input() direction: directions = 'up';\r\n  @Output() onVisibleChange: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() onShow: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() onHide: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-speed-dial:not(.freud-speed-dial-bgcolor) {\r\n  .p-button, .p-button:hover {\r\n    background: $brand-color-pure;\r\n    border: 1px solid $brand-color-pure;\r\n    box-shadow: 0 0 0 2px $brand-color-pure;\r\n  }\r\n  .p-speeddial-action {\r\n    background-color: $brand-color-05;\r\n    width: 42px;\r\n    height: 42px;\r\n  }\r\n}\r\n\r\n.freud-speed-dial {\r\n  .p-speeddial-button.p-button.p-button-icon-only {\r\n    width: 56px;\r\n    height: 56px;\r\n  }\r\n  .p-speeddial-button.p-button.p-button-icon-only .p-button-icon {\r\n    font-size: $font-size-lg;\r\n  }\r\n  .p-speeddial-action-icon {\r\n    font-size: $font-size-lg;\r\n  }\r\n}\r\n\r\n.freud-speed-dial.freud-speed-dial-bgcolor {\r\n  .p-button, .p-button:hover {\r\n    background: $neutral-color-white;\r\n    border: 1px solid $neutral-color-white;\r\n    box-shadow: 0 0 0 2px $neutral-color-white;\r\n    color: $brand-color-pure;\r\n  }\r\n  .p-speeddial-action {\r\n    background-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n    width: 42px;\r\n    height: 42px;\r\n  }\r\n}\r\n",
                    "styleUrl": "./speed-dial.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSplitButtonComponent",
            "id": "component-FreudSplitButtonComponent-4ad041b1eb421c1611359ca55280bf57bdbe3a0db09944dc242a27ce3b124a9986d9d01a5cae52d6cda7998d99efedb6f8aecb2cabaf7b26f867dd3e12955c71",
            "file": "projects/web-components/src/components/buttons/split-button/split-button.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-split-button",
            "styleUrls": [
                "./split-button.component.scss"
            ],
            "styles": [],
            "template": "<p-splitButton\n  [label]=\"label\"\n  [disabled]=\"disabled\"\n  [model]=\"items\"\n  (onDropdownClick)=\"onDropdownClick.emit($event)\"\n  (onClick)=\"onClick.emit($event)\">\n</p-splitButton>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter<void>"
                },
                {
                    "name": "onDropdownClick",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\n@Component({\r\n  selector: 'freud-split-button',\r\n  template: `\r\n    <p-splitButton\r\n      [label]=\"label\"\r\n      [disabled]=\"disabled\"\r\n      [model]=\"items\"\r\n      (onDropdownClick)=\"onDropdownClick.emit($event)\"\r\n      (onClick)=\"onClick.emit($event)\">\r\n    </p-splitButton>\r\n  `,\r\n  styleUrls: ['./split-button.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-split-button',\r\n    '[class.freud-split-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudSplitButtonComponent {\r\n\r\n  @Input() label!: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() items!: FreudMenuItem[];\r\n  @Input() bgColor: boolean = false;\r\n  @Output() onClick: EventEmitter<void> = new EventEmitter<void>();\r\n  @Output() onDropdownClick: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-split-button:not(.freud-split-bgcolor) {\r\n  .p-button {\r\n    background-color: $brand-color-pure;\r\n    border-color: $brand-color-pure;\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n  .p-button:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n.freud-split-button.freud-split-bgcolor {\r\n  .p-button {\r\n    background-color: $neutral-color-white;\r\n    border-color: $neutral-color-white;\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n    color: $brand-color-pure;\r\n  }\r\n  .p-button:focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n\r\n.freud-split-button {\r\n  .p-menu .p-menuitem-link:hover,\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-icon,\r\n  .p-menu .p-menuitem-link:not(.p-disabled):hover .p-menuitem-text {\r\n    background-color: $brand-color-02;\r\n    color: $brand-color-pure;\r\n  }\r\n  .p-splitbutton-defaultbutton {\r\n    border-radius: $border-radius-md 0 0 $border-radius-md;\r\n  }\r\n  .p-splitbutton-menubutton {\r\n    border-radius: 0 $border-radius-md $border-radius-md 0;\r\n  }\r\n\r\n  .p-button-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .p-menu .p-menuitem-link .p-menuitem-icon {\r\n    font-size: 14px;\r\n    color: $neutral-color-dark-02;\r\n  }\r\n\r\n  .p-menu a.p-menuitem-link .p-menuitem-text{\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-regular, 24px);\r\n  }\r\n  .p-menuitem-link:focus {\r\n    box-shadow: 0 0 0 1px $brand-color-01;\r\n    background-color: $brand-color-01;\r\n  }\r\n  .p-menu-overlay {\r\n    border-radius: $border-radius-md;\r\n    box-shadow: $shadow-level-3;\r\n  }\r\n}\r\n",
                    "styleUrl": "./split-button.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSplitterComponent",
            "id": "component-FreudSplitterComponent-ccc90e91d656efdfe7e9e6d90ffe5cdfe25c9995cbfae1ee12519d1bfea1e992f4169073657e86e0e4bcc3ef576b7dc557418919934d8fe0f89963754ae6471b",
            "file": "projects/web-components/src/components/structure/splitter/splitter.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-splitter",
            "styleUrls": [
                "./splitter.component.scss"
            ],
            "styles": [],
            "template": "<p-splitter\n  [panelSizes]=\"panelSizes\"\n  [style]=\"style\"\n  [layout]=\"layout || 'horizontal'\"\n  [minSizes]=\"minSizes\"\n  [panelStyleClass]=\"panelStyleClass\"\n  [panelStyle]=\"panelStyle\"\n  (onResizeEnd)=\"onResizeEnd.emit($event)\"\n  (onResizeStart)=\"onResizeStart.emit($event)\">\n  <ng-container *ngIf=\"panels\">\n    <ng-template ngFor let-panel let-i=\"index\" [ngForOf]=\"panels\">\n      <ng-template pTemplate>\n        <ng-container *ngTemplateOutlet=\"panel\"></ng-container>\n      </ng-template>\n    </ng-template>\n  </ng-container>\n</p-splitter>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "gutterSize",
                    "defaultValue": "4",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "layout",
                    "defaultValue": "'horizontal'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "\"horizontal\" | \"vertical\"",
                    "decorators": []
                },
                {
                    "name": "minSizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "panelSizes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "panelStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "Object",
                    "decorators": []
                },
                {
                    "name": "panelStyleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onResizeEnd",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onResizeStart",
                    "defaultValue": "new EventEmitter<any>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "panels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any[]",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<any>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "PrimeTemplate"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit,\r\n  Component,\r\n  ContentChildren, EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { PrimeTemplate } from \"primeng/api\";\r\n\r\n@Component({\r\n  selector: 'freud-splitter',\r\n  template: `\r\n    <p-splitter\r\n      [panelSizes]=\"panelSizes\"\r\n      [style]=\"style\"\r\n      [layout]=\"layout || 'horizontal'\"\r\n      [minSizes]=\"minSizes\"\r\n      [panelStyleClass]=\"panelStyleClass\"\r\n      [panelStyle]=\"panelStyle\"\r\n      (onResizeEnd)=\"onResizeEnd.emit($event)\"\r\n      (onResizeStart)=\"onResizeStart.emit($event)\">\r\n      <ng-container *ngIf=\"panels\">\r\n        <ng-template ngFor let-panel let-i=\"index\" [ngForOf]=\"panels\">\r\n          <ng-template pTemplate>\r\n            <ng-container *ngTemplateOutlet=\"panel\"></ng-container>\r\n          </ng-template>\r\n        </ng-template>\r\n      </ng-container>\r\n    </p-splitter>\r\n  `,\r\n  styleUrls: ['./splitter.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-splitter',\r\n  }\r\n})\r\nexport class FreudSplitterComponent implements AfterContentInit {\r\n\r\n  @Input() panelSizes!: number[];\r\n  @Input() minSizes!: number[];\r\n  @Input() layout: \"horizontal\" | \"vertical\" = 'horizontal';\r\n  @Input() panelStyleClass!: string;\r\n  @Input() gutterSize: number = 4;\r\n  @Input() panelStyle!: Object;\r\n  @Input() style!: any;\r\n  panels: any[] = [];\r\n  @ContentChildren(PrimeTemplate) templates!: QueryList<any>;\r\n  @Output() onResizeStart: EventEmitter<any> = new EventEmitter<any>();\r\n  @Output() onResizeEnd: EventEmitter<any> = new EventEmitter<any>();\r\n\r\n  ngAfterContentInit() {\r\n    this.templates.forEach((item) => {\r\n      this.panels.push(item.template);\r\n    });\r\n  }\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-splitter {\r\n  .p-splitter {\r\n    border-radius: $border-radius-md;\r\n  }\r\n}\r\n",
                    "styleUrl": "./splitter.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "FreudStepsComponent",
            "id": "component-FreudStepsComponent-5507e28af76db3d06ed418207011123b126878a21853d66396ffc89bc86742c4f7220f5305fd906b869355cb384026146089688fab4fb80cb7f976eb92548aa4",
            "file": "projects/web-components/src/components/feedback/steps/steps.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-steps",
            "styleUrls": [
                "./steps.component.scss"
            ],
            "styles": [],
            "template": "<p-steps\n  [model]=\"model\"\n  [activeIndex]=\"activeIndex\"\n  [readonly]=\"readonly\"\n  (activeIndexChange)=\"activeIndexChange.emit($event)\">\n</p-steps>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "model",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "StepMenu[]",
                    "decorators": []
                },
                {
                    "name": "readonly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeIndexChange",
                    "defaultValue": "new EventEmitter<number>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter<number>"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\nexport interface StepMenu extends FreudMenuItem {}\r\n\r\n@Component({\r\n  selector: 'freud-steps',\r\n  template: `\r\n    <p-steps\r\n      [model]=\"model\"\r\n      [activeIndex]=\"activeIndex\"\r\n      [readonly]=\"readonly\"\r\n      (activeIndexChange)=\"activeIndexChange.emit($event)\">\r\n    </p-steps>\r\n  `,\r\n  styleUrls: ['./steps.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-steps',\r\n    '[class.freud-steps-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudStepsComponent {\r\n\r\n  @Input() model!: StepMenu[];\r\n  @Input() readonly: boolean = false;\r\n  @Input() bgColor: boolean = false;\r\n  @Input() activeIndex: number = 0;\r\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter<number>();\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables.scss';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-steps {\r\n  .p-steps .p-steps-item:before {\r\n    border-top: 1px solid $neutral-color-light-03;\r\n  }\r\n\r\n  .p-steps-item {\r\n    opacity: 1 !important;\r\n    font-weight: $font-weight-bold;\r\n  }\r\n  .p-steps .p-steps-item:not(.p-highlight) .p-menuitem-link .p-steps-number {\r\n    color: $neutral-color-dark-01;\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n  .p-steps .p-steps-item.p-highlight .p-steps-number {\r\n    background-color: $brand-color-pure;\r\n    color: $neutral-color-white;\r\n    border: $brand-color-pure;\r\n  }\r\n\r\n  &:not(.freud-steps-bgcolor) {\r\n    .p-steps .p-steps-item .p-menuitem-link .p-steps-title {\r\n      color: $neutral-color-dark-03;\r\n    }\r\n  }\r\n\r\n  .p-steps .p-steps-item .p-menuitem-link .p-steps-title,\r\n  .p-steps .p-steps-item.p-highlight .p-steps-number {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n\r\n  &.freud-steps-bgcolor {\r\n    .p-steps .p-steps-item .p-menuitem-link {\r\n      background-color: transparent;\r\n    }\r\n    .p-steps .p-steps-item .p-menuitem-link .p-steps-title {\r\n      color: $neutral-color-white;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./steps.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudSwitchComponent",
            "id": "component-FreudSwitchComponent-85c2eac330dde08557441eb0fdb3a424b43ec7e8deed479c470eac413a897f51212a73dc3fe155b75bd1e72aaae44bfaaaea67e91941b94a3e88b82c2bf7d331",
            "file": "projects/web-components/src/components/forms/switch/switch.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => FreudSwitchComponent), multi: true\n}",
                    "type": "component"
                }
            ],
            "selector": "freud-input-switch",
            "styleUrls": [
                "./switch.component.scss"
            ],
            "styles": [],
            "template": "<p-inputSwitch\n  [id]=\"id\"\n  [class.ng-invalid]=\"invalid\"\n  [class.ng-dirty]=\"invalid\"\n  [(ngModel)]=\"value\"\n  [disabled]=\"disabled\"\n  [required]=\"required\"\n  [trueValue]=\"trueValue\"\n  [falseValue]=\"falseValue\"\n  [name]=\"name\"\n  (onChange)=\"onChange.emit($event)\">\n</p-inputSwitch>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "falseValue",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "trueValue",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "onSomeEventOccured",
                    "args": [
                        {
                            "name": "newValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 84,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "newValue",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": true,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-input-switch',\r\n  styleUrls: ['./switch.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <p-inputSwitch\r\n      [id]=\"id\"\r\n      [class.ng-invalid]=\"invalid\"\r\n      [class.ng-dirty]=\"invalid\"\r\n      [(ngModel)]=\"value\"\r\n      [disabled]=\"disabled\"\r\n      [required]=\"required\"\r\n      [trueValue]=\"trueValue\"\r\n      [falseValue]=\"falseValue\"\r\n      [name]=\"name\"\r\n      (onChange)=\"onChange.emit($event)\">\r\n    </p-inputSwitch>\r\n  `,\r\n  host: {\r\n    class: 'freud-input-switch',\r\n  },\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => FreudSwitchComponent),\r\n      multi: true\r\n    }\r\n  ]\r\n})\r\nexport class FreudSwitchComponent implements ControlValueAccessor {\r\n  @Input() invalid: boolean = false;\r\n  @Input() disabled = false;\r\n  @Input() name: string = '';\r\n  @Input() falseValue: any = false;\r\n  @Input() trueValue: any = true;\r\n  @Input() required: boolean = false;\r\n  @Input() id!: string;\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n  @Output() valueChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  private _value!: boolean;\r\n\r\n  onModelChange: any = (_: string) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  public get value(){\r\n    return this._value;\r\n  }\r\n\r\n  public set value(v){\r\n    this._value = v;\r\n    this.onChange.emit(v);\r\n    this.onModelChange(this._value);\r\n    this.onModelTouched();\r\n    this.valueChange.emit(v);\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._value = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  setDisabledState?(isDisabled: boolean): void {\r\n  }\r\n\r\n  onSomeEventOccured(newValue: boolean){\r\n    this.value = newValue;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-input-switch {\r\n  .p-inputswitch .p-inputswitch-slider {\r\n    background-color: $neutral-color-dark-01;\r\n  }\r\n  .p-inputswitch:not(.p-disabled):hover .p-inputswitch-slider {\r\n    background-color: $neutral-color-dark-02;\r\n  }\r\n\r\n  .p-inputswitch.p-inputswitch-checked .p-inputswitch-slider {\r\n    background-color: $brand-color-pure;\r\n  }\r\n\r\n  .p-inputswitch.p-inputswitch-checked:not(.p-disabled):hover .p-inputswitch-slider {\r\n    background-color: $brand-color-04;\r\n  }\r\n\r\n  .p-inputswitch.p-focus .p-inputswitch-slider {\r\n    box-shadow: $shadow-focused-zen;\r\n  }\r\n}\r\n",
                    "styleUrl": "./switch.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 61,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "",
                        "line": 57
                    }
                }
            }
        },
        {
            "name": "FreudTableComponent",
            "id": "component-FreudTableComponent-6fdff9df5f83c89a77c69a6a3cbf604652c79e6e4e1e2fad544162ee0f8330c4c1ba5b62cea6ce18b9486393af9c8640a18da378975d062ba7d5d59031148494",
            "file": "projects/web-components/src/components/others/table/table.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-table",
            "styleUrls": [
                "./table.component.scss"
            ],
            "styles": [],
            "template": "<p-table\n  #tableRef\n  [value]=\"value\"\n  [columns]=\"columns\"\n  [style]=\"style\">\n\n  <ng-template pTemplate=\"caption\">\n    <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\n  </ng-template>\n\n  <ng-template pTemplate=\"header\" let-columns>\n    <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\n  </ng-template>\n  <ng-content></ng-content>\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\n    <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\n  </ng-template>\n\n  <ng-template pTemplate=\"summary\">\n    <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\n  </ng-template>\n</p-table>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "any[]",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "any[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "bodyTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "captionTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 55
                },
                {
                    "name": "headerGroupedTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "headerTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "summaryTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<any>",
                    "optional": false,
                    "description": "",
                    "line": 56
                },
                {
                    "name": "tableRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Table",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'tableRef'"
                        }
                    ]
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FreudTemplate>",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudTemplate"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterContentInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  AfterContentInit, AfterViewInit, ChangeDetectionStrategy, ChangeDetectorRef,\r\n  Component,\r\n  ContentChildren, Directive, HostListener,\r\n  Input, OnDestroy, OnInit,\r\n  QueryList,\r\n  TemplateRef, ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { FreudTemplate } from \"../../directive/template\";\r\nimport { Table } from \"primeng/table\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { DomHandler } from \"primeng/dom\";\r\n\r\n@Component({\r\n  selector: 'freud-table',\r\n  template: `\r\n    <p-table\r\n      #tableRef\r\n      [value]=\"value\"\r\n      [columns]=\"columns\"\r\n      [style]=\"style\">\r\n\r\n      <ng-template pTemplate=\"caption\">\r\n        <ng-container *ngTemplateOutlet=\"captionTemplate\"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"header\" let-columns>\r\n        <ng-container *ngTemplateOutlet=\"headerTemplate; context: { columns: columns }\"></ng-container>\r\n      </ng-template>\r\n      <ng-content></ng-content>\r\n      <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n        <ng-container *ngTemplateOutlet=\"bodyTemplate; context: {item: rowData, columns: columns}\"></ng-container>\r\n      </ng-template>\r\n\r\n      <ng-template pTemplate=\"summary\">\r\n        <ng-container *ngTemplateOutlet=\"summaryTemplate\"></ng-container>\r\n      </ng-template>\r\n    </p-table>\r\n  `,\r\n  styleUrls: ['./table.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-table',\r\n  }\r\n})\r\nexport class FreudTableComponent implements AfterContentInit {\r\n\r\n  @Input() value!: any[];\r\n  @Input() style!: string;\r\n  @Input() columns!: any[];\r\n  headerTemplate!: TemplateRef<any>;\r\n  headerGroupedTemplate!: TemplateRef<any>;\r\n  bodyTemplate!: TemplateRef<any>;\r\n  captionTemplate!: TemplateRef<any>;\r\n  summaryTemplate!: TemplateRef<any>;\r\n  @ContentChildren(FreudTemplate) templates!: QueryList<FreudTemplate>;\r\n  @ViewChild('tableRef') tableRef!: Table;\r\n\r\n  ngAfterContentInit() {\r\n    this.templates.forEach((item) => {\r\n      switch (item.getType()) {\r\n        case 'caption':\r\n          this.captionTemplate = item.template;\r\n          break;\r\n\r\n        case 'header':\r\n          this.headerTemplate = item.template;\r\n          break;\r\n\r\n        case 'headergrouped':\r\n          this.headerGroupedTemplate = item.template;\r\n          break;\r\n\r\n        case 'body':\r\n          this.bodyTemplate = item.template;\r\n          break;\r\n        case 'summary':\r\n          this.summaryTemplate = item.template;\r\n          break;\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n@Directive({\r\n  selector: '[freudSortableColumn]',\r\n  host: {\r\n    class: 'p-element',\r\n    '[class.p-sortable-column]': 'isEnabled()',\r\n    '[class.p-highlight]': 'sorted',\r\n    '[attr.tabindex]': 'isEnabled() ? \"0\" : null',\r\n    '[attr.role]': '\"columnheader\"',\r\n    '[attr.aria-sort]': 'sortOrder'\r\n  }\r\n})\r\nexport class FreudSortableColumn implements AfterViewInit, OnDestroy {\r\n  @Input('freudSortableColumn') field!: string;\r\n\r\n  @Input() freudSortableColumnDisabled!: boolean;\r\n\r\n  sorted!: boolean;\r\n\r\n  sortOrder!: string;\r\n\r\n  subscription!: Subscription;\r\n\r\n  constructor(public dt: FreudTableComponent) {\r\n    if (this.isEnabled()) {\r\n      setTimeout(() => {\r\n        this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta) => {\r\n          this.updateSortState();\r\n        });\r\n      }, 3000)\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.isEnabled()) {\r\n      this.updateSortState();\r\n    }\r\n  }\r\n\r\n  updateSortState() {\r\n    this.sorted = this.dt.tableRef?.isSorted(this.field);\r\n    this.sortOrder = this.sorted ? (this.dt.tableRef.sortOrder === 1 ? 'ascending' : 'descending') : 'none';\r\n  }\r\n\r\n  @HostListener('click', ['$event'])\r\n  onClick(event: MouseEvent) {\r\n    if (this.isEnabled() && !this.isFilterElement(<HTMLElement>event.target)) {\r\n      this.updateSortState();\r\n      this.dt.tableRef.sort({\r\n        originalEvent: event,\r\n        field: this.field\r\n      });\r\n\r\n      DomHandler.clearSelection();\r\n    }\r\n  }\r\n\r\n  @HostListener('keydown.enter', ['$event'])\r\n  onEnterKey(event: MouseEvent) {\r\n    this.onClick(event);\r\n  }\r\n\r\n  isEnabled() {\r\n    return !this.freudSortableColumnDisabled;\r\n  }\r\n\r\n  isFilterElement(element: HTMLElement) {\r\n    return DomHandler.hasClass(element, 'pi-filter-icon') || DomHandler.hasClass(element, 'p-column-filter-menu-button');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-sortIcon',\r\n  template: `\r\n        <i class=\"p-sortable-column-icon freud-icon freud-icon-fw\"\r\n           [ngClass]=\"{ 'freud-icon-sort-amount-up-alt': sortOrder === 1, 'freud-icon-sort-amount-down': sortOrder === -1, 'freud-icon-sort-alt': sortOrder === 0 }\"></i>\r\n        <span *ngIf=\"isMultiSorted()\" class=\"p-sortable-column-badge\">{{ getBadgeValue() }}</span>\r\n    `,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'p-element'\r\n  }\r\n})\r\nexport class FreudSortIcon implements AfterViewInit, OnDestroy {\r\n  @Input() field!: string;\r\n\r\n  subscription!: Subscription;\r\n\r\n  sortOrder: number = 0;\r\n\r\n  constructor(public dt: FreudTableComponent, public cd: ChangeDetectorRef) {\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    this.cd.detectChanges();\r\n    setTimeout(() => {\r\n      this.subscription = this.dt.tableRef?.tableService.sortSource$.subscribe((sortMeta: any) => {\r\n        this.updateSortState();\r\n      });\r\n    }, 3000);\r\n    this.updateSortState();\r\n  }\r\n\r\n  onClick(event: any) {\r\n    event.preventDefault();\r\n  }\r\n\r\n  updateSortState() {\r\n    if (this.dt.tableRef?.sortMode === 'single') {\r\n      this.sortOrder = this.dt.tableRef?.isSorted(this.field) ? this.dt.tableRef.sortOrder : 0;\r\n    } else if (this.dt.tableRef?.sortMode === 'multiple') {\r\n      let sortMeta = this.dt.tableRef.getSortMeta(this.field);\r\n      this.sortOrder = sortMeta ? sortMeta.order : 0;\r\n    }\r\n\r\n    this.cd.markForCheck();\r\n  }\r\n\r\n  getMultiSortMetaIndex() {\r\n    let multiSortMeta = this.dt.tableRef._multiSortMeta;\r\n    let index = -1;\r\n\r\n    if (multiSortMeta && this.dt.tableRef.sortMode === 'multiple' && (this.dt.tableRef.showInitialSortBadge || multiSortMeta.length > 1)) {\r\n      for (let i = 0; i < multiSortMeta.length; i++) {\r\n        let meta = multiSortMeta[i];\r\n        if (meta.field === this.field || meta.field === this.field) {\r\n          index = i;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    return index;\r\n  }\r\n\r\n  getBadgeValue() {\r\n    let index = this.getMultiSortMetaIndex();\r\n\r\n    return this.dt.tableRef.groupRowsBy && index > -1 ? index : index + 1;\r\n  }\r\n\r\n  isMultiSorted() {\r\n    return this.dt.tableRef?.sortMode === 'multiple' && this.getMultiSortMetaIndex() > -1;\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-table {\r\n  .p-datatable .p-datatable-thead > tr > th,\r\n  .p-datatable .p-datatable-header {\r\n    color: $neutral-color-dark-03;\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-datatable .p-datatable-tbody > tr > td,\r\n  .p-datatable .p-datatable-footer {\r\n    color: $neutral-color-dark-02;\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./table.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterContentInit"
            ]
        },
        {
            "name": "FreudTabMenuComponent",
            "id": "component-FreudTabMenuComponent-ef1dcb73c22babc34af277ca3242b9a8f8de1cbfdde5a12417544613e186f247585cbbfa6efee1f17ff57078f5f55f276f5aa96b6d2ac1676c632149f25dca7d",
            "file": "projects/web-components/src/components/structure/tab-menu/tab-menu.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-menu",
            "styleUrls": [
                "./tab-menu.component.scss"
            ],
            "styles": [],
            "template": "<p-tabMenu\n  [model]=\"items\"\n  [styleClass]=\"'freud-typography bodyBoldAuto'\"\n  [activeItem]=\"activeItem\"></p-tabMenu>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeItem",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "FreudMenuItem",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "FreudMenuItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { FreudMenuItem } from \"../../../api/menu.interface\";\r\n\r\n@Component({\r\n  selector: 'freud-tab-menu',\r\n  template: `\r\n    <p-tabMenu\r\n      [model]=\"items\"\r\n      [styleClass]=\"'freud-typography bodyBoldAuto'\"\r\n      [activeItem]=\"activeItem\"></p-tabMenu>\r\n  `,\r\n  styleUrls: ['./tab-menu.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-tab-menu',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudTabMenuComponent {\r\n\r\n  @Input() items!: FreudMenuItem[];\r\n  @Input() activeItem!: FreudMenuItem;\r\n  @Input() bgColor: boolean = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n\r\n.freud-tab-menu {\r\n\r\n  &:not(.freud-bgcolor) {\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\r\n      color: $neutral-color-dark-02;\r\n    }\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link {\r\n      border-color: $brand-color-pure;\r\n      color: $brand-color-pure;\r\n    }\r\n\r\n    .p-tabmenu .p-tabmenu-nav {\r\n      border-color: $neutral-color-light-03;\r\n      border-width: 0 0 2px 0;\r\n    }\r\n  }\r\n\r\n  &.freud-bgcolor {\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\r\n      color: $brand-color-03;\r\n      border-color: $brand-color-03;\r\n      border-width: 0 0 2px 0;\r\n    }\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem.p-highlight .p-menuitem-link,\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem:not(.p-highlight):not(.p-disabled):hover .p-menuitem-link {\r\n      background-color: transparent;\r\n      border-color: $brand-color-01;\r\n      color: $brand-color-01;\r\n    }\r\n\r\n    .p-tabmenu .p-tabmenu-nav {\r\n      border-color: $brand-color-03;\r\n      border-width: 0 0 2px 0;\r\n      background: transparent;\r\n    }\r\n    .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link {\r\n      background-color: transparent;\r\n    }\r\n  }\r\n\r\n  .p-menuitem-text {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n\r\n  .p-tabmenu .p-tabmenu-nav .p-tabmenuitem .p-menuitem-link:not(.p-disabled):focus {\r\n    box-shadow: unset;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tab-menu.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTabPanelComponent",
            "id": "component-FreudTabPanelComponent-ea66102c8150c01b983540f5537acfd179088c96fff2310d29d7c1ea1aa468c588509e1fe0d07f9b527b5d852d2f146ad5e4eef176e6c7030fa31ee8d7a757b8",
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-panel",
            "styleUrls": [
                "./tab-view.component.scss"
            ],
            "styles": [],
            "template": "<div #ref>\n    <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "closable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "leftIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "rightIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "selected",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "ref",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'ref'"
                        }
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList, ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-tab-panel',\r\n  template: `\r\n    <div #ref>\r\n        <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./tab-view.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-tab-panel',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudTabPanelComponent {\r\n\r\n  @Input() header!: string;\r\n  @Input() id!: string;\r\n  @Input() leftIcon!: string;\r\n  @Input() rightIcon!: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() closable: boolean = false;\r\n  @Input() selected: boolean = false;\r\n\r\n  @Input() bgColor: boolean = false;\r\n\r\n  @ViewChild('ref') ref!: any;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-tab-view',\r\n  template: `\r\n    <p-tabView\r\n      [style]=\"style\"\r\n      [styleClass]=\"styleClass\"\r\n      [scrollable]=\"scrollable\"\r\n      [controlClose]=\"controlClose\"\r\n      [(activeIndex)]=\"activeIndex\"\r\n      (onChange)=\"onChange.emit($event)\"\r\n      (onClose)=\"onClose.emit($event)\">\r\n        <ng-container *ngFor=\"let template of templates\">\r\n          <p-tabPanel\r\n            [id]=\"template.id\"\r\n            [leftIcon]=\"template.leftIcon\"\r\n            [rightIcon]=\"template.rightIcon\"\r\n            [disabled]=\"template.disabled\"\r\n            [header]=\"template.header\"\r\n            [selected]=\"template.selected\"\r\n            [closable]=\"template.closable\">\r\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\r\n          </p-tabPanel>\r\n        </ng-container>\r\n    </p-tabView>\r\n  `,\r\n  styleUrls: ['./tab-view.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-tab-view',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudTabViewComponent implements ControlValueAccessor {\r\n  @Input() style: any;\r\n\r\n  @Input() styleClass!: string;\r\n\r\n  @Input() controlClose!: boolean;\r\n  @Input() bgColor: boolean = false;\r\n\r\n  @Input() scrollable: boolean = false;\r\n\r\n  @ContentChildren(FreudTabPanelComponent) templates!: QueryList<FreudTabPanelComponent>;\r\n\r\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  private _activeIndex!: number;\r\n\r\n  modelValueChange() {\r\n    this.activeIndexChange.emit(this.activeIndex);\r\n  }\r\n\r\n  onModelChange: any = (_:number) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  @Input() get activeIndex(){\r\n    return this._activeIndex;\r\n  }\r\n\r\n  public set activeIndex(v){\r\n    this._activeIndex = v;\r\n    this.onModelChange(this._activeIndex);\r\n    this.modelValueChange();\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._activeIndex = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-tab-view {\r\n\r\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link,\r\n  .p-tabview .p-tabview-panels,\r\n  .p-tabview .p-tabview-nav {\r\n    background-color: transparent;\r\n  }\r\n\r\n  .p-tabview-title {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n\r\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link:not(.p-disabled):focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-tabview .p-tabview-nav li:not(.p-highlight):not(.p-disabled):hover .p-tabview-nav-link {\r\n    border-color: $brand-color-02;\r\n    background-color: transparent;\r\n    color: $brand-color-02;\r\n  }\r\n\r\n  .freud-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .p-tabview-panel {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  &:not(.freud-bgcolor) {\r\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\r\n      color: $neutral-color-dark-02;\r\n      border-color: $neutral-color-light-03;\r\n    }\r\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\r\n      color: $brand-color-pure;\r\n      border-color: $brand-color-pure;\r\n      .freud-icon {\r\n        color: $brand-color-pure;\r\n      }\r\n    }\r\n    .p-tabview-panel {\r\n      color: $neutral-color-dark-03;\r\n    }\r\n  }\r\n\r\n  &.freud-bgcolor {\r\n    .p-tabview-panel {\r\n      color: $neutral-color-white;\r\n    }\r\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\r\n      color: $brand-color-01;\r\n      border-color: $brand-color-01;\r\n      .freud-icon {\r\n        color: $brand-color-01;\r\n      }\r\n    }\r\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\r\n      color: $brand-color-03;\r\n      border-color: $brand-color-03;\r\n    }\r\n    .p-tabview .p-tabview-nav {\r\n      border-color: $brand-color-03;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./tab-view.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTabViewComponent",
            "id": "component-FreudTabViewComponent-ea66102c8150c01b983540f5537acfd179088c96fff2310d29d7c1ea1aa468c588509e1fe0d07f9b527b5d852d2f146ad5e4eef176e6c7030fa31ee8d7a757b8",
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tab-view",
            "styleUrls": [
                "./tab-view.component.scss"
            ],
            "styles": [],
            "template": "<p-tabView\n  [style]=\"style\"\n  [styleClass]=\"styleClass\"\n  [scrollable]=\"scrollable\"\n  [controlClose]=\"controlClose\"\n  [(activeIndex)]=\"activeIndex\"\n  (onChange)=\"onChange.emit($event)\"\n  (onClose)=\"onClose.emit($event)\">\n    <ng-container *ngFor=\"let template of templates\">\n      <p-tabPanel\n        [id]=\"template.id\"\n        [leftIcon]=\"template.leftIcon\"\n        [rightIcon]=\"template.rightIcon\"\n        [disabled]=\"template.disabled\"\n        [header]=\"template.header\"\n        [selected]=\"template.selected\"\n        [closable]=\"template.closable\">\n        <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\n      </p-tabPanel>\n    </ng-container>\n</p-tabView>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 101,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 80,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "controlClose",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 79,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "scrollable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 82,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 77,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "activeIndexChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 89,
                    "type": "EventEmitter<number>"
                },
                {
                    "name": "onChange",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 87,
                    "type": "EventEmitter<any>"
                },
                {
                    "name": "onClose",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 86,
                    "type": "EventEmitter<any>"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_activeIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 91,
                    "modifierKind": [
                        121
                    ]
                },
                {
                    "name": "onModelChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 97
                },
                {
                    "name": "onModelTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 99
                },
                {
                    "name": "templates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<FreudTabPanelComponent>",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "decorators": [
                        {
                            "name": "ContentChildren",
                            "stringifiedArguments": "FreudTabPanelComponent"
                        }
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "modelValueChange",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "obj",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  Component,\r\n  ContentChildren,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  QueryList, ViewChild,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { ControlValueAccessor } from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'freud-tab-panel',\r\n  template: `\r\n    <div #ref>\r\n        <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./tab-view.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-tab-panel',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudTabPanelComponent {\r\n\r\n  @Input() header!: string;\r\n  @Input() id!: string;\r\n  @Input() leftIcon!: string;\r\n  @Input() rightIcon!: string;\r\n  @Input() disabled: boolean = false;\r\n  @Input() closable: boolean = false;\r\n  @Input() selected: boolean = false;\r\n\r\n  @Input() bgColor: boolean = false;\r\n\r\n  @ViewChild('ref') ref!: any;\r\n\r\n}\r\n\r\n@Component({\r\n  selector: 'freud-tab-view',\r\n  template: `\r\n    <p-tabView\r\n      [style]=\"style\"\r\n      [styleClass]=\"styleClass\"\r\n      [scrollable]=\"scrollable\"\r\n      [controlClose]=\"controlClose\"\r\n      [(activeIndex)]=\"activeIndex\"\r\n      (onChange)=\"onChange.emit($event)\"\r\n      (onClose)=\"onClose.emit($event)\">\r\n        <ng-container *ngFor=\"let template of templates\">\r\n          <p-tabPanel\r\n            [id]=\"template.id\"\r\n            [leftIcon]=\"template.leftIcon\"\r\n            [rightIcon]=\"template.rightIcon\"\r\n            [disabled]=\"template.disabled\"\r\n            [header]=\"template.header\"\r\n            [selected]=\"template.selected\"\r\n            [closable]=\"template.closable\">\r\n            <div [innerHTML]=\"template.ref?.nativeElement?.innerHTML\"></div>\r\n          </p-tabPanel>\r\n        </ng-container>\r\n    </p-tabView>\r\n  `,\r\n  styleUrls: ['./tab-view.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-tab-view',\r\n    '[class.freud-bgcolor]': `bgColor`,\r\n  }\r\n})\r\nexport class FreudTabViewComponent implements ControlValueAccessor {\r\n  @Input() style: any;\r\n\r\n  @Input() styleClass!: string;\r\n\r\n  @Input() controlClose!: boolean;\r\n  @Input() bgColor: boolean = false;\r\n\r\n  @Input() scrollable: boolean = false;\r\n\r\n  @ContentChildren(FreudTabPanelComponent) templates!: QueryList<FreudTabPanelComponent>;\r\n\r\n  @Output() onClose: EventEmitter<any> = new EventEmitter();\r\n  @Output() onChange: EventEmitter<any> = new EventEmitter();\r\n\r\n  @Output() activeIndexChange: EventEmitter<number> = new EventEmitter();\r\n\r\n  private _activeIndex!: number;\r\n\r\n  modelValueChange() {\r\n    this.activeIndexChange.emit(this.activeIndex);\r\n  }\r\n\r\n  onModelChange: any = (_:number) => { };\r\n\r\n  onModelTouched: any = () => { };\r\n\r\n  @Input() get activeIndex(){\r\n    return this._activeIndex;\r\n  }\r\n\r\n  public set activeIndex(v){\r\n    this._activeIndex = v;\r\n    this.onModelChange(this._activeIndex);\r\n    this.modelValueChange();\r\n    this.onModelTouched();\r\n  }\r\n\r\n  writeValue(obj: any): void {\r\n    this._activeIndex = obj;\r\n  }\r\n\r\n  registerOnChange(fn: any): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: any): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-tab-view {\r\n\r\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link,\r\n  .p-tabview .p-tabview-panels,\r\n  .p-tabview .p-tabview-nav {\r\n    background-color: transparent;\r\n  }\r\n\r\n  .p-tabview-title {\r\n    @include typography($font-size-xs, $font-weight-semibold, auto);\r\n  }\r\n\r\n  .p-tabview .p-tabview-nav li .p-tabview-nav-link:not(.p-disabled):focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-tabview .p-tabview-nav li:not(.p-highlight):not(.p-disabled):hover .p-tabview-nav-link {\r\n    border-color: $brand-color-02;\r\n    background-color: transparent;\r\n    color: $brand-color-02;\r\n  }\r\n\r\n  .freud-icon {\r\n    font-size: 14px;\r\n  }\r\n\r\n  .p-tabview-panel {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  &:not(.freud-bgcolor) {\r\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\r\n      color: $neutral-color-dark-02;\r\n      border-color: $neutral-color-light-03;\r\n    }\r\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\r\n      color: $brand-color-pure;\r\n      border-color: $brand-color-pure;\r\n      .freud-icon {\r\n        color: $brand-color-pure;\r\n      }\r\n    }\r\n    .p-tabview-panel {\r\n      color: $neutral-color-dark-03;\r\n    }\r\n  }\r\n\r\n  &.freud-bgcolor {\r\n    .p-tabview-panel {\r\n      color: $neutral-color-white;\r\n    }\r\n    .p-tabview .p-tabview-nav li.p-highlight .p-tabview-nav-link {\r\n      color: $brand-color-01;\r\n      border-color: $brand-color-01;\r\n      .freud-icon {\r\n        color: $brand-color-01;\r\n      }\r\n    }\r\n    .p-tabview .p-tabview-nav li .p-tabview-nav-link {\r\n      color: $brand-color-03;\r\n      border-color: $brand-color-03;\r\n    }\r\n    .p-tabview .p-tabview-nav {\r\n      border-color: $brand-color-03;\r\n    }\r\n  }\r\n}\r\n",
                    "styleUrl": "./tab-view.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "ControlValueAccessor"
            ],
            "accessors": {
                "activeIndex": {
                    "name": "activeIndex",
                    "setSignature": {
                        "name": "activeIndex",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 105,
                        "jsdoctags": [
                            {
                                "name": "v",
                                "type": "",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "activeIndex",
                        "type": "",
                        "returnType": "",
                        "line": 101
                    }
                }
            }
        },
        {
            "name": "FreudTagComponent",
            "id": "component-FreudTagComponent-879f35b77c713e151dd604b850c7a7881e1c5c60ec7b4ae886d9c28a568a9a2114ba967df18c3a5bb93e837b185a460a9dfe3cfdb27191018d07c4a3167501dd",
            "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-tag",
            "styleUrls": [
                "./tag.component.scss"
            ],
            "styles": [],
            "template": "<p-tag [value]=\"value\" class=\"freud-tag-{{color || 'primary'}}\" [rounded]=\"true\"></p-tag>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "color",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "colors",
                    "decorators": []
                },
                {
                    "name": "outline",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from '@angular/core';\r\n\r\ntype colors = 'primary' | 'success' | 'info' | 'warning' | 'error';\r\n\r\n@Component({\r\n  selector: 'freud-tag',\r\n  template: `\r\n    <p-tag [value]=\"value\" class=\"freud-tag-{{color || 'primary'}}\" [rounded]=\"true\"></p-tag>\r\n  `,\r\n  host: {\r\n    class: 'freud-tag freud-typography smallSemibold1-5',\r\n    '[class.outline]':  'outline'\r\n  },\r\n  styleUrls: ['./tag.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class FreudTagComponent {\r\n\r\n  @Input() value!: string;\r\n  @Input() color: colors = 'primary';\r\n  @Input() outline: boolean = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n\r\n.freud-tag .p-tag {\r\n  padding: 3px $spacing-size-nano;\r\n}\r\n.freud-tag .p-tag-value {\r\n    font-weight: $font-weight-semibold;\r\n    font-size: $font-size-xxxs;\r\n    line-height: 18px;\r\n}\r\n\r\n.freud-tag:not(.outline) {\r\n\r\n  .freud-tag-primary .p-tag {\r\n    background-color: $brand-color-pure;\r\n  }\r\n\r\n  .freud-tag-success .p-tag {\r\n    background-color: $feedback-color-positive-04;\r\n  }\r\n  .freud-tag-info .p-tag {\r\n    background-color: $feedback-color-neutral-pure;\r\n  }\r\n  .freud-tag-warning .p-tag {\r\n    background-color: $feedback-color-warning-pure;\r\n    color: $neutral-color-black;\r\n  }\r\n  .freud-tag-error .p-tag {\r\n    background-color: $feedback-color-negative-04;\r\n  }\r\n}\r\n\r\n.freud-tag.outline {\r\n  .p-tag {\r\n    background-color: $neutral-color-white;\r\n  }\r\n\r\n  .freud-tag-primary .p-tag {\r\n    border: 1px solid $brand-color-pure;\r\n    color: $brand-color-pure;\r\n  }\r\n\r\n  .freud-tag-success .p-tag {\r\n    border: 1px solid $feedback-color-positive-04;\r\n    color: $feedback-color-positive-04;\r\n  }\r\n  .freud-tag-info .p-tag {\r\n    border: 1px solid $feedback-color-neutral-pure;\r\n    color: $feedback-color-neutral-pure;\r\n  }\r\n  .freud-tag-warning .p-tag {\r\n    border: 1px solid $feedback-color-warning-04;\r\n    color: $feedback-color-warning-04;\r\n  }\r\n  .freud-tag-error .p-tag {\r\n    border: 1px solid $feedback-color-negative-04;\r\n    color: $feedback-color-negative-04;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tag.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudToastComponent",
            "id": "component-FreudToastComponent-c98f5f45ba0ac1628acd15ba52a719443a83b259c25e07ed61d007349fb06239fc1f2d8f0bf3bcc57f3e9537c34b453d1e20a9d685d0e64c46372e24d4c8ee3b",
            "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-toast",
            "styleUrls": [
                "./toast.component.scss"
            ],
            "styles": [],
            "template": "<p-toast [position]=\"position\" [key]=\"key\"></p-toast>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "key",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "position",
                    "defaultValue": "'top-right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "positions",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, ViewEncapsulation } from \"@angular/core\";\r\n\r\ntype positions = \"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\";\r\n\r\n@Component({\r\n  selector: 'freud-toast',\r\n  template: `\r\n    <p-toast [position]=\"position\" [key]=\"key\"></p-toast>\r\n  `,\r\n  styleUrls: ['./toast.component.scss'],\r\n  encapsulation: ViewEncapsulation.None,\r\n  host: {\r\n    class: 'freud-toast'\r\n  }\r\n})\r\nexport class FreudToastComponent {\r\n\r\n  @Input() position: positions = 'top-right';\r\n  @Input() key!: string;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-toast {\r\n  .p-toast .p-toast-message {\r\n    border: unset;\r\n    border-radius: $border-radius-md;\r\n    color: $neutral-color-dark-04;\r\n    box-shadow: unset;\r\n\r\n    .p-toast-message-content .p-toast-message-icon {\r\n      font-size: 24px;\r\n    }\r\n\r\n    &.p-toast-message-success {\r\n      background-color: $feedback-color-positive-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-positive-pure;\r\n      }\r\n    }\r\n\r\n    &.p-toast-message-info {\r\n      background-color: $feedback-color-neutral-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-neutral-pure;\r\n      }\r\n    }\r\n\r\n    &.p-toast-message-warn {\r\n      background-color: $feedback-color-warning-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-alert-pure;\r\n      }\r\n    }\r\n\r\n    &.p-toast-message-error {\r\n      background-color: $feedback-color-negative-01;\r\n      .p-toast-message-icon {\r\n        color: $feedback-color-negative-pure;\r\n      }\r\n    }\r\n\r\n    .freud-icon {\r\n      font-size: 31px;\r\n      margin-left: -5px;\r\n      margin-right: 4px;\r\n    }\r\n  }\r\n\r\n  .p-toast .p-toast-icon-close {\r\n    color:$neutral-color-dark-04 !important;\r\n  }\r\n  .p-toast .p-toast-message .p-toast-icon-close:focus {\r\n    box-shadow: unset;\r\n  }\r\n\r\n  .p-toast .p-message-summary {\r\n    @include typography($font-size-xs, $font-weight-bold, auto);\r\n  }\r\n\r\n  .p-toast-detail {\r\n    @include typography($font-size-xs, $font-weight-regular, auto);\r\n  }\r\n\r\n  .pi-exclamation-triangle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e903\";\r\n  }\r\n\r\n  .pi-info-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9ed\";\r\n  }\r\n\r\n  .pi-times-circle:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e9b9\";\r\n  }\r\n  .pi-check:before {\r\n    font-family: 'Freud Icon' !important;\r\n    content: \"\\e973\";\r\n  }\r\n\r\n}\r\n",
                    "styleUrl": "./toast.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudToastExampleComponent",
            "id": "component-FreudToastExampleComponent-87b72c17ddb7a2577e92310b11ec5cd425d76a2752f4f28f2657eaca0f809c46a081c6ee242e45bae747bca1537532d0398c89bd7bbfaaa0027ccee86ee8f60a",
            "file": "stories/feedback/toast/toast-example/example.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "freud-toast-examples",
            "styleUrls": [
                "./example.component.scss"
            ],
            "styles": [],
            "template": "<freud-toast></freud-toast>\n<div style=\"display: flex; gap: 12px\">\n  <freud-button (click)=\"confirm('success', 'Success')\">Success</freud-button>\n  <freud-button (click)=\"confirm('info', 'Info')\">Info</freud-button>\n  <freud-button (click)=\"confirm('warn', 'Warning')\">Warning</freud-button>\n  <freud-button (click)=\"confirm('error', 'Error')\">Error</freud-button>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "confirm",
                    "args": [
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "severity",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FreudMessageService } from \"../../../../projects/web-components/src/services/message.service\";\r\n\r\n@Component({\r\n  selector: 'freud-toast-examples',\r\n  template: `\r\n    <freud-toast></freud-toast>\r\n    <div style=\"display: flex; gap: 12px\">\r\n      <freud-button (click)=\"confirm('success', 'Success')\">Success</freud-button>\r\n      <freud-button (click)=\"confirm('info', 'Info')\">Info</freud-button>\r\n      <freud-button (click)=\"confirm('warn', 'Warning')\">Warning</freud-button>\r\n      <freud-button (click)=\"confirm('error', 'Error')\">Error</freud-button>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./example.component.scss']\r\n})\r\nexport class FreudToastExampleComponent {\r\n\r\n  constructor(private messageService: FreudMessageService) {}\r\n\r\n  confirm(severity: string, summary: string) {\r\n    this.messageService.add({severity:severity, summary:summary, detail:'Message Content', sticky: true, life: 2000});\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./example.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "FreudMessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "FreudMessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        },
        {
            "name": "FreudTooltipComponent",
            "id": "component-FreudTooltipComponent-aa0a74c0fc1834c0ef9aa08c2c054bf332b750bb81d408ef20cbd4d3d2cf319e4154c00e5a5167e993432803347cb5b073e052b2626a572119ed7088dcf56a62",
            "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "freudTooltip",
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[freud-tooltip]",
            "styleUrls": [
                "./tooltip.component.scss"
            ],
            "styles": [],
            "template": "<div [pTooltip]=\"tooltipLabel\" [tooltipPosition]=\"tooltipPosition\" [class.bgColor]=\"bgColor\"\n    [tooltipStyleClass]=\"bgColor ? 'freud-tooltip freud-bg-color' : 'freud-tooltip'\" class=\"freud-tooltip-container\">\n  <ng-content></ng-content>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "bgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "tooltipLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "tooltipPosition",
                    "defaultValue": "'top'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "position",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ViewEncapsulation } from '@angular/core';\r\nimport { Component, Input } from '@angular/core';\r\n\r\ntype position = 'top' | 'bottom' | 'left' | 'right';\r\n\r\n@Component({\r\n  selector: '[freud-tooltip]',\r\n  exportAs: 'freudTooltip',\r\n  template: `\r\n    <div [pTooltip]=\"tooltipLabel\" [tooltipPosition]=\"tooltipPosition\" [class.bgColor]=\"bgColor\"\r\n        [tooltipStyleClass]=\"bgColor ? 'freud-tooltip freud-bg-color' : 'freud-tooltip'\" class=\"freud-tooltip-container\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  `,\r\n  styleUrls: ['./tooltip.component.scss'],\r\n  encapsulation: ViewEncapsulation.None\r\n})\r\nexport class FreudTooltipComponent {\r\n\r\n  @Input() tooltipLabel: string = '';\r\n  @Input() tooltipPosition: position = 'top';\r\n  @Input() bgColor: boolean = false;\r\n\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../../../../tokens/dist/style/scss/variables';\r\n@import '../../../../scss/typography';\r\n\r\n.freud-tooltip-container {\r\n    display:inline-block;\r\n    position:relative;\r\n}\r\n\r\n.p-tooltip {\r\n    .p-tooltip-text {\r\n        padding: 10.5px;\r\n        color: $neutral-color-white;\r\n        @include typography($font-size-xs, $font-weight-regular, 24px);\r\n        border-radius: $border-radius-md;\r\n        background-color:  $neutral-color-dark-03;\r\n        box-shadow: $shadow-level-3;\r\n    }\r\n}\r\n\r\n.p-tooltip.freud-bg-color {\r\n\r\n  &.p-tooltip-right .p-tooltip-arrow {\r\n    border-right-color: $neutral-color-white;\r\n  }\r\n  &.p-tooltip-left .p-tooltip-arrow {\r\n    border-left-color: $neutral-color-white;\r\n  }\r\n  &.p-tooltip-top .p-tooltip-arrow {\r\n    border-top-color: $neutral-color-white;\r\n  }\r\n  &.p-tooltip-bottom .p-tooltip-arrow {\r\n    border-bottom-color: $neutral-color-white;\r\n  }\r\n\r\n  .p-tooltip-text{\r\n    color: $neutral-color-dark-03;\r\n    background-color: $neutral-color-white;\r\n  }\r\n}\r\n",
                    "styleUrl": "./tooltip.component.scss"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "FreudTypographyComponent",
            "id": "component-FreudTypographyComponent-7723528e8d15aa76f1a73336eff2cac9ab15804bb4605eeb6c7276d239ae97134967bcaba44d064e12cabeb2805ad69f5c24c7ede8f9ba0be5065a8668011771",
            "file": "projects/web-components/src/components/typography/typography.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "exportAs": "freudTypography",
            "host": {},
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "[freud-typography]",
            "styleUrls": [
                "./typography.component.scss"
            ],
            "styles": [],
            "template": "<ng-content></ng-content>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "fontBgColor",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "fontType",
                    "defaultValue": "'bodyRegular1-5'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "fontTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  HostBinding,\r\n  Input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { bodyTypes, headingTypes } from './typrography.type';\r\n\r\nexport const types = headingTypes.concat(bodyTypes);\r\n\r\ntype fontTypes = typeof types[number];\r\n\r\n@Component({\r\n  selector: '[freud-typography]',\r\n  exportAs: 'freudTypography',\r\n  styleUrls: ['./typography.component.scss'],\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `<ng-content></ng-content> `,\r\n  host: {\r\n    class: 'freud-typography',\r\n    '[class.typography-bg-color]': `fontBgColor`,\r\n  },\r\n})\r\nexport class FreudTypographyComponent {\r\n  @HostBinding('class') @Input() fontType: fontTypes = 'bodyRegular1-5';\r\n  @Input() fontBgColor: boolean = false;\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../scss/typography.scss';\r\n",
                    "styleUrl": "./typography.component.scss"
                }
            ],
            "stylesData": ""
        }
    ],
    "modules": [
        {
            "name": "FreudAccordionModule",
            "id": "module-FreudAccordionModule-da5afbdff1e079f8fedd48b78a5f8d6e8e7ae6e4102829e981f3198397480da82b49a5f972c72e1cdd4fd0d91531f356b4719719f371fd1326b8d766083911d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/accordion/accordion.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudAccordionComponent, FreudAccordionTabComponent } from './accordion.component';\r\nimport { Accordion, AccordionModule, AccordionTab } from \"primeng/accordion\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AccordionModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudAccordionComponent, FreudAccordionTabComponent],\r\n  exports: [FreudAccordionComponent, FreudAccordionTabComponent, AccordionTab, Accordion]\r\n})\r\nexport class FreudAccordionModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAccordionComponent"
                        },
                        {
                            "name": "FreudAccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "Accordion"
                        },
                        {
                            "name": "AccordionTab"
                        },
                        {
                            "name": "FreudAccordionComponent"
                        },
                        {
                            "name": "FreudAccordionTabComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudActionIconModule",
            "id": "module-FreudActionIconModule-66b70da277a94305b9d43513a799928d242aa28ada2e337c1fab6f46dfb1c933d630ca83960a4c7c1f3154af268eecd26540b6d26fcf94df81b56f5acfa8c9d1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/action-icon/action-icon.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudActionIconComponent } from './action-icon.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule],\r\n  declarations: [FreudActionIconComponent],\r\n  exports: [FreudActionIconComponent]\r\n})\r\nexport class FreudActionIconModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudActionIconComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudActionIconComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAlertMessagesModule",
            "id": "module-FreudAlertMessagesModule-b91cc62ed2580cbf18f932924c68a885504641e50781c7623da6727f462e5b8032f32e4a1edc57e8db9bcbbcc4e49199b0dbf417ff50c326e218d13114bf0b34",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MessagesModule } from \"primeng/messages\";\r\nimport { MessageModule } from 'primeng/message';\r\n\r\nimport { FreudAlertMessageComponent, FreudAlertMessagesComponent } from './alert-messages.component';\r\nimport { FreudMessageService } from \"../../../services/message.service\";\r\nimport { MessageService } from \"primeng/api\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MessageModule, MessagesModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudAlertMessagesComponent, FreudAlertMessageComponent],\r\n  exports: [FreudAlertMessagesComponent, FreudAlertMessageComponent],\r\n  providers: [FreudMessageService, MessageService]\r\n})\r\nexport class FreudAlertMessagesModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAlertMessageComponent"
                        },
                        {
                            "name": "FreudAlertMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAlertMessageComponent"
                        },
                        {
                            "name": "FreudAlertMessagesComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAutocompleteExampleModule",
            "id": "module-FreudAutocompleteExampleModule-675c7396ccdfc7a7954db21d658bc8b838dc3422258c821d06c571cf7fa0ddf6689d79982fa27665a119673dfb8eaaad05091be42254195565f29d2b272fea6f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/auto-complete/auto-complete-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudAutoCompleteExampleComponent } from './example.component';\r\nimport {\r\n  FreudAutoCompleteModule,\r\n} from \"@freud-ds/web-components\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudAutoCompleteModule, ReactiveFormsModule, FormsModule],\r\n  declarations: [FreudAutoCompleteExampleComponent],\r\n  exports: [FreudAutoCompleteExampleComponent]\r\n})\r\nexport class FreudAutocompleteExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAutoCompleteModule",
            "id": "module-FreudAutoCompleteModule-3e647e66084276168b1009775d8429379993b6f514a4c2508537668485f7a493929724d97a57839b9c3dc03f8e10e149dce4bc2f2ca31d5a6995da1d5bc6967d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/auto-complete/auto-complete.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudAutoCompleteComponent } from './auto-complete.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { AutoCompleteModule } from \"primeng/autocomplete\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, AutoCompleteModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudAutoCompleteComponent],\r\n  exports: [FreudAutoCompleteComponent]\r\n})\r\nexport class FreudAutoCompleteModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAutoCompleteComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudAvatarModule",
            "id": "module-FreudAvatarModule-4539ac0a1b9cce97d95a535a4cd6e8d31873529fe73b29becee856615229fb22c58278fc820cdc4293324c0dbca26a8fe13317ab8ab84b96cf3d3a189ea82397",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/avatar/avatar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { AvatarModule } from 'primeng/avatar';\r\n\r\nimport { FreudAvatarComponent } from './avatar.component';\r\nimport { FreudBadgeModule } from '../../feedback/badge';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, AvatarModule, FreudBadgeModule],\r\n  declarations: [FreudAvatarComponent],\r\n  exports: [FreudAvatarComponent]\r\n})\r\nexport class FreudAvatarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudAvatarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudBadgeModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudAvatarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBadgeModule",
            "id": "module-FreudBadgeModule-cb68a687561b658c92aa8a6ac6f26eca6d5640eda702091624d0c42f4c0e3d9737b97fd9672761fc6fbce79b64b7b3f464434d75b1741f6b460ef309189ea7d7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/badge/badge.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { BadgeModule } from 'primeng/badge';\r\n\r\nimport { FreudBadgeComponent } from './badge.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, BadgeModule],\r\n  declarations: [FreudBadgeComponent],\r\n  exports: [FreudBadgeComponent],\r\n})\r\nexport class FreudBadgeModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBadgeComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBlockExampleModule",
            "id": "module-FreudBlockExampleModule-d02b24145aa0b891206329294bac55885d49776353286f8e11cbc8d1ec4cf571c5eb6b4103b719bf91b09b4a0300325aa57cc1cf2242196771f36e4887c5282d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/others/block-ui/block-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudBlockExampleComponent } from './example.component';\r\nimport {\r\n  FreudBlockUIModule, FreudButtonModule, FreudCardModule,\r\n} from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudBlockUIModule, FreudButtonModule, FreudCardModule],\r\n  declarations: [FreudBlockExampleComponent],\r\n  exports: [FreudBlockExampleComponent]\r\n})\r\nexport class FreudBlockExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBlockExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudBlockUIModule"
                        },
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudCardModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBlockExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBlockUIModule",
            "id": "module-FreudBlockUIModule-0f53e4ff67b9b30c4ed6a2300a6a3cdd376b97401562fb9de4bc1c776faa5391b923605fb1fbbf604df20ff5d5559d4615005394122580974d6ee8b43e0a6038",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/block-ui/block-ui.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudBlockUIComponent } from './block-ui.component';\r\nimport { BlockUIModule } from \"primeng/blockui\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, BlockUIModule],\r\n  declarations: [FreudBlockUIComponent],\r\n  exports: [FreudBlockUIComponent]\r\n})\r\nexport class FreudBlockUIModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBlockUIComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBlockUIComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudBreadcrumbModule",
            "id": "module-FreudBreadcrumbModule-f3ad84227483e91e451bc73c78753c5f8a93ca21f23d503ef29ba0c20f37e71a194cb12b465f53fd9698e8eabe7635be23f638839fc6bf00c095ea82e0e30a4b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudBreadcrumbComponent } from './breadcrumb.component';\r\nimport { BreadcrumbModule } from \"primeng/breadcrumb\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, BreadcrumbModule],\r\n  declarations: [FreudBreadcrumbComponent],\r\n  exports: [FreudBreadcrumbComponent]\r\n})\r\nexport class FreudBreadcrumbModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudBreadcrumbComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudButtonModule",
            "id": "module-FreudButtonModule-2e87d3b09d3ef4faf9ca0ac3cdcdb5406f8b8aa485cf3943cb222f5f9affe2d0ee2544067b7e6bd5a747f0bb6016a65908528a7a8fe2b95c8d2ea27b1e0c2fc9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/button/button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\nimport { FreudButtonComponent } from './button.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ButtonModule],\r\n  declarations: [FreudButtonComponent],\r\n  exports: [FreudButtonComponent]\r\n})\r\nexport class FreudButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCalendarModule",
            "id": "module-FreudCalendarModule-74e95420ac3ef4ecba60c800501dda96b43db9fdf52ee91487b56de764fa7c16728488d2c53dfdff5ea65367bc2ad4c2ab17b94787a09f04801b627967242fe5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/calendar/calendar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCalendarComponent } from './calendar.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport { CalendarModule } from \"primeng/calendar\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, CalendarModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudCalendarComponent],\r\n  exports: [FreudCalendarComponent]\r\n})\r\nexport class FreudCalendarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCaptchaModule",
            "id": "module-FreudCaptchaModule-b5dedef60af8cfba134fac23c58a28e100f6512429060d9db61fa1292b02c17942a2b96f8b51d653c584afb99a4efb965915060972cbfc30020e9cac0958666e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/captcha/captcha.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCaptchaComponent } from './captcha.component';\r\nimport { CaptchaModule } from \"primeng/captcha\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CaptchaModule],\r\n  declarations: [FreudCaptchaComponent],\r\n  exports: [FreudCaptchaComponent]\r\n})\r\nexport class FreudCaptchaModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCaptchaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCaptchaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCardModule",
            "id": "module-FreudCardModule-130ca7ed3c1d6fe907f6a7a37ab2be896623c8ecdc91a9b46a156351f37927d06b68838037f4dfe120ed7863d9fee1af8c20732e5fd28b1807abfc36f7c192c7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/card/card.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCardComponent } from './card.component';\r\nimport { CardModule } from \"primeng/card\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CardModule],\r\n  declarations: [FreudCardComponent],\r\n  exports: [FreudCardComponent]\r\n})\r\nexport class FreudCardModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCardComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCardComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCascadeSelectModule",
            "id": "module-FreudCascadeSelectModule-a5db303dcbecc5bf15c37d9ca0142428ccc163220b02073e32d06e9dbae74bb7a31a55b5231bc1344dddca0cb6eed1596baaf936f953bbf92a2ed225f0b17bc5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/cascade-select/cascade-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCascadeSelectComponent } from './cascade-select.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { CascadeSelectModule } from \"primeng/cascadeselect\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, CascadeSelectModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudCascadeSelectComponent],\r\n  exports: [FreudCascadeSelectComponent]\r\n})\r\nexport class FreudCascadeSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCascadeSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCascadeSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudCheckboxModule",
            "id": "module-FreudCheckboxModule-612fbe3f647c2f128df6b0c91f020b17347a38d4e67127f307a21d841a95895e884d96678f594f30ea88768b3856ab509f4ce74580c056cbfa9240350597c030",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/checkbox/checkbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudCheckboxComponent } from './checkbox.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { CheckboxModule } from \"primeng/checkbox\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, CheckboxModule, FormsModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudCheckboxComponent],\r\n  exports: [FreudCheckboxComponent]\r\n})\r\nexport class FreudCheckboxModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudCheckboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudChipModule",
            "id": "module-FreudChipModule-a798e2311c3f81ac3df7d37f832dc9a8222c6bdfca987b53da178e93824f6480cb33a41327f4c383ff1c6a9543dd965b065bb7754b288643683b8ad1417fca95",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/chip/chip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudChipComponent } from './chip.component';\r\nimport { ChipModule } from \"primeng/chip\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ChipModule],\r\n  declarations: [FreudChipComponent],\r\n  exports: [FreudChipComponent]\r\n})\r\nexport class FreudChipModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudChipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudChipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmDialogModule",
            "id": "module-FreudConfirmDialogModule-ce9a0e4c38dc21d7885e6ea6d637eb4cd4cb011696ad49001fc53b1a52b208282b5423e7dbf461c60478c7a7da3e15dc4bb0d5baeaa7c3c9e78b02542fb028f4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmDialogComponent } from './confirm-dialog.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { ConfirmDialogModule } from \"primeng/confirmdialog\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { FreudButtonModule } from \"../../buttons/button\";\r\nimport { FreudConfirmationService } from \"../../../services/confirmation.service\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ConfirmDialogModule, BrowserModule, BrowserAnimationsModule, FreudButtonModule],\r\n  declarations: [FreudConfirmDialogComponent],\r\n  exports: [FreudConfirmDialogComponent],\r\n  providers: [\r\n    FreudConfirmationService,\r\n    ConfirmationService\r\n  ]\r\n})\r\nexport class FreudConfirmDialogModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudConfirmationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmPopupExampleModule",
            "id": "module-FreudConfirmPopupExampleModule-29b9f3a2cb14e2e80b32da87417267d7435039919d0b29e7e32ae6060f99f05f2859430cd7746366685895ffc2374f6f37cd0eab1d43bb86a9a8b52c0694121a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmPopupExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudConfirmPopupModule } from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudConfirmPopupModule, FreudButtonModule],\r\n  declarations: [FreudConfirmPopupExampleComponent],\r\n  exports: [FreudConfirmPopupExampleComponent]\r\n})\r\nexport class FreudConfirmPopupExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudConfirmPopupModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudConfirmPopupModule",
            "id": "module-FreudConfirmPopupModule-b5cb0ab790c028974c1015fcfe5c34c786a08c90c5c09d89153a5fb338fd3bae0152388c9d15c874ddb106dcf073450082934617b3f7449f63167b47a382809c",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmPopupComponent } from './confirm-popup.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { ConfirmationService } from \"primeng/api\";\r\nimport { FreudConfirmationService } from \"../../../services/confirmation.service\";\r\nimport { ConfirmPopupModule } from \"primeng/confirmpopup\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ConfirmPopupModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudConfirmPopupComponent],\r\n  exports: [FreudConfirmPopupComponent],\r\n  providers: [\r\n    FreudConfirmationService,\r\n    ConfirmationService\r\n  ]\r\n})\r\nexport class FreudConfirmPopupModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudConfirmationService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmPopupComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDialogExampleModule",
            "id": "module-FreudDialogExampleModule-f9468743da6a355d45b765fc68ab7ecee0fdc1c5ee152daa7dae339ad5029cc81416dc3f4ee361d157b7572b276ab1b35edf35f46ba3c3f4315fcc3706938991",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/dialog/dialog-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudDialogExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudDialogModule } from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudDialogModule, FreudButtonModule],\r\n  declarations: [FreudDialogExampleComponent],\r\n  exports: [FreudDialogExampleComponent]\r\n})\r\nexport class FreudDialogExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDialogModule",
            "id": "module-FreudDialogModule-45076829ea9c2a74ab089a16891d28bd0d700f46fafc31a5171b4d8839cbd09b6e072ce29dac855e1e78b71fc23d19c720f9d64bff295a739a7f1a956519d895",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudDialogComponent } from './dialog.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { DialogModule } from \"primeng/dialog\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, DialogModule, BrowserModule, BrowserAnimationsModule, FormsModule],\r\n  declarations: [FreudDialogComponent],\r\n  exports: [FreudDialogComponent],\r\n  providers: []\r\n})\r\nexport class FreudDialogModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDialogComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDialogComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDividerModule",
            "id": "module-FreudDividerModule-17a8756bbeeba0f9325b17de73c5fed79d7d5d51ed92a75930db00c8847e208eaa93aa7bd6594923e142c64231efb47c2b112b4ec5708e100d0524b232427ef0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/divider/divider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudDividerComponent } from './divider.component';\r\nimport { DividerModule } from \"primeng/divider\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, DividerModule],\r\n  declarations: [FreudDividerComponent],\r\n  exports: [FreudDividerComponent]\r\n})\r\nexport class FreudDividerModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDividerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDividerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDynamicDialogModule",
            "id": "module-FreudDynamicDialogModule-5eb293f001c236b8e7784a7eab9331bf520eade9f7d6c605fcddc5ec109c418dc3233b8adca66ec88470e8658622392c7172c4fb49ba444855266529c47e45dd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DialogService } from \"primeng/dynamicdialog\";\r\nimport { DynamicDialogModule } from \"primeng/dynamicdialog\";\r\nimport { FreudDialogService, FreudDynamicDialogRef } from \"./dynamic-dialog.service\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, DynamicDialogModule],\r\n  providers: [\r\n    FreudDialogService,\r\n    FreudDynamicDialogRef,\r\n    DialogService\r\n  ]\r\n})\r\nexport class FreudDynamicDialogModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudDialogService"
                        },
                        {
                            "name": "FreudDynamicDialogRef"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudDynamicExampleModule",
            "id": "module-FreudDynamicExampleModule-6ab87b9ec1c69c0798838d885fb8565fef174b4ced554b1dfee065f4354b4168948b55e932fb662b0749ce4c6950d2c6bacc39cad61e9e82452d38b6b2246853",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudDynamicDialogModule } from \"@freud-ds/web-components\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudDynamicDialogModule, FreudButtonModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent],\r\n  exports: [FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent],\r\n  entryComponents: [FreudDynamicDialogExampleComponent, FreudDynamicExampleComponent]\r\n})\r\nexport class FreudDynamicExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudDynamicDialogExampleComponent"
                        },
                        {
                            "name": "FreudDynamicExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudDynamicDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudDynamicDialogExampleComponent"
                        },
                        {
                            "name": "FreudDynamicExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudFileUploadModule",
            "id": "module-FreudFileUploadModule-08f9eec237ffb45112a4b04a608f344660e55e3822069378f203a7e93441b98a354bf93ff994d83ab5169b065da3171dce7dcc29c87d14359932ce6053f38df5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/fille-upload/file-upload.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudFileUploadComponent } from './file-upload.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { FileUploadModule } from \"primeng/fileupload\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FileUploadModule, BrowserModule, BrowserAnimationsModule, FormsModule, HttpClientModule],\r\n  declarations: [FreudFileUploadComponent],\r\n  exports: [FreudFileUploadComponent]\r\n})\r\nexport class FreudFileUploadModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudFileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudFileUploadComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudFullCalendarModule",
            "id": "module-FreudFullCalendarModule-2b205ce8f531ea23e80202cf28176a6cfb514243c27506d6f2ea818ebb9b8ad1ae6d19a7c164d824febee734ecc4f9b3fff21f061e789f3c2cd80daa2b2ea84d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/full-calendar/full-calendar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudFullCalendarComponent } from './full-calendar.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { FullCalendarModule } from \"@fullcalendar/angular\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, FullCalendarModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudFullCalendarComponent],\r\n  exports: [FreudFullCalendarComponent]\r\n})\r\nexport class FreudFullCalendarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudFullCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudFullCalendarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudGalleryModule",
            "id": "module-FreudGalleryModule-4aeeb7aa3163488b3d1583613c9cf6c385f062bca73719c06c9996d11ebdcda34f1f9378f02d624538503ad074015b1c4b8a4fa6bd229474a21119e3d9698740",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/gallery/gallery.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudGalleryComponent } from './gallery.component';\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { GalleriaModule } from \"primeng/galleria\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, GalleriaModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudGalleryComponent],\r\n  exports: [FreudGalleryComponent]\r\n})\r\nexport class FreudGalleryModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudGalleryComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudGalleryComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudHeaderModule",
            "id": "module-FreudHeaderModule-181e311e2883a4712b7efd44fc7c78607023de0da0ee346af9932247a7e06607754a09bccfbaa9204d369e00ff986da3d0251902cfbdd4e804b0a800f1faff62",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/header/header.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudHeaderComponent } from './header.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [FreudHeaderComponent],\r\n  exports: [FreudHeaderComponent]\r\n})\r\nexport class FreudHeaderModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudHeaderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudImageModule",
            "id": "module-FreudImageModule-429921443999467e3b5e88ff1165f3f48f6d3ffdee41d5da11d38a7ad30e9ef8ab51dfb20f841be0478664d1614b4b561c7f2611715fd097a2d3d10b38494aec",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/media/image/image.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudImageComponent } from './image.component';\r\nimport { ImageModule } from \"primeng/image\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ImageModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudImageComponent],\r\n  exports: [FreudImageComponent]\r\n})\r\nexport class FreudImageModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudImageComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudImageComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputMaskModule",
            "id": "module-FreudInputMaskModule-767f853d3c172acc2a13778f11b27845637b812da7fe62d9e5697bf5fbc36e1f47a5c2908c366b1a9c557acaa8a371f62d3e86a946f644602b834a0633629574",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-mask/input-mask.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputMaskComponent } from './input-mask.component';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { InputMaskModule } from \"primeng/inputmask\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, InputMaskModule, ReactiveFormsModule],\r\n  declarations: [FreudInputMaskComponent],\r\n  exports: [FreudInputMaskComponent]\r\n})\r\nexport class FreudInputMaskModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputMaskComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputMaskComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputNumberModule",
            "id": "module-FreudInputNumberModule-57535c516a0cb60d632c32276de03a6e8e502989825ffdfdcd42e22a9f2009b7d4ad5872ea7955ff8556a9a2ea458828988cd2111e7b1687d458267c98c7158a",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-number/input-number.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputNumberComponent } from './input-number.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { InputNumberModule } from \"primeng/inputnumber\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, InputNumberModule, FormsModule],\r\n  declarations: [FreudInputNumberComponent],\r\n  exports: [FreudInputNumberComponent]\r\n})\r\nexport class FreudInputNumberModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputNumberComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputNumberComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputPasswordModule",
            "id": "module-FreudInputPasswordModule-80fc47ad7f6e8bf3344044a00b52650de4de58a7587e4fc38a5fd9b407daecb72028403fcafcdf148abe0329938bac3bee846fccb51f4fdbdacea86a6e987963",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-password/input-password.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputPasswordComponent } from './input-password.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { PasswordModule } from \"primeng/password\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\n\r\n@NgModule({\r\n    imports: [\r\n      CommonModule, FormsModule, PasswordModule, BrowserAnimationsModule,\r\n      BrowserModule],\r\n  declarations: [FreudInputPasswordComponent],\r\n  exports: [FreudInputPasswordComponent]\r\n})\r\nexport class FreudInputPasswordModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputPasswordComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputTextAreaModule",
            "id": "module-FreudInputTextAreaModule-408c6f2c9112a8fd3fffdfe597b4f4c645388c6dbd3443c4ac643a4acdd1f2ae586cc1c07f8511a5642e4ad40f6fe6b272b4a1c3a294b8cf85845ceaff7c1ae1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-textarea/input-textarea.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputTextAreaComponent } from './input-textarea.component';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { InputTextareaModule } from \"primeng/inputtextarea\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, InputTextareaModule, FormsModule, ReactiveFormsModule],\r\n  declarations: [FreudInputTextAreaComponent],\r\n  exports: [FreudInputTextAreaComponent]\r\n})\r\nexport class FreudInputTextAreaModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputTextAreaComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudInputTextModule",
            "id": "module-FreudInputTextModule-3ff6c6ee934ae63077c5d564893c6a9931735d38c1725d111c41ff1a6b986a391b10545361e4e19b4a1dacd8a32951250ed570be6712a44ab16fb2a6d229f4b7",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/input-text/input-text.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudInputTextComponent } from './input-text.component';\r\nimport { InputTextModule } from \"primeng/inputtext\";\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, InputTextModule, FormsModule],\r\n  declarations: [FreudInputTextComponent],\r\n  exports: [FreudInputTextComponent]\r\n})\r\nexport class FreudInputTextModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudInputTextComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudInputTextComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudKnobModule",
            "id": "module-FreudKnobModule-9a5b6f3e860e63416f9fa8367d70c8ae6acbfecb0d60e00a4c2a504a63c7362d131e178b3a4dd3b47bffcd3bfc569c3e1d415ea76983e9214ec0c01b5be1fd81",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/knob/knob.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { KnobModule } from 'primeng/knob';\r\n\r\nimport { FreudKnobComponent } from './knob.component';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, KnobModule, FormsModule],\r\n  declarations: [FreudKnobComponent],\r\n  exports: [FreudKnobComponent]\r\n})\r\nexport class FreudKnobModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudKnobComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudKnobComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudListboxModule",
            "id": "module-FreudListboxModule-7c2b616bd9924e4b241a8d1a15f9f31599392f858df5ffc7e6960f139825f2276a56b7cce57e7381aa9e85f0ba3d68e7e47c6c1c972f03ce76ee0dac25f2d846",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/listbox/listbox.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudListboxComponent } from './listbox.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { ListboxModule } from \"primeng/listbox\";\r\nimport { FreudInputTextModule } from \"../input-text\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ListboxModule, BrowserAnimationsModule, BrowserModule, FreudInputTextModule],\r\n  declarations: [FreudListboxComponent],\r\n  exports: [FreudListboxComponent]\r\n})\r\nexport class FreudListboxModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudListboxComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudInputTextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudListboxComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMenubarModule",
            "id": "module-FreudMenubarModule-92940fde9e20fd5abca803bae9b96d175f9c4a99bacc8d2538921f836670b758ce1e1d94eff74c9d83169dfb5166d1e41194c426fc395bc34d265900efaeb2d5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/menubar/menubar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudMenubarComponent } from './menubar.component';\r\nimport { MenubarModule } from \"primeng/menubar\";\r\nimport { SharedModule } from \"primeng/api\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, MenubarModule, SharedModule],\r\n  declarations: [FreudMenubarComponent],\r\n  exports: [FreudMenubarComponent]\r\n})\r\nexport class FreudMenubarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMenubarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMenubarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMenuModule",
            "id": "module-FreudMenuModule-f8f8769874432314826d3495711e9e95ddc62799975a70d010a6bf5bc71bc39b65f4d08e6ec9d9dbbd2ec139fef5c215a6a985645ca680d626a37e57b03a74cd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/menu/menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudMenuComponent } from \"./menu.component\";\r\nimport { MenuModule } from \"primeng/menu\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { RouterModule } from \"@angular/router\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, MenuModule, BrowserModule, BrowserAnimationsModule, RouterModule],\r\n  declarations: [FreudMenuComponent],\r\n  exports: [FreudMenuComponent]\r\n})\r\nexport class FreudMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudModalExampleModule",
            "id": "module-FreudModalExampleModule-a18fb46dc7cd4231a447fe567e060a6afecf2a5d61f6ffcb8f964601d9e36b48737a5dd25603e138bee61a888277c3442907fcac797c1447c0185d83954c260d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/modal-and-popover/modal-and-popover-examples/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudConfirmationDialogExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudConfirmDialogModule } from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudConfirmDialogModule, FreudButtonModule],\r\n  declarations: [FreudConfirmationDialogExampleComponent],\r\n  exports: [FreudConfirmationDialogExampleComponent]\r\n})\r\nexport class FreudModalExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudConfirmationDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudConfirmDialogModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudConfirmationDialogExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudMultiSelectModule",
            "id": "module-FreudMultiSelectModule-204b472bc2bba7be116af9f3eb9f5dff3cb2288d157c3b41320c02ba2a7b257453624ce5a8bd213fba55093bf0e43ca816356844ac0f2eeab7ff9f8f1486007b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/multi-select/multi-select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudMultiSelectComponent } from './multi-select.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { MultiSelectModule } from \"primeng/multiselect\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, MultiSelectModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudMultiSelectComponent],\r\n  exports: [FreudMultiSelectComponent]\r\n})\r\nexport class FreudMultiSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudMultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudMultiSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudPaginatorModule",
            "id": "module-FreudPaginatorModule-0da89a56247e65ddc235650e5512321f9e1b4a7eb4d1b3d1dd57b3cb8f76dc13b0c6b77843abe45692cddb3cc2376ffff82f32d708e2c9eddb1898836e22426f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/paginator/paginator.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudPaginatorComponent } from './paginator.component';\r\nimport { PaginatorModule } from \"primeng/paginator\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PaginatorModule],\r\n  declarations: [FreudPaginatorComponent],\r\n  exports: [FreudPaginatorComponent]\r\n})\r\nexport class FreudPaginatorModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudPaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudPaginatorComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudPanelMenuModule",
            "id": "module-FreudPanelMenuModule-3e984311b538e2846027fc81367794f8911f966cb44897885fa01b7bc5f3091de36abaf7230e1337667cee000711f3e8824c962de1e8887301604d70ed281ddf",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/panel-menu/panel-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudPanelMenuComponent } from \"./panel-menu.component\";\r\nimport { PanelMenuModule } from \"primeng/panelmenu\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PanelMenuModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudPanelMenuComponent],\r\n  exports: [FreudPanelMenuComponent]\r\n})\r\nexport class FreudPanelMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudPanelMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudPanelMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudPanelModule",
            "id": "module-FreudPanelModule-b1b81271509d611fd019e5bd23c6810747e6db5dd8397b71d18b7e16fe37aacde92401b7a3b1c94fe4d139bd416c3397f5abfe8e491bfa6f72f7ba13f923f56d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/panel/panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudPanelComponent } from \"./panel.component\";\r\nimport { PanelModule } from \"primeng/panel\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, PanelModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudPanelComponent],\r\n  exports: [FreudPanelComponent]\r\n})\r\nexport class FreudPanelModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudProgressBarModule",
            "id": "module-FreudProgressBarModule-5fc02a7c95e6e48dca0d8ad55e6072fc2c02021bca9021156029660a1af67ba7c52dbd4e15028fc996db1c62b1897aad3837302dcb40ee010dbe4b65183cb539",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/progress-bar/progress-bar.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudProgressBarComponent } from './progress-bar.component';\r\nimport { ProgressBarModule } from \"primeng/progressbar\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ProgressBarModule],\r\n  declarations: [FreudProgressBarComponent],\r\n  exports: [FreudProgressBarComponent]\r\n})\r\nexport class FreudProgressBarModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudProgressBarComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudProgressSpinnerModule",
            "id": "module-FreudProgressSpinnerModule-d051fb1586a5c32f1a02039291b586424bc8ad7b56eeb2ef6acdcbfc86a17d5cc5e73f3a1d65e0a0f005250bba25a4623a58cee0049b0aca821278b4492ea5e3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudProgressSpinnerComponent } from './progress-spinner.component';\r\nimport { ProgressSpinnerModule } from \"primeng/progressspinner\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ProgressSpinnerModule],\r\n  declarations: [FreudProgressSpinnerComponent],\r\n  exports: [FreudProgressSpinnerComponent]\r\n})\r\nexport class FreudProgressSpinnerModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudProgressSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudProgressSpinnerComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRadioButtonExampleModule",
            "id": "module-FreudRadioButtonExampleModule-9eb367b411592ca85dddf693aaedca87165f55ab685314c292f2b5b076dd093c29a6c02d73f256951e3a7d323a1ad35f61705ac9452eb50c8eaf593e0f396ca5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/radio-button/radio-button-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudRadioButtonExampleComponent } from './example.component';\r\nimport {\r\n  FreudRadioButtonModule,\r\n} from \"@freud-ds/web-components\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudRadioButtonModule, ReactiveFormsModule, FormsModule],\r\n  declarations: [FreudRadioButtonExampleComponent],\r\n  exports: [FreudRadioButtonExampleComponent]\r\n})\r\nexport class FreudRadioButtonExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRadioButtonExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRadioButtonModule",
            "id": "module-FreudRadioButtonModule-ae10e65369462fd926fe68d19e76dbfcda8f5e18863c046aa462f05af85f854aba309df196479389b772da91f5e13c0c05a08d1ee9e63d4fb544e7b3e9d282ed",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/radio-button/radio-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudRadioButtonComponent } from './radio-button.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { RadioButtonModule } from \"primeng/radiobutton\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, RadioButtonModule, FormsModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudRadioButtonComponent],\r\n  exports: [FreudRadioButtonComponent]\r\n})\r\nexport class FreudRadioButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRadioButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudRatingModule",
            "id": "module-FreudRatingModule-86984f9dac0e52b4c7ca32137cd604f55510450431cc5275eabc0a5f84d98a2935e5c24fb00fd6f19067841d44e70c69a2c3dba3435288529088a2e957e2c77f",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/rating/rating.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { RatingModule } from \"primeng/rating\";\r\n\r\nimport { FreudRatingComponent } from './rating.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, RatingModule, FormsModule],\r\n  declarations: [FreudRatingComponent],\r\n  exports: [FreudRatingComponent]\r\n})\r\nexport class FreudRatingModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudRatingComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudRatingComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudReactiveFormExampleModule",
            "id": "module-FreudReactiveFormExampleModule-51c7801ea95c590a8d7d8bdd37d91e8dfbec10b4646e0a281385c821480ee482eaf19e3fe620a7d0d3b1f1deeec1c873508b1d639edbffac6c6d10be2747e579",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/forms/reactive-form-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudReactiveFormExampleComponent } from './example.component';\r\nimport {\r\n  FreudButtonModule,\r\n  FreudInputTextModule\r\n} from \"@freud-ds/web-components\";\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudInputTextModule, FreudButtonModule, ReactiveFormsModule, FormsModule],\r\n  declarations: [FreudReactiveFormExampleComponent],\r\n  exports: [FreudReactiveFormExampleComponent]\r\n})\r\nexport class FreudReactiveFormExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudReactiveFormExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudInputTextModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudReactiveFormExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollPanelModule",
            "id": "module-FreudScrollPanelModule-8380b81dfa903d0dd08fd2113dcf6417a774dc0729688ddd470a141815f6fbde4eaa30109b0b65f743cdbef8a9a4b8d749767999dde05b49bc3e67c4138749d4",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudScrollPanelComponent } from \"./scroll-panel.component\";\r\nimport { ScrollPanelModule } from \"primeng/scrollpanel\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ScrollPanelModule],\r\n  declarations: [FreudScrollPanelComponent],\r\n  exports: [FreudScrollPanelComponent]\r\n})\r\nexport class FreudScrollPanelModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollPanelComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudScrollPanelComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollTopModule",
            "id": "module-FreudScrollTopModule-9d49e0437d3d28c28e187742aef4bccb2696e53047526e56cc94029f1d569080a3d829cf777e40ba92ae80111daee370debedfa4ba8115bd0357f645fac6bb06",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/scroll-top/scroll-top.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudScrollTopComponent } from './scroll-top.component';\r\nimport { ScrollTopModule } from \"primeng/scrolltop\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ScrollTopModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudScrollTopComponent],\r\n  exports: [FreudScrollTopComponent]\r\n})\r\nexport class FreudScrollTopModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudScrollTopModule",
            "id": "module-FreudScrollTopModule-4d765d03208662b4a354519bc109bb45d0156c85d99aa96d053f63f7aa4db2e07756647c0fc5feee465f38d2cfc42bd0c771e8004a9942e3af87fdb39d5e1c40-1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/timeline/timeline.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudScrollTopComponent } from './timeline.component';\r\nimport { ScrollTopModule } from \"primeng/scrolltop\";\r\nimport { TimelineModule } from \"primeng/timeline\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, ScrollTopModule, TimelineModule],\r\n  declarations: [FreudScrollTopComponent],\r\n  exports: [FreudScrollTopComponent]\r\n})\r\nexport class FreudScrollTopModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudScrollTopComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSelectButtonModule",
            "id": "module-FreudSelectButtonModule-097a49c02ac7d56cb40c03fce8fd080ba07cac43006ee63e69f6f64cef6811e8adece1116a2585101c325229b90a0351aab438a4f7e1856202fc44e5808bd30d",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/select-button/select-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SelectButtonModule } from 'primeng/selectbutton';\r\n\r\nimport { FreudSelectButtonComponent } from './select-button.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SelectButtonModule, FormsModule],\r\n  declarations: [FreudSelectButtonComponent],\r\n  exports: [FreudSelectButtonComponent]\r\n})\r\nexport class FreudSelectButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSelectButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSelectButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSelectModule",
            "id": "module-FreudSelectModule-c8c0a015de2bd3b592f681ba2191d574335ec1ffb601b9d53386e86dd41f19bf4a0dff5cc09cd42030025c717589d89929b5df7960e66d97d97f67908b3701dd",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/select/select.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSelectComponent } from './select.component';\r\nimport { FormsModule, ReactiveFormsModule } from \"@angular/forms\";\r\nimport { DropdownModule } from \"primeng/dropdown\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FormsModule, DropdownModule, ReactiveFormsModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudSelectComponent],\r\n  exports: [FreudSelectComponent]\r\n})\r\nexport class FreudSelectModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSelectComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSelectComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSkeletonModule",
            "id": "module-FreudSkeletonModule-4755659213e37c1b06ee4789655eff93eb011282aca298cf8111ced9c2adf9b299e074929f94f6914a24ba502df46fcd7536e0dcd73eaa5b878568d6324814a2",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/skeleton/skeleton.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSkeletonComponent } from './skeleton.component';\r\nimport { SkeletonModule } from \"primeng/skeleton\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SkeletonModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudSkeletonComponent],\r\n  exports: [FreudSkeletonComponent]\r\n})\r\nexport class FreudSkeletonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSkeletonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSlideMenuModule",
            "id": "module-FreudSlideMenuModule-c95f181060173df5d8809fb9edc65ea944b67e6bd33aaf70d081f1cd04af89c005295b13c7205c23db9b82eea9822d74a8e72810f6be95c583bee4d766f23d1b",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/slide-menu/slide-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSlideMenuComponent } from \"./slide-menu.component\";\r\nimport { SlideMenuModule } from \"primeng/slidemenu\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SlideMenuModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudSlideMenuComponent],\r\n  exports: [FreudSlideMenuComponent]\r\n})\r\nexport class FreudSlideMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSlideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSlideMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSliderModule",
            "id": "module-FreudSliderModule-e9dc57fa76b019163aaf7fb247cf090f331c5ddde56b74a45c5649c082f1ef3a9a34e1cc3634ada373a80a58cb94fa73bfecc80c6d87383cdbcef0d9c2434fbc",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/slider/slider.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSliderComponent } from './slider.component';\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport { SliderModule } from \"primeng/slider\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SliderModule, FormsModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudSliderComponent],\r\n  exports: [FreudSliderComponent]\r\n})\r\nexport class FreudSliderModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSliderComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSliderComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSpeedDialModule",
            "id": "module-FreudSpeedDialModule-8fa2965dbcbdcca4c5dd0ceb3c7c1f8ec681cf5ca012f194cd0f801458cca2a82206f36fd269bef7063e86125d7124da6d79f2bd70acc590935dd323276201fa",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSpeedDialComponent } from './speed-dial.component';\r\nimport { SpeedDialModule } from \"primeng/speeddial\";\r\nimport { FreudTooltipModule } from \"../../feedback/tooltip\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SpeedDialModule, FreudTooltipModule],\r\n  declarations: [FreudSpeedDialComponent],\r\n  exports: [FreudSpeedDialComponent]\r\n})\r\nexport class FreudSpeedDialModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSpeedDialComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudTooltipModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSpeedDialComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSplitButtonModule",
            "id": "module-FreudSplitButtonModule-159a536ce319318fa41d128a50d55eefa2a709cf8499da060ea40ab5d23971dce3be056aa89a782eb9454859b5c2fc32c0dfc80500c56c9de5cd82aab2701701",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/buttons/split-button/split-button.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SplitButtonModule } from 'primeng/splitbutton';\r\n\r\nimport { FreudSplitButtonComponent } from './split-button.component';\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, SplitButtonModule, BrowserAnimationsModule, BrowserModule],\r\n  declarations: [FreudSplitButtonComponent],\r\n  exports: [FreudSplitButtonComponent]\r\n})\r\nexport class FreudSplitButtonModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSplitButtonComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSplitterModule",
            "id": "module-FreudSplitterModule-49b6c7b6b360c0e583c2734fb77bd950ad41f15917f6038a6b95c2d8dd3ddf487203b383ec0a9235ef2b626ce8a91ea0eb32e75b14b087d220a5f8dc4074db7e",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/splitter/splitter.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSplitterComponent } from \"./splitter.component\";\r\nimport { SplitterModule } from \"primeng/splitter\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SplitterModule],\r\n  declarations: [FreudSplitterComponent],\r\n  exports: [FreudSplitterComponent]\r\n})\r\nexport class FreudSplitterModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSplitterComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSplitterComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudStepsModule",
            "id": "module-FreudStepsModule-06c0e29b5142632969f575193eca81c047388808934318a5a9fa1c6b7b2f394d4fa6c8aa63255ae01bc20a10dd2e8d00ea3b5b29e009821227f50c055ac4c2a9",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/steps/steps.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { StepsModule } from 'primeng/steps';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\n\r\nimport { FreudStepsComponent } from './steps.component';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, StepsModule, RouterModule, BrowserAnimationsModule],\r\n  declarations: [FreudStepsComponent],\r\n  exports: [FreudStepsComponent]\r\n})\r\nexport class FreudStepsModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudStepsComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudStepsComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudSwitchModule",
            "id": "module-FreudSwitchModule-4ef3afc698d214f5ea6ef7a359b17b6734cade6198bd709a170a5b48f0a60779db7ce5c0a95881c5d413b7b644168a316ee3aa0c1dbe69afc07dce65823c62f3",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/forms/switch/switch.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSwitchComponent } from './switch.component';\r\nimport { FormsModule } from \"@angular/forms\";\r\nimport { InputSwitchModule } from \"primeng/inputswitch\";\r\n\r\n@NgModule({\r\n    imports: [CommonModule, InputSwitchModule, FormsModule],\r\n  declarations: [FreudSwitchComponent],\r\n  exports: [FreudSwitchComponent]\r\n})\r\nexport class FreudSwitchModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSwitchComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTableModule",
            "id": "module-FreudTableModule-3a0c8a2f222631e46c5e73f01502356ad9d113f290c01ef250cafcb83bc6d7ef27a0d1143990a5f2ff83ede70059eec7f0c450e929ad6b10e545ef7203a4e0ff",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/others/table/table.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudSortableColumn, FreudSortIcon, FreudTableComponent } from './table.component';\r\nimport { CardModule } from \"primeng/card\";\r\nimport { TableModule, TableService } from \"primeng/table\";\r\nimport { FreudTemplateModule } from \"../../directive/template\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, CardModule, TableModule, FreudTemplateModule],\r\n  declarations: [FreudTableComponent, FreudSortableColumn, FreudSortIcon],\r\n  exports: [FreudTableComponent, FreudSortableColumn, FreudSortIcon],\r\n  providers: [TableService]\r\n})\r\nexport class FreudTableModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudSortIcon"
                        },
                        {
                            "name": "FreudSortableColumn"
                        },
                        {
                            "name": "FreudTableComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudTemplateModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudSortIcon"
                        },
                        {
                            "name": "FreudSortableColumn"
                        },
                        {
                            "name": "FreudTableComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTabMenuModule",
            "id": "module-FreudTabMenuModule-1bcd500de154639a20290eb4ea3b94aad9a4dd8c620c4bc896ac2ea3986d310a68ee7f8c9a80db3175481a0f76d0bb1884f8bce4fc23ac6f4d7f93025e750e24",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/tab-menu/tab-menu.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudTabMenuComponent } from \"./tab-menu.component\";\r\nimport { TabMenuModule } from \"primeng/tabmenu\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TabMenuModule],\r\n  declarations: [FreudTabMenuComponent],\r\n  exports: [FreudTabMenuComponent]\r\n})\r\nexport class FreudTabMenuModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTabMenuComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTabMenuComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTabViewModule",
            "id": "module-FreudTabViewModule-f00e3308c5a41961732a64bd44fc56f5b5a5c961670121d5eca45038a0d67dbc54f60e67a5338d6cba12f86c4734c52b96cf5ce75272bee7ee500b699d8f4ae1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/structure/tab-view/tab-view.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudTabPanelComponent, FreudTabViewComponent } from \"./tab-view.component\";\r\nimport { TabView, TabViewModule } from \"primeng/tabview\";\r\nimport { SharedModule } from \"primeng/api\";\r\nimport { RippleModule } from \"primeng/ripple\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, SharedModule, RippleModule, TabViewModule],\r\n  declarations: [FreudTabViewComponent, FreudTabPanelComponent],\r\n  exports: [FreudTabViewComponent, FreudTabPanelComponent],\r\n  providers: [TabView]\r\n})\r\nexport class FreudTabViewModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTabPanelComponent"
                        },
                        {
                            "name": "FreudTabViewComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTabPanelComponent"
                        },
                        {
                            "name": "FreudTabViewComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTagModule",
            "id": "module-FreudTagModule-eba9628c1ea690c965640583d11a54bc3dde16d2cf3e40a2825f85ee0d84f27f92609b872951bff6b7b18d4bc56c1c5aeddfdce37e0cc7e4a305b23b2652c967",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/tag/tag.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TagModule  } from 'primeng/tag';\r\n\r\nimport { FreudTagComponent } from './tag.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TagModule],\r\n  declarations: [FreudTagComponent],\r\n  exports: [FreudTagComponent]\r\n})\r\nexport class FreudTagModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTagComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTagComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTemplateModule",
            "id": "module-FreudTemplateModule-c6572f008ca65589f5be5985a1e1d3d941b25bae56733595783f2e6ce426884f541d486e8b4e07ac253a003651e0c32ec84e3780ccc567c774d79c3c9a618948",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/directive/template/template.ts",
            "methods": [],
            "sourceCode": "import { NgModule, Directive, Input, TemplateRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Directive({\r\n  selector: '[freudTemplate]',\r\n  host: {}\r\n})\r\nexport class FreudTemplate {\r\n  @Input() type!: string;\r\n\r\n  @Input('freudTemplate') name!: string;\r\n\r\n  constructor(public template: TemplateRef<any>) {}\r\n\r\n  getType(): string {\r\n    return this.name;\r\n  }\r\n}\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  exports: [FreudTemplate],\r\n  declarations: [FreudTemplate]\r\n})\r\nexport class FreudTemplateModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTemplate"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTemplate"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudToastExampleModule",
            "id": "module-FreudToastExampleModule-d3ff7ae8e3dd156dc49991848725f909440eda30688f06b03422013cb8cbbdc6a963815d79708730893a76f39072de77f532ff57045321adf0280e9cfbd75cd0",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "stories/feedback/toast/toast-example/example.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudToastExampleComponent } from './example.component';\r\nimport { FreudButtonModule, FreudToastModule } from \"@freud-ds/web-components\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, FreudToastModule, FreudButtonModule],\r\n  declarations: [FreudToastExampleComponent],\r\n  exports: [FreudToastExampleComponent]\r\n})\r\nexport class FreudToastExampleModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudToastExampleComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "FreudButtonModule"
                        },
                        {
                            "name": "FreudToastModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudToastExampleComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudToastModule",
            "id": "module-FreudToastModule-3c1eae9c700266b9adff10cab9fe63a607cec9afd6132390ae7ffb9320040c6f739a9ac2a26b7b617ae6fae69bff2e2fbcd48b72b5c309ba6e5778c3301c6be5",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/toast/toast.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ToastModule } from \"primeng/toast\";\r\nimport { MessageService } from \"primeng/api\";\r\n\r\nimport { FreudToastComponent } from './toast.component';\r\nimport { FreudMessageService } from \"../../../services/message.service\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { BrowserAnimationsModule } from \"@angular/platform-browser/animations\";\r\n\r\n@NgModule({\r\n  imports: [CommonModule, ToastModule, BrowserModule, BrowserAnimationsModule],\r\n  declarations: [FreudToastComponent],\r\n  exports: [FreudToastComponent],\r\n  providers: [FreudMessageService, MessageService]\r\n})\r\nexport class FreudToastModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": [
                        {
                            "name": "FreudMessageService"
                        }
                    ]
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudToastComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudToastComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTooltipModule",
            "id": "module-FreudTooltipModule-7a4dbe2e52b385b237b72a5f80f960bbaf77c340077a1b2f207f107659a3577d712996079f2bc3b89f27f0ebb8e1b61f8b70e5ad8ad48ecf37fd7c950a876614",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/feedback/tooltip/tooltip.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { FreudTooltipComponent } from './tooltip.component';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\n\r\n@NgModule({\r\n  imports: [CommonModule, TooltipModule],\r\n  declarations: [FreudTooltipComponent],\r\n  exports: [FreudTooltipComponent]\r\n})\r\nexport class FreudTooltipModule { }\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTooltipComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "FreudTypographyModule",
            "id": "module-FreudTypographyModule-763a06fdd0b7c597320200983edb506c090417074deb81fbb891a289348ef0701360036a4c1f4b11135a3af4b9e98889a91ae71b1eb7850cb5307f6b4e593cef",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "projects/web-components/src/components/typography/typography.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FreudTypographyComponent } from './typography.component';\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [FreudTypographyComponent],\r\n  exports: [FreudTypographyComponent],\r\n})\r\nexport class FreudTypographyModule {}\r\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "FreudTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": [
                        {
                            "name": "FreudTypographyComponent"
                        }
                    ]
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Actived",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBlank.bind({})"
            },
            {
                "name": "Advanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAdvanced.bind({})"
            },
            {
                "name": "AutoResize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Basic",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BasicUi",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBGColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRadioAndButton.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFeedback.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/captcha/Captcha.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateAdvanced.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTargetBGColor.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSort.bind({})"
            },
            {
                "name": "BGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "BGColorOutline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBgColor.bind({})"
            },
            {
                "name": "bodyTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typrography.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // Regular\r\n  'smallRegular1-5',\r\n  'bodyRegular1-5',\r\n\r\n  'smallRegular1-2',\r\n  'bodyRegular1-2',\r\n\r\n  'smallRegular1',\r\n  'bodyRegular1',\r\n  \r\n  'smallRegularAuto',\r\n  'bodyRegularAuto',\r\n\r\n  // Semibold\r\n  'smallSemibold1-5',\r\n  'bodySemibold1-5',\r\n\r\n  'smallSemibold1-2',\r\n  'bodySemibold1-2',\r\n\r\n  'smallSemibold1',\r\n  'bodySemibold1',\r\n\r\n  'smallSemiboldAuto',\r\n  'bodySemiboldAuto',\r\n\r\n  // Bold\r\n  'smallBold1-5',\r\n  'bodyBold1-5',\r\n\r\n  'smallBold1-2',\r\n  'bodyBold1-2',\r\n\r\n  'smallBold1',\r\n  'bodyBold1',\r\n\r\n  'smallBoldAuto',\r\n  'bodyBoldAuto',\r\n]"
            },
            {
                "name": "Bottom",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "ButtonLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateButtonLayout.bind({})"
            },
            {
                "name": "calendarOptions",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CalendarOptions",
                "defaultValue": "{\r\n  initialView: 'dayGridMonth',\r\n  plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\r\n  headerToolbar: {\r\n    left: 'prev,next today',\r\n    center: 'title',\r\n    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n  },\r\n  events: [\r\n    { title: 'event 1', date: '2022-12-12' },\r\n    { title: 'event 2', date: '2022-12-24' }\r\n  ]\r\n}"
            },
            {
                "name": "CaptionAndSummary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCaptionAndSummary.bind({})"
            },
            {
                "name": "Celular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Checkbox",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CheckboxAndFilter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CheckboxAndText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCheckboxAndText.bind({})"
            },
            {
                "name": "Chip",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "context",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
            },
            {
                "name": "CPF",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CustomHeader",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "CustomTemplate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFull.bind({})"
            },
            {
                "name": "data",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dataJson['data']"
            },
            {
                "name": "Data",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/toast/Toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/captcha/Captcha.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Default",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DirectionDown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "DirectionLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDisabled.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDisabled.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Disabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Dropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateDropdown.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Feedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFeedback.bind({})"
            },
            {
                "name": "Filter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Footer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateFooter.bind({})"
            },
            {
                "name": "Ghost",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HeadingBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "HeadingBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateBold.bind({})"
            },
            {
                "name": "HeadingRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRegular.bind({})"
            },
            {
                "name": "HeadingSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSemibold.bind({})"
            },
            {
                "name": "headingTypes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typrography.type.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  // Regular\r\n  'h1Regular1-5',\r\n  'h2Regular1-5',\r\n  'h3Regular1-5',\r\n  'h4Regular1-5',\r\n  'h5Regular1-5',\r\n  'h6Regular1-5',\r\n\r\n  'h1Regular1-2',\r\n  'h2Regular1-2',\r\n  'h3Regular1-2',\r\n  'h4Regular1-2',\r\n  'h5Regular1-2',\r\n  'h6Regular1-2',\r\n\r\n  'h1Regular1',\r\n  'h2Regular1',\r\n  'h3Regular1',\r\n  'h4Regular1',\r\n  'h5Regular1',\r\n  'h6Regular1',\r\n  \r\n  'h1RegularAuto',\r\n  'h2RegularAuto',\r\n  'h3RegularAuto',\r\n  'h4RegularAuto',\r\n  'h5RegularAuto',\r\n  'h6RegularAuto',\r\n\r\n  // Semibold\r\n  'h1Semibold1-5',\r\n  'h2Semibold1-5',\r\n  'h3Semibold1-5',\r\n  'h4Semibold1-5',\r\n  'h5Semibold1-5',\r\n  'h6Semibold1-5',\r\n\r\n  'h1Semibold1-2',\r\n  'h2Semibold1-2',\r\n  'h3Semibold1-2',\r\n  'h4Semibold1-2',\r\n  'h5Semibold1-2',\r\n  'h6Semibold1-2',\r\n\r\n  'h1Semibold1',\r\n  'h2Semibold1',\r\n  'h3Semibold1',\r\n  'h4Semibold1',\r\n  'h5Semibold1',\r\n  'h6Semibold1',\r\n\r\n  'h1SemiboldAuto',\r\n  'h2SemiboldAuto',\r\n  'h3SemiboldAuto',\r\n  'h4SemiboldAuto',\r\n  'h5SemiboldAuto',\r\n  'h6SemiboldAuto',\r\n\r\n  // Bold\r\n  'h1Bold1-5',\r\n  'h2Bold1-5',\r\n  'h3Bold1-5',\r\n  'h4Bold1-5',\r\n  'h5Bold1-5',\r\n  'h6Bold1-5',\r\n\r\n  'h1Bold1-2',\r\n  'h2Bold1-2',\r\n  'h3Bold1-2',\r\n  'h4Bold1-2',\r\n  'h5Bold1-2',\r\n  'h6Bold1-2',\r\n\r\n  'h1Bold1',\r\n  'h2Bold1',\r\n  'h3Bold1',\r\n  'h4Bold1',\r\n  'h5Bold1',\r\n  'h6Bold1',\r\n\r\n  'h1BoldAuto',\r\n  'h2BoldAuto',\r\n  'h3BoldAuto',\r\n  'h4BoldAuto',\r\n  'h5BoldAuto',\r\n  'h6BoldAuto',\r\n]"
            },
            {
                "name": "HelperText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem",
                "defaultValue": "{\r\n  icon: 'freud-icon freud-icon-home'\r\n}"
            },
            {
                "name": "home",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem",
                "defaultValue": "{\r\n  icon: 'freud-icon freud-icon-home'\r\n}"
            },
            {
                "name": "Horizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateHorizontal.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Icon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIcon.bind({})"
            },
            {
                "name": "IconAndRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconAndRadio.bind({})"
            },
            {
                "name": "IconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconLeft.bind({})"
            },
            {
                "name": "IconOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIcon.bind({})"
            },
            {
                "name": "IconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIconRight.bind({})"
            },
            {
                "name": "Icons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateIcons.bind({})"
            },
            {
                "name": "Imagem",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "images",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria1.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria1.jpg\",\r\n    \"alt\": \"Description for Image 1\",\r\n    \"title\": \"Title 1\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria2.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria2.jpg\",\r\n    \"alt\": \"Description for Image 2\",\r\n    \"title\": \"Title 2\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria3.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria3.jpg\",\r\n    \"alt\": \"Description for Image 3\",\r\n    \"title\": \"Title 3\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria4.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria4.jpg\",\r\n    \"alt\": \"Description for Image 4\",\r\n    \"title\": \"Title 4\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria5.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria5.jpg\",\r\n    \"alt\": \"Description for Image 5\",\r\n    \"title\": \"Title 5\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria6.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria6.jpg\",\r\n    \"alt\": \"Description for Image 6\",\r\n    \"title\": \"Title 6\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria7.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria7.jpg\",\r\n    \"alt\": \"Description for Image 7\",\r\n    \"title\": \"Title 7\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria8.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria8.jpg\",\r\n    \"alt\": \"Description for Image 8\",\r\n    \"title\": \"Title 8\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria9.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria9.jpg\",\r\n    \"alt\": \"Description for Image 9\",\r\n    \"title\": \"Title 9\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria10.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria10.jpg\",\r\n    \"alt\": \"Description for Image 10\",\r\n    \"title\": \"Title 10\"\r\n  }\r\n]"
            },
            {
                "name": "Indeterminate",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Info",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Inline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateInline.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Invalid",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {label: 'Update', icon: 'freud-icon freud-icon-refresh', command: () => {\r\n      console.log('Evento update')\r\n    }\r\n  },\r\n  {\r\n    label: 'Delete', icon: 'freud-icon freud-icon-close', command: () => {\r\n      console.log('Evento delete')\r\n    },\r\n  },\r\n  {label: 'Zenklub', icon: 'freud-icon freud-icon-info', url: 'http://zenklub.com'},\r\n  {separator: true},\r\n  {label: 'Setup', icon: 'freud-icon freud-icon-cog'}\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {\r\n    name: 'Australia',\r\n    code: 'AU',\r\n    states: [\r\n      {\r\n        name: 'New South Wales',\r\n        cities: [\r\n          {cname: 'Sydney', code: 'A-SY'},\r\n          {cname: 'Newcastle', code: 'A-NE'},\r\n          {cname: 'Wollongong', code: 'A-WO'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Queensland',\r\n        cities: [\r\n          {cname: 'Brisbane', code: 'A-BR'},\r\n          {cname: 'Townsville', code: 'A-TO'}\r\n        ]\r\n      },\r\n\r\n    ]\r\n  },\r\n  {\r\n    name: 'Canada',\r\n    code: 'CA',\r\n    states: [\r\n      {\r\n        name: 'Quebec',\r\n        cities: [\r\n          {cname: 'Montreal', code: 'C-MO'},\r\n          {cname: 'Quebec City', code: 'C-QU'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Ontario',\r\n        cities: [\r\n          {cname: 'Ottawa', code: 'C-OT'},\r\n          {cname: 'Toronto', code: 'C-TO'}\r\n        ]\r\n      },\r\n\r\n    ]\r\n  },\r\n  {\r\n    name: 'United States',\r\n    code: 'US',\r\n    states: [\r\n      {\r\n        name: 'California',\r\n        cities: [\r\n          {cname: 'Los Angeles', code: 'US-LA'},\r\n          {cname: 'San Diego', code: 'US-SD'},\r\n          {cname: 'San Francisco', code: 'US-SF'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Florida',\r\n        cities: [\r\n          {cname: 'Jacksonville', code: 'US-JA'},\r\n          {cname: 'Miami', code: 'US-MI'},\r\n          {cname: 'Tampa', code: 'US-TA'},\r\n          {cname: 'Orlando', code: 'US-OR'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Texas',\r\n        cities: [\r\n          {cname: 'Austin', code: 'US-AU'},\r\n          {cname: 'Dallas', code: 'US-DA'},\r\n          {cname: 'Houston', code: 'US-HO'}\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {name: 'New York', code: 'NY'},\r\n  {name: 'Rome', code: 'RM', disabled: true},\r\n  {name: 'London', code: 'LDN'},\r\n  {name: 'Istanbul', code: 'IST'},\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {name: 'New York', code: 'NY'},\r\n  {name: 'Rome', code: 'RM', disabled: true},\r\n  {name: 'London', code: 'LDN'},\r\n  {name: 'Istanbul', code: 'IST'},\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {name: 'New York', code: 'NY'},\r\n  {name: 'Rome', code: 'RM', disabled: true},\r\n  {name: 'London', code: 'LDN'},\r\n  {name: 'Istanbul', code: 'IST'},\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[{\r\n  label: 'Options',\r\n  items: [{\r\n    label: 'Update',\r\n    icon: 'freud-icon freud-icon-refresh',\r\n    command: () => {/* Comando */ }\r\n  },\r\n    {\r\n      label: 'Delete',\r\n      icon: 'freud-icon freud-icon-times'\r\n    }\r\n  ]},\r\n  {\r\n    label: 'Navigate',\r\n    items: [{\r\n      label: 'Update',\r\n      icon: 'freud-icon freud-icon-external-link',\r\n    },\r\n      {\r\n        label: 'Router',\r\n        icon: 'freud-icon freud-icon-upload',\r\n        routerLink: '/fileupload'\r\n      }\r\n    ]}\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {\r\n    label:'Users',\r\n    icon:'freud-icon freud-icon-user',\r\n    items:[\r\n      {\r\n        label:'New',\r\n        icon:'freud-icon freud-icon-user-plus',\r\n\r\n      },\r\n      {\r\n        label:'Delete',\r\n        icon:'freud-icon freud-icon-user-minus',\r\n\r\n      },\r\n      {\r\n        label:'Search',\r\n        icon:'freud-icon freud-icon-users',\r\n        items:[\r\n          {\r\n            label:'Filter',\r\n            icon:'freud-icon freud-icon-filter',\r\n            items:[\r\n              {\r\n                label:'Print',\r\n                icon:'freud-icon freud-icon-print'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            icon:'freud-icon freud-icon-bars',\r\n            label:'List'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label:'Events',\r\n    icon:'freud-icon freud-icon-calendar',\r\n    items:[\r\n      {\r\n        label:'Edit',\r\n        icon:'freud-icon freud-icon-pencil',\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    label:'Quit',\r\n    icon:'freud-icon freud-icon-power-off'\r\n  }\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {\r\n    label: 'File',\r\n    items: [{\r\n      label: 'New',\r\n      icon: 'freud-icon freud-icon-fw freud-icon-plus',\r\n      items: [\r\n        {label: 'User', icon: 'freud-icon freud-icon-fw freud-icon-user-plus'},\r\n        {label: 'Filter', icon: 'freud-icon freud-icon-fw freud-icon-filter'}\r\n      ]\r\n    },\r\n      {label: 'Open', icon: 'freud-icon freud-icon-fw freud-icon-external-link'},\r\n      {separator: true},\r\n      {label: 'Quit', icon: 'freud-icon freud-icon-fw freud-icon-times'}\r\n    ]\r\n  },\r\n  {\r\n    label: 'Edit',\r\n    icon: 'freud-icon freud-icon-fw freud-icon-pencil',\r\n    items: [\r\n      {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-trash'},\r\n      {label: 'Refresh', icon: 'freud-icon freud-icon-fw freud-icon-refresh'}\r\n    ]\r\n  },\r\n  {\r\n    label: 'Help',\r\n    icon: 'freud-icon freud-icon-fw freud-icon-question',\r\n    items: [\r\n      {\r\n        label: 'Contents',\r\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-bars'\r\n      },\r\n      {\r\n        label: 'Search',\r\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-search',\r\n        items: [\r\n          {\r\n            label: 'Text',\r\n            items: [\r\n              {\r\n                label: 'Workspace'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            label: 'User',\r\n            icon: 'freud-icon freud-icon-fw freud-icon-file',\r\n          }\r\n        ]}\r\n    ]\r\n  },\r\n  {\r\n    label: 'Actions',\r\n    icon: 'freud-icon freud-icon-fw freud-icon-cog',\r\n    items: [\r\n      {\r\n        label: 'Edit',\r\n        icon: 'freud-icon freud-icon-fw freud-icon-pencil',\r\n        items: [\r\n          {label: 'Save', icon: 'freud-icon freud-icon-fw freud-icon-save'},\r\n          {label: 'Update', icon: 'freud-icon freud-icon-fw freud-icon-save'},\r\n        ]\r\n      },\r\n      {\r\n        label: 'Other',\r\n        icon: 'freud-icon freud-icon-fw freud-icon-tags',\r\n        items: [\r\n          {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-minus'}\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {label: 'Home', command: () => console.log('menuClicked')},\r\n  {label: 'Calendar', command: () => console.log('menuClicked')},\r\n  {label: 'Edit', command: () => console.log('menuClicked')},\r\n  {label: 'Documentation', command: () => console.log('menuClicked')},\r\n  {label: 'Settings', command: () => console.log('menuClicked')}\r\n]"
            },
            {
                "name": "items",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[{\r\n  label: 'Options',\r\n  items: [{\r\n    label: 'Update',\r\n    icon: 'freud-icon freud-icon-refresh',\r\n    command: () => {/* Comando */ }\r\n  },\r\n    {\r\n      label: 'Delete',\r\n      icon: 'freud-icon freud-icon-times'\r\n    }\r\n  ]},\r\n  {\r\n    label: 'Navigate',\r\n    items: [{\r\n      label: 'Update',\r\n      icon: 'freud-icon freud-icon-external-link',\r\n    },\r\n      {\r\n        label: 'Router',\r\n        icon: 'freud-icon freud-icon-upload',\r\n        routerLink: '/fileupload'\r\n      }\r\n    ]}\r\n]"
            },
            {
                "name": "itemsWithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {icon: 'freud-icon freud-icon-refresh', command: () => {\r\n      console.log('Evento update')\r\n    }\r\n  },\r\n  {\r\n    icon: 'freud-icon freud-icon-close', command: () => {\r\n      console.log('Evento delete')\r\n    },\r\n  },\r\n  {icon: 'freud-icon freud-icon-check'}\r\n]"
            },
            {
                "name": "itemsWithoutIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMenuItem[]",
                "defaultValue": "[\r\n  {label: 'Update', command: () => {console.log('Evento update')}\r\n  },\r\n  {\r\n    label: 'Delete', command: () => {console.log('Evento delete')},\r\n  },\r\n  {label: 'Zenklub', url: 'http://zenklub.com'}\r\n]"
            },
            {
                "name": "itens",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "StepMenu[]",
                "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Label",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Left",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateLoading.bind({})"
            },
            {
                "name": "Mask",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Maximizable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "messages",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "FreudMessage[]",
                "defaultValue": "[\r\n  {severity:'success', summary:'Success', detail:'Message content'},\r\n  {severity:'info', summary:'Info', detail:'Message content'},\r\n  {severity:'warn', summary:'Warning', detail:'Message content'},\r\n  {severity:'error', summary:'Error', detail:'Message content'}\r\n]"
            },
            {
                "name": "Modal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "MonthView",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Multiple",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OptionDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "options",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
            },
            {
                "name": "optionsDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\r\n  {label: 'Item1', disabled: true},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
            },
            {
                "name": "OutlineDefault",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineInfo",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "OutlineWarning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "PageReport",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Panel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Placeholder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "RadioAndButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateRadioAndButton.bind({})"
            },
            {
                "name": "Range",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Removable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "require",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/test.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type"
            },
            {
                "name": "Right",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Scrollable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSizes.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSize.bind({})"
            },
            {
                "name": "Sort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateSort.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Success",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TargetElement",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTarget.bind({})"
            },
            {
                "name": "Telefone",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p freud-typography [fontType]=\"fontType\" [fontBgColor]=\"fontBgColor\">{{label}}</p>\r\n  `\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAlertMessagesComponent>",
                "defaultValue": "(args: FreudAlertMessagesComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-alert-messages\r\n        [messages]=\"messages\">\r\n    </freud-alert-messages>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudKnobComponent>",
                "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-knob\r\n      [value]=\"value\"\r\n      [min]=\"min\"\r\n      [max]=\"max\"\r\n      [step]=\"step\"\r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-knob>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\"></freud-badge>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/rating/Rating.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudRatingComponent>",
                "defaultValue": "(\r\n  args: FreudRatingComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-rating\r\n      [value]=\"value\"\r\n      [stars]=\"stars\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-rating>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudProgressBarComponent>",
                "defaultValue": "(\r\n  args: FreudProgressBarComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <freud-progress-bar [bgColor]=\"bgColor\" [value]=\"50\" [mode]=\"mode\">\r\n      </freud-progress-bar>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudProgressSpinnerComponent>",
                "defaultValue": "(\r\n  args: FreudProgressSpinnerComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-progress-spinner [bgColor]=\"bgColor\">\r\n      </freud-progress-spinner>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/steps/Steps.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudStepsComponent>",
                "defaultValue": "(\r\n  args: FreudStepsComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-steps [model]=\"model\" [readonly]=\"readonly\" [activeIndex]=\"activeIndex\" [bgColor]=\"bgColor\"></freud-steps>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSkeletonComponent>",
                "defaultValue": "(\r\n  args: FreudSkeletonComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'350px'\"\r\n        [height]=\"'70px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <div style=\"display: flex\">\r\n        <freud-skeleton style=\"margin-right: 10px\"\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n        <freud-skeleton\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n      </div>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/toast/Toast.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudToastComponent>",
                "defaultValue": "(args: FreudToastComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-toast-examples>\r\n    </freud-toast-examples>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTagComponent>",
                "defaultValue": "(args: FreudTagComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tag [outline]=\"outline\" [color]=\"color\" [value]=\"value\"></freud-tag>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace('{{label}}', 'Button {{color}}'),\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTooltipComponent>",
                "defaultValue": "(\r\n  args: FreudTooltipComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <span freud-tooltip style=\"color:{{bgColor ? 'white' : 'black'}}\"\r\n      [tooltipLabel]=\"tooltipLabel\"\r\n      [tooltipPosition]=\"tooltipPosition\"\r\n      style=\"font-family: 'Source Sans Pro'\"\r\n      [bgColor]=\"bgColor\">Passe o mouse aqui!</span>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSplitButtonComponent>",
                "defaultValue": "(args: FreudSplitButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSpeedDialComponent>",
                "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 250px; width: 120px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAutoCompleteComponent>",
                "defaultValue": "(args: FreudAutoCompleteComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCheckboxComponent>",
                "defaultValue": "(args: FreudCheckboxComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCascadeSelectComponent>",
                "defaultValue": "(args: FreudCascadeSelectComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputMaskComponent>",
                "defaultValue": "(args: FreudInputMaskComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputNumberComponent>",
                "defaultValue": "(args: FreudInputNumberComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudListboxComponent>",
                "defaultValue": "(args: FreudListboxComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMultiSelectComponent>",
                "defaultValue": "(args: FreudMultiSelectComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudRadioButtonComponent>",
                "defaultValue": "(args: FreudRadioButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n  argTypes: {\r\n    value: {\r\n      name: 'ModelValue',\r\n      type: { name: 'string' },\r\n      defaultValue: 'Hello',\r\n      description: 'demo description',\r\n      table: {\r\n        type: { summary: 'string' },\r\n        defaultValue: { summary: 'Hello' },\r\n      },\r\n      control: {\r\n        type: 'text'\r\n      }\r\n    }\r\n  }\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSelectComponent>",
                "defaultValue": "(args: FreudSelectComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextAreaComponent>",
                "defaultValue": "(args: FreudInputTextAreaComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSwitchComponent>",
                "defaultValue": "(args: FreudSwitchComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAvatarComponent>",
                "defaultValue": "(args: FreudAvatarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-avatar [size]=\"size\" [label]=\"label\" [badge]=\"badge\" [bgColor]=\"bgColor\" [withIcon]=\"withIcon\" [image]=\"image\"></freud-avatar>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/image/Image.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudImageComponent>",
                "defaultValue": "(args: FreudImageComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-image [preview]=\"preview\" [alt]=\"alt\" [src]=\"src\" [height]=\"height\" [width]=\"width\"></freud-image>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudConfirmDialogComponent>",
                "defaultValue": "(args: FreudConfirmDialogComponent) => ({\r\n  template: `\r\n    <freud-confirm-dialog-example></freud-confirm-dialog-example>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudGalleryComponent>",
                "defaultValue": "(args: FreudGalleryComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-gallery\r\n        [images]=\"images\"\r\n        [showThumbnails]=\"showThumbnails\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-gallery>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/file-upload/FileUpload.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudFileUploadComponent>",
                "defaultValue": "(args: FreudFileUploadComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-file-upload\r\n        [name]=\"'file[]'\"\r\n        [url]=\"url\"\r\n        [auto]=\"auto\"\r\n        [accept]=\"accept\"\r\n        [multiple]=\"multiple\"\r\n        [method]=\"method\"\r\n        [fileLimit]=\"fileLimit\"\r\n        [chooseIcon]=\"chooseIcon\"\r\n        [chooseLabel]=\"chooseLabel\"\r\n        [uploadLabel]=\"uploadLabel\"\r\n        [uploadIcon]=\"uploadIcon\"\r\n        [cancelIcon]=\"cancelIcon\"\r\n        [withCredentials]=\"withCredentials\"\r\n        [mode]=\"mode\"\r\n        [customUpload]=\"customUpload\"\r\n        [showUploadButton]=\"showUploadButton\"\r\n        [showCancelButton]=\"showCancelButton\"\r\n        [headers]=\"headers\"\r\n    ></freud-file-upload>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDialogExampleComponent>",
                "defaultValue": "(args: FreudDialogExampleComponent) => ({\r\n  props: {...args},\r\n  template: `\r\n    <freud-dialog-example [view]=\"view\"></freud-dialog-example>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudConfirmPopupComponent>",
                "defaultValue": "(args: FreudConfirmPopupComponent) => ({\r\n  template: `\r\n    <freud-confirm-popup-example></freud-confirm-popup-example>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "() => ({\r\n  template: `\r\n    <freud-dynamic-dialog-example></freud-dynamic-dialog-example>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menu/Menu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMenuComponent>",
                "defaultValue": "(args: FreudMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-menu [items]=\"items\" [popup]=\"popup\"></freud-menu>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBreadcrumbComponent>",
                "defaultValue": "(args: FreudBreadcrumbComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-breadcrumb [bgColor]=\"bgColor\" [items]=\"items\" [home]=\"home\"></freud-breadcrumb>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/menubar/Menubar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudMenubarComponent>",
                "defaultValue": "(args: FreudMenubarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"height: 240px;width: 100%\">\r\n      <freud-menubar\r\n          [startImgAlt]=\"'Home'\"\r\n          [startImgSrc]=\"startImgSrc\"\r\n          [startImgHref]=\"'https://zenklub.com.br'\"\r\n          [items]=\"items\"\r\n          [bgColor]=\"bgColor\"\r\n      ></freud-menubar>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelComponent>",
                "defaultValue": "(args: FreudPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"toggleable\">\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n    </freud-panel>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelMenuComponent>",
                "defaultValue": "(args: FreudPanelMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 400px\">\r\n        <freud-panel-menu\r\n          [items]=\"items\"\r\n        ></freud-panel-menu>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollPanelComponent>",
                "defaultValue": "(args: FreudScrollPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.\r\n</freud-scroll-panel>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTabMenuComponent>",
                "defaultValue": "(args: FreudTabMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tab-menu\r\n      [items]=\"items\"\r\n      [activeItem]=\"activeItem\"\r\n      [bgColor]=\"bgColor\"\r\n    ></freud-tab-menu>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSplitterComponent>",
                "defaultValue": "(args: FreudSplitterComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-splitter [panelSizes]=\"panelSizes\" [style]=\"{'height': '300px'}\" [layout]=\"layout\">\r\n      <ng-template pTemplate>\r\n        <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\r\n          Panel 1\r\n        </div>\r\n      </ng-template>\r\n    <ng-template pTemplate>\r\n      <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\r\n        Panel 2\r\n      </div>\r\n    </ng-template>\r\n</freud-splitter>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTabViewComponent>",
                "defaultValue": "(args: FreudTabViewComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tab-view\r\n      [activeIndex]=\"activeIndex\"\r\n      [controlClose]=\"controlClose\"\r\n      [scrollable]=\"scrollable\"\r\n      [bgColor]=\"bgColor\">\r\n        <freud-tab-panel header=\"Header 1\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 2\">\r\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 3\">\r\n            Content 3\r\n        </freud-tab-panel>\r\n    </freud-tab-view>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAccordionComponent>",
                "defaultValue": "(args: FreudAccordionComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-accordion [multiple]=\"multiple\">\r\n        <freud-accordion-tab header=\"Header I\">\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\r\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header II\">\r\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\r\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\r\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header III\">\r\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\r\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\r\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\r\n        </freud-accordion-tab>\r\n    </freud-accordion>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/action-icon/ActionIcon.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudActionIconComponent>",
                "defaultValue": "(args: FreudActionIconComponent) => ({\r\n  props: { ...args },\r\n  template: `<freud-action-icon [bgColor]=\"bgColor\"></freud-action-icon>`,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCalendarComponent>",
                "defaultValue": "(args: FreudCalendarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-calendar\r\n      [selectionMode]=\"selectionMode\"\r\n      [dateFormat]=\"dateFormat\"\r\n      [inline]=\"inline\"\r\n      [showOtherMonths]=\"showOtherMonths\"\r\n      [selectOtherMonths]=\"selectOtherMonths\"\r\n      [showWeek]=\"showWeek\"\r\n      [view]=\"view\"\r\n      [yearNavigator]=\"yearNavigator\"\r\n      [yearRange]=\"yearRange\"\r\n      [defaultDate]=\"defaultDate\"\r\n      [showTime]=\"showTime\"\r\n      [hourFormat]=\"hourFormat\"\r\n      [disabled]=\"disabled\"\r\n      [timeOnly]=\"timeOnly\"\r\n      [monthNavigator]=\"monthNavigator\"\r\n      [disabledDates]=\"disabledDates\"\r\n      [required]=\"required\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      [(ngModel)]=\"value\">\r\n    </freud-calendar>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/block-ui/BlockUI.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBlockExampleComponent>",
                "defaultValue": "(args: FreudBlockExampleComponent) => ({\r\n  props: { ...args },\r\n  template: `<freud-block-ui-example [withTarget]=\"withTarget\"></freud-block-ui-example>`,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/captcha/Captcha.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCaptchaComponent>",
                "defaultValue": "(args: FreudCaptchaComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-captcha [siteKey]=\"siteKey\" [autoLoadScript]=\"true\" [initCallback]=\"'initRecaptcha'\"></freud-captcha>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCardComponent>",
                "defaultValue": "(args: FreudCardComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-card\r\n        [header]=\"header\"\r\n        [subheader]=\"subheader\"\r\n        [tabindex]=\"tabindex\">\r\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\r\n        deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\r\n    </freud-card>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/chip/Chip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudChipComponent>",
                "defaultValue": "(args: FreudChipComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-chip\r\n        [label]=\"'Action'\"\r\n        [removable]=\"removable\">\r\n    </freud-chip>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/paginator/Paginator.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPaginatorComponent>",
                "defaultValue": "(args: FreudPaginatorComponent) => ({\r\n  props: { ...args },\r\n  template: `<freud-paginator\r\n    [rows]=\"rows\"\r\n    [totalRecords]=\"totalRecords\"\r\n    [pageLinkSize]=\"pageLinkSize\"\r\n    [first]=\"first\"\r\n    [showFirstLastIcon]=\"showFirstLastIcon\"\r\n    [alwaysShow]=\"alwaysShow\"\r\n    [currentPageReportTemplate]=\"currentPageReportTemplate\"\r\n    [showCurrentPageReport]=\"showCurrentPageReport\"\r\n    [bgColor]=\"bgColor\">\r\n    </freud-paginator>`,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSlideMenuComponent>",
                "defaultValue": "(args: FreudSlideMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-slide-menu [items]=\"items\"></freud-slide-menu>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudFullCalendarComponent>",
                "defaultValue": "(args: FreudFullCalendarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-full-calendar [bgColor]=\"bgColor\" [events]=\"events\" [options]=\"options\">\r\n    </freud-full-calendar>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-scroll-top [threshold]=\"200\"></freud-scroll-top>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSelectButtonComponent>",
                "defaultValue": "(args: FreudSelectButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTableComponent>",
                "defaultValue": "(args: FreudTableComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 100% overflow: auto;\">\r\n        <freud-table [value]=\"value\" [columns]=\"columns\">\r\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\r\n                  <tr>\r\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\r\n                  </tr>\r\n              </ng-template>\r\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\r\n                <tr>\r\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\r\n                </tr>\r\n            </ng-template>\r\n        </freud-table>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSliderComponent>",
                "defaultValue": "(args: FreudSliderComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
            },
            {
                "name": "TemplateAdvanced",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/card/Card.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudCardComponent>",
                "defaultValue": "(args: FreudCardComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 350px\">\r\n      <freud-card\r\n          [header]=\"header\"\r\n          [subheader]=\"subheader\"\r\n          [tabindex]=\"tabindex\">\r\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\r\n          deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\r\n\r\n            <ng-container freudTemplateHeader>\r\n              <img alt=\"Card\" src=\"assets/img/img.png\" style=\"height: 150px;object-fit: cover\">\r\n            </ng-container>\r\n\r\n            <ng-container freudTemplatefooter>\r\n              <div style=\"display: flex; gap: 4px\">\r\n                <freud-button>Button</freud-button>\r\n                <freud-button [color]=\"'secondary'\">Button</freud-button>\r\n              </div>\r\n          </ng-container>\r\n      </freud-card>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'success'\" [value]=\"'10'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'info'\" [value]=\"'5'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'warning'\" [value]=\"'99'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'error'\" [value]=\"'A'\"></freud-badge>\r\n    <freud-badge style=\"position: relative;top: 4px;\" [color]=\"'actived'\" [value]=\"''\"></freud-badge>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTagComponent>",
                "defaultValue": "(args: FreudTagComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [value]=\"'Default'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'success'\" [value]=\"'Success'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'info'\" [value]=\"'Info'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'warning'\" [value]=\"'Warning'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'error'\" [value]=\"'Error'\"></freud-tag>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTMLBgColor,\r\n})"
            },
            {
                "name": "TemplateBlank",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\" style=\"position: relative;top: 4px;\"></freud-badge>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-5'\">h6/Bold-700/line-height-1.5 (h6Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-5'\">h5/Bold-700/line-height-1.5 (h5Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-5'\">h4/Bold-700/line-height-1.5 (h4Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-5'\">h3/Bold-700/line-height-1.5 (h3Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-5'\">h2/Bold-700/line-height-1.5 (h2Bold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-5'\">h1/Bold-700//line-height-1.5 (h1Bold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-2'\">h6/Bold-700/line-height-1.2 (h6Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-2'\">h5/Bold-700/line-height-1.2 (h5Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-2'\">h4/Bold-700/line-height-1.2 (h4Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-2'\">h3/Bold-700/line-height-1.2 (h3Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-2'\">h2/Bold-700/line-height-1.2 (h2Bold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-2'\">h1/Bold-700/line-height-1.2 (h1Bold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1'\">h6/Bold-700/line-height-1 (h6Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1'\">h5/Bold-700/line-height-1 (h5Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1'\">h4/Bold-700/line-height-1 (h4Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1'\">h3/Bold-700/line-height-1 (h3Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1'\">h2/Bold-700/line-height-1 (h2Bold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1'\">h1/Bold-700/line-height-1 (h1Bold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6BoldAuto'\">h6/Bold-700/line-height-Auto (h6BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5BoldAuto'\">h5/Bold-700/line-height-Auto (h5BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4BoldAuto'\">h4/Bold-700/line-height-Auto (h4BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3BoldAuto'\">h3/Bold-700/line-height-Auto (h3BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2BoldAuto'\">h2/Bold-700/line-height-Auto (h2BoldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1BoldAuto'\">h1/Bold-700/line-height-auto (h1BoldAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateButtonLayout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputNumberComponent>",
                "defaultValue": "(args: FreudInputNumberComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [label]=\"label\"\r\n        [buttonLayout]=\"'stacked'\"\r\n        [showButtons]=\"true\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-number> <br><br>\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [label]=\"label\"\r\n        [buttonLayout]=\"'horizontal'\"\r\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\r\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\r\n        [showButtons]=\"true\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-number> <br><br>\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [label]=\"label\"\r\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\r\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\r\n        [buttonLayout]=\"'vertical'\"\r\n        [showButtons]=\"true\">\r\n    </freud-input-number> <br><br>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateCaptionAndSummary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTableComponent>",
                "defaultValue": "(args: FreudTableComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 100% overflow: auto;\">\r\n        <freud-table [value]=\"value\" [columns]=\"columns\">\r\n            <ng-template freudTemplate=\"caption\">\r\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\r\n                    Produtos\r\n                    <p-button icon=\"pi pi-refresh\"></p-button>\r\n                </div>\r\n            </ng-template>\r\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\r\n                  <tr>\r\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\r\n                  </tr>\r\n              </ng-template>\r\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\r\n                <tr>\r\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\r\n                </tr>\r\n            </ng-template>\r\n\r\n            <ng-template freudTemplate=\"summary\">\r\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\r\n                    Total de 6 produtos.\r\n                </div>\r\n            </ng-template>\r\n        </freud-table>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateCheckboxAndText",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\">\r\n        <freud-checkbox></freud-checkbox>\r\n      </span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <span class=\"freud-input-group-addon\">ww</span>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudSpeedDialComponent>",
                "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 80px; width: 80px; margin: 50px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace('{{label}}', 'Disabled'),\r\n})"
            },
            {
                "name": "TemplateDisabled",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/acordion/Acordion.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAccordionComponent>",
                "defaultValue": "(args: FreudAccordionComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-accordion [multiple]=\"multiple\">\r\n        <freud-accordion-tab header=\"Header I\">\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\r\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header II\">\r\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\r\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\r\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header III\" [disabled]=\"true\">\r\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\r\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\r\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\r\n        </freud-accordion-tab>\r\n    </freud-accordion>\r\n  `,\r\n})"
            },
            {
                "name": "templateDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-auto-complete-example\r\n          [disabled]=\"disabled\"\r\n          [dropdown]=\"dropdown\"\r\n          [multiple]=\"multiple\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-auto-complete-example>\r\n    </div>\r\n`"
            },
            {
                "name": "TemplateDropdown",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAutoCompleteComponent>",
                "defaultValue": "(args: FreudAutoCompleteComponent) => ({\r\n  props: { ...args },\r\n  template: templateDropdown,\r\n})"
            },
            {
                "name": "templateFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n  <div style=\"height: 130px\">\r\n          <freud-input-password\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [feedback]=\"feedback\"\r\n          [placeholder]=\"placeholder\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-input-password>\r\n  </div>\r\n`"
            },
            {
                "name": "TemplateFeedback",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\r\n  props: { ...args },\r\n  template: templateFeedback,\r\n})"
            },
            {
                "name": "TemplateFooter",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelComponent>",
                "defaultValue": "(args: FreudPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-panel [header]=\"'Header'\">\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n      <ng-container freudTemplatefooter>\r\n          Footer\r\n      </ng-container>\r\n    </freud-panel>\r\n  `,\r\n})"
            },
            {
                "name": "templateFull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"height: 350px\">\r\n        <freud-input-password\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [feedback]=\"feedback\"\r\n          [placeholder]=\"placeholder\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n            <ng-container freudTemplateHeader>\r\n              <strong>Pick a password</strong>\r\n            </ng-container>\r\n            <ng-container freudTemplatefooter>\r\n                <div>\r\n                  <hr>\r\n                  <p class=\"p-mt-2\">Suggestions</p>\r\n                  <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\r\n                      <li>At least one lowercase</li>\r\n                      <li>At least one uppercase</li>\r\n                      <li>At least one numeric</li>\r\n                      <li>Minimum 8 characters</li>\r\n                  </ul>\r\n                </div>\r\n            </ng-container>\r\n        </freud-input-password>\r\n    </div>\r\n`"
            },
            {
                "name": "TemplateFull",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputPasswordComponent>",
                "defaultValue": "(args: FreudInputPasswordComponent) => ({\r\n  props: { ...args },\r\n  template: templateFull,\r\n})"
            },
            {
                "name": "TemplateHorizontal",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <freud-divider\r\n          [tabindex]=\"tabindex\"\r\n          [layout]=\"'horizontal'\"\r\n          [align]=\"'left'\">\r\n            Title\r\n      </freud-divider><br>\r\n      <freud-divider\r\n          [tabindex]=\"tabindex\"\r\n          [layout]=\"'horizontal'\"\r\n          [align]=\"'center'\">\r\n            Title\r\n      </freud-divider><br>\r\n      <freud-divider\r\n          [tabindex]=\"tabindex\"\r\n          [layout]=\"'horizontal'\"\r\n          [align]=\"'right'\">\r\n            Title\r\n      </freud-divider>\r\n  `,\r\n})"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-button\r\n      [color]=\"color\"\r\n      [bgColor]=\"bgColor\"\r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [loading]=\"loading\"\r\n      [icon]=\"icon\"\r\n      >{{label}}</freud-button>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/split-button/SplitButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-split-button\r\n        [label]=\"label\"\r\n        [disabled]=\"disabled\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-split-button>\r\n    <p *ngIf=\"!disabled\" style=\"margin-bottom: 180px\"></p>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"height: 150px\">\r\n        <freud-auto-complete-example\r\n          [disabled]=\"disabled\"\r\n          [dropdown]=\"dropdown\"\r\n          [multiple]=\"multiple\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-auto-complete-example>\r\n    </div>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/checkbox/Checkbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n      <freud-checkbox\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [bgColor]=\"bgColor\"\r\n        [invalid]=\"invalid\">\r\n    </freud-checkbox>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-cascade-select\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [options]=\"options\"\r\n          [optionLabel]=\"'cname'\"\r\n          [optionValue]=\"'code'\"\r\n          [placeholder]=\"placeholder\"\r\n          [optionGroupLabel]=\"'name'\"\r\n          [optionGroupChildren]=\"['states', 'cities']\"\r\n          [helpText]=\"helpText\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-cascade-select>\r\n    </div>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-mask/InputMask.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-input-mask\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [placeholder]=\"placeholder\"\r\n        [helpText]=\"helpText\"\r\n        [invalid]=\"invalid\"\r\n        [mask]=\"mask\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-mask>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-number/InputNumber.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [placeholder]=\"placeholder\"\r\n        [invalid]=\"invalid\"\r\n        [showButtons]=\"showButtons\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-number>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-text/InputText.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-input-text\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [placeholder]=\"placeholder\"\r\n        [helpText]=\"helpText\"\r\n        [invalid]=\"invalid\"\r\n        [rightIcon]=\"rightIcon\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-text>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/listbox/Listbox.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-listbox\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [options]=\"options\"\r\n          [multiple]=\"multiple\"\r\n          [filter]=\"filter\"\r\n          [checkbox]=\"checkbox\"\r\n          [optionLabel]=\"optionLabel\"\r\n          [optionValue]=\"optionValue\"\r\n          [invalid]=\"invalid\">\r\n      </freud-listbox>\r\n    </div>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-password/InputPassword.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-input-password\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [feedback]=\"feedback\"\r\n        [placeholder]=\"placeholder\"\r\n        [invalid]=\"invalid\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-password>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"height: 300px\">\r\n        <freud-multi-select\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [options]=\"options\"\r\n          [optionLabel]=\"optionLabel\"\r\n          [optionValue]=\"optionValue\"\r\n          [placeholder]=\"placeholder\"\r\n          [display]=\"display\"\r\n          [helpText]=\"helpText\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-multi-select>\r\n    </div>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/radio-button/RadioButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n        <freud-radio-button-example\r\n            [(ngModel)]=\"value\"\r\n            [disabled]=\"disabled\"\r\n            [label]=\"label\"\r\n            [name]=\"'label'\"\r\n            [bgColor]=\"bgColor\"\r\n        ></freud-radio-button-example>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/select/Select.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-select\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [options]=\"options\"\r\n          [optionLabel]=\"optionLabel\"\r\n          [optionValue]=\"optionValue\"\r\n          [placeholder]=\"placeholder\"\r\n          [helpText]=\"helpText\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-select>\r\n    </div>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-input-textarea\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [rows]=\"rows\"\r\n        [cols]=\"cols\"\r\n        [autoResize]=\"autoResize\"\r\n        [placeholder]=\"placeholder\"\r\n        [helpText]=\"helpText\"\r\n        [invalid]=\"invalid\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-textarea>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n      <freud-input-switch\r\n        [(ngModel)]=\"defaultValue\"\r\n        [disabled]=\"disabled\"\r\n        [invalid]=\"invalid\">\r\n    </freud-input-switch>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-divider\r\n        [tabindex]=\"tabindex\"\r\n        [layout]=\"layout\"\r\n        [bgColor]=\"bgColor\">\r\n        Title\r\n    </freud-divider>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/select-button/SelectButton.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-select-button\r\n        [options]=\"options\"\r\n        [multiple]=\"multiple\"\r\n        [tabindex]=\"tabindex\"\r\n        [bgColor]=\"bgColor\"\r\n        [disabled]=\"disabled\"\r\n        [selectedOption]=\"selectedOption\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionLabel]=\"optionLabel\"></freud-select-button>\r\n`"
            },
            {
                "name": "templateHTML",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <freud-slider\r\n        [(ngModel)]=\"value\"\r\n        [tabindex]=\"tabindex\"\r\n        [bgColor]=\"bgColor\"\r\n        [orientation]=\"orientation\"\r\n        [range]=\"range\"\r\n        [disabled]=\"disabled\">\r\n    </freud-slider>\r\n`"
            },
            {
                "name": "templateHTMLBgColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"display: flex;gap: 16px;align-items: center\">\r\n      <freud-button [bgColor]=\"true\" [color]=\"'primary'\">Button primary</freud-button>\r\n      <freud-button [bgColor]=\"true\" [color]=\"'secondary'\">Button secondary</freud-button>\r\n      <freud-button [bgColor]=\"true\" [color]=\"'ghost'\">Button ghost</freud-button>\r\n    </div>\r\n`"
            },
            {
                "name": "templateHTMLSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "`\r\n    <div style=\"display: flex;gap: 16px;align-items: center\">\r\n      <freud-button [bgColor]=\"bgColor\" [color]=\"color\" [size]=\"'sm'\">Button sm</freud-button>\r\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'md'\">Button md</freud-button>\r\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'lg'\">Button lg</freud-button>\r\n    </div>\r\n`"
            },
            {
                "name": "TemplateIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace(\r\n    '{{label}}',\r\n    ''\r\n  ),\r\n})"
            },
            {
                "name": "TemplateIcon",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/tab-view/TabView.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTabViewComponent>",
                "defaultValue": "(args: FreudTabViewComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tab-view\r\n      [activeIndex]=\"activeIndex\"\r\n      [controlClose]=\"controlClose\"\r\n      [scrollable]=\"scrollable\"\r\n      [bgColor]=\"bgColor\">\r\n        <freud-tab-panel header=\"Header 1\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 2\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\r\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 3\" [leftIcon]=\"'freud-icon freud-icon-plus'\">\r\n            Content 3\r\n        </freud-tab-panel>\r\n    </freud-tab-view>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateIconAndRadio",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <span class=\"freud-input-group-addon\">\r\n        <freud-radio-button radioValue=\"teste\" name=\"item\"></freud-radio-button>\r\n      </span>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateIconLeft",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateIconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateIcons",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudPanelComponent>",
                "defaultValue": "(args: FreudPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"true\">\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n      <ng-container freudTemplateIcons>\r\n        <freud-button [color]=\"'ghost'\" class=\"p-panel-header-icon p-link\" (click)=\"menu.toggle($event)\">\r\n          <span class=\"freud-icon freud-icon-cog\"></span>\r\n        </freud-button>\r\n      </ng-container>\r\n    </freud-panel>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateInline",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAlertMessagesComponent>",
                "defaultValue": "(args: FreudAlertMessagesComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-alert-message [severity]=\"'success'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n    <freud-alert-message [severity]=\"'info'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n    <freud-alert-message [severity]=\"'warn'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n    <freud-alert-message [severity]=\"'error'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateLoading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace('{{label}}', 'Button'),\r\n})"
            },
            {
                "name": "TemplateRadioAndButton",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/input-group/InputGroup.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudInputTextComponent>",
                "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\">\r\n        <freud-radio-button radioValue=\"teste\" name=\"item2\"></freud-radio-button>\r\n      </span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <freud-button>Button</freud-button>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-5'\">h6/regular-400/line-height-1.5 (h6Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-5'\">h5/regular-400/line-height-1.5 (h5Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-5'\">h4/regular-400/line-height-1.5 (h4Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-5'\">h3/regular-400/line-height-1.5 (h3Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-5'\">h2/regular-400/line-height-1.5 (h2Regular1-5)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-5'\">h1/regular-400/line-height-1.5 (h1Regular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-2'\">h6/regular-400/line-height-1.2 (h6Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-2'\">h5/regular-400/line-height-1.2 (h5Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-2'\">h4/regular-400/line-height-1.2 (h4Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-2'\">h3/regular-400/line-height-1.2 (h3Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-2'\">h2/regular-400/line-height-1.2 (h2Regular1-2)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-2'\">h1/regular-400/line-height-1.2 (h1Regular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1'\">h6/regular-400/line-height-1 (h6Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1'\">h5/regular-400/line-height-1 (h5Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1'\">h4/regular-400/line-height-1 (h4Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1'\">h3/regular-400/line-height-1 (h3Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1'\">h2/regular-400/line-height-1 (h2Regular1)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1'\">h1/regular-400/line-height-1 (h1Regular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6RegularAuto'\">h6/regular-400/line-height-Auto (h6RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5RegularAuto'\">h5/regular-400/line-height-Auto (h5RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4RegularAuto'\">h4/regular-400/line-height-Auto (h4RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3RegularAuto'\">h3/regular-400/line-height-Auto (h3RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2RegularAuto'\">h2/regular-400/line-height-Auto (h2RegularAuto)</p>\r\n    <p freud-typography [fontType]=\"'h1RegularAuto'\">h1/regular-400/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-5'\">h6/Semibold-600/line-height-1.5 (h6Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-5'\">h5/Semibold-600/line-height-1.5 (h5Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-5'\">h4/Semibold-600/line-height-1.5 (h4Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-5'\">h3/Semibold-600/line-height-1.5 (h3Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-5'\">h2/Semibold-600/line-height-1.5 (h2Semibold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-5'\">h1/Semibold-600/line-height-1.5 (h1Semibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-2'\">h6/Semibold-600/line-height-1.2 (h6Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-2'\">h5/Semibold-600/line-height-1.2 (h5Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-2'\">h4/Semibold-600/line-height-1.2 (h4Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-2'\">h3/Semibold-600/line-height-1.2 (h3Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-2'\">h2/Semibold-600/line-height-1.2 (h2Semibold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-2'\">h1/Semibold-600/line-height-1.2 (h1Semibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1'\">h6/Semibold-600/line-height-1 (h6Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1'\">h5/Semibold-600/line-height-1 (h5Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1'\">h4/Semibold-600/line-height-1 (h4Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1'\">h3/Semibold-600/line-height-1 (h3Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1'\">h2/Semibold-600/line-height-1 (h2Semibold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1'\">h1/Semibold-600/line-height-1 (h1Regular1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6SemiboldAuto'\">h6/Semibold-600/line-height-Auto (h6SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5SemiboldAuto'\">h5/Semibold-600/line-height-Auto (h5SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4SemiboldAuto'\">h4/Semibold-600/line-height-Auto (h4SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3SemiboldAuto'\">h3/Semibold-600/line-height-Auto (h3SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2SemiboldAuto'\">h2/Semibold-600/line-height-Auto (h2SemiboldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1SemiboldAuto'\">h1/Semibold-600/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/knob/Knob.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudKnobComponent>",
                "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"display: flex; align-items: center;\">\r\n      <freud-knob style=\"margin-right: 20px\"\r\n        [value]=\"'50'\"\r\n        [size]=\"'default'\">\r\n      </freud-knob>\r\n\r\n      <freud-knob\r\n        [value]=\"'50'\"\r\n        [size]=\"'large'\">\r\n      </freud-knob>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudButtonComponent>",
                "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTMLSize,\r\n})"
            },
            {
                "name": "TemplateSize",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudAvatarComponent>",
                "defaultValue": "(args: FreudAvatarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"display: flex; align-items: center\">\r\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'sm'\" [label]=\"'A'\"></freud-avatar>\r\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'md'\" [label]=\"'A'\"></freud-avatar>\r\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'lg'\" [label]=\"'A'\"></freud-avatar>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateSizes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudBadgeComponent>",
                "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge style=\"margin-right: 16px;\" [size]=\"'default'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\r\n    <freud-badge [size]=\"'large'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateSort",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/table/Table.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTableComponent>",
                "defaultValue": "(args: FreudTableComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 100%\">\r\n      <freud-table [value]=\"value\" [columns]=\"columns\">\r\n          <ng-template freudTemplate=\"header\" let-columns=\"columns\">\r\n                <tr>\r\n                    <th freudSortableColumn=\"{{col}}\" *ngFor=\"let col of columns\">{{col}} <freud-sortIcon field=\"{{col}}\"></freud-sortIcon></th>\r\n                </tr>\r\n            </ng-template>\r\n          <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\r\n              <tr>\r\n                  <td *ngFor=\"let col of columns\">{{item[col]}}</td>\r\n              </tr>\r\n          </ng-template>\r\n      </freud-table>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateTarget",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"height: 250px;width: 250px; overflow: auto\">\r\n        <p>\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n          Vitae et leo duis ut diam.\r\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\r\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\r\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\r\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\r\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\r\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\r\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\r\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\r\n          Mattis aliquam faucibus purus in massa tempor nec.\r\n      </p>\r\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\"></freud-scroll-top>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateTargetBGColor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudScrollTopComponent>",
                "defaultValue": "(args: FreudScrollTopComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"height: 250px;width: 300px; padding: 10px; overflow: auto;background-color: #241249; color: white\">\r\n        <p>\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n          Vitae et leo duis ut diam.\r\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\r\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\r\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\r\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\r\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\r\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\r\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\r\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\r\n          Mattis aliquam faucibus purus in massa tempor nec.\r\n      </p>\r\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\" [bgColor]=\"true\"></freud-scroll-top>\r\n    </div>\r\n  `,\r\n})"
            },
            {
                "name": "TemplateTextBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-5'\">small/Bold-700/line-height-1.5 (smallBold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-5'\">body/Bold-700/line-height-1.5 (bodyBold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-2'\">small/Bold-700/line-height-1.2 (smallBold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-2'\">body/Bold-700/line-height-1.2 (bodyBold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1'\">small/Bold-700/line-height-1 (smallBold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1'\">body/Bold-700/line-height-1 (bodyBold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBoldAuto'\">small/Bold-700/line-height-Auto (smallBoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBoldAuto'\">body/Bold-700/line-height-Auto (bodyBoldAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateTextRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-5'\">small/regular-400/line-height-1.5 (smallRegular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-5'\">body/regular-400/line-height-1.5 (bodyRegular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-2'\">small/regular-400/line-height-1.2 (smallRegular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-2'\">body/regular-400/line-height-1.2 (bodyRegular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1'\">small/regular-400/line-height-1 (smallRegular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1'\">body/regular-400/line-height-1 (bodyRegular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegularAuto'\">small/regular-400/line-height-Auto (smallRegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegularAuto'\">body/regular-400/line-height-Auto (bodyRegularAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateTextSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudTypographyComponent>",
                "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-5'\">small/Semibold-600/line-height-1.5 (smallSemibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-5'\">body/Semibold-600/line-height-1.5 (bodySemibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-2'\">small/Semibold-600/line-height-1.2 (smallSemibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-2'\">body/Semibold-600/line-height-1.2 (bodySemibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1'\">small/Semibold-600/line-height-1 (smallSemibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1'\">body/Semibold-600/line-height-1 (bodySemibold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemiboldAuto'\">small/Semibold-600/line-height-Auto (smallSemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemiboldAuto'\">body/Semibold-600/line-height-Auto (bodySemiboldAuto)</p>\r\n  `\r\n})"
            },
            {
                "name": "TemplateVertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story<FreudDividerComponent>",
                "defaultValue": "(args: FreudDividerComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <div style=\"display: flex;gap: 16px;height: 220px\">\r\n        <freud-divider\r\n            [tabindex]=\"tabindex\"\r\n            [layout]=\"'vertical'\"\r\n            [align]=\"'top'\">\r\n              Title\r\n        </freud-divider>\r\n        <freud-divider\r\n            [tabindex]=\"tabindex\"\r\n            [layout]=\"'vertical'\"\r\n            [align]=\"'bottom'\">\r\n              Title\r\n        </freud-divider>\r\n      </div>\r\n  `,\r\n})"
            },
            {
                "name": "TextBold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextBold.bind({})"
            },
            {
                "name": "TextRegular",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextRegular.bind({})"
            },
            {
                "name": "TextSemibold",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/typography/typography.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateTextSemibold.bind({})"
            },
            {
                "name": "TimeOnly",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Toggleable",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/panel/Panel.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Top",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "TypeCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "TypeQuarterCircle",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "TypeQuarterDownRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateCircle.bind({})"
            },
            {
                "name": "types",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "projects/web-components/src/components/typography/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "headingTypes.concat(bodyTypes)"
            },
            {
                "name": "value",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/forms/switch/Switch.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "boolean",
                "defaultValue": "false"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/structure/splitter/Splitter.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/divider/Divider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateVertical.bind({})"
            },
            {
                "name": "Vertical",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/slider/Slider.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/badge/Badge.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Warning",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/feedback/tag/Tag.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithBadge",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithIconRight",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/buttons/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "TemplateLoading .bind({})"
            },
            {
                "name": "WithLabel",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/avatar/Avatar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "WithoutThumbnail",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/media/gallery/gallery.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "YearNavigator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "stories/others/calendar/Calendar.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "Template.bind({})"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "avatarSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\" | \"lg\"",
                "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "buttonColors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"ghost\"",
                "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "buttonSizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sm\" | \"md\" | \"lg\"",
                "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"actived\"",
                "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "colors",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\"",
                "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "directions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"up\" | \"down\" | \"left\" | \"right\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "fontTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "projects/web-components/src/components/typography/typography.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            },
            {
                "name": "listboxFilterMatchModes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "positions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\"",
                "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "positions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"center\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"",
                "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "severities",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "sizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"large\"",
                "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "sizes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"default\" | \"large\"",
                "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "types",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "stories/feedback/badge/Badge.stories.ts": [
                {
                    "name": "Actived",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBlank.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSizes.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\"></freud-badge>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'success'\" [value]=\"'10'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'info'\" [value]=\"'5'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'warning'\" [value]=\"'99'\"></freud-badge>\r\n    <freud-badge style=\"margin-right: 16px;\" [color]=\"'error'\" [value]=\"'A'\"></freud-badge>\r\n    <freud-badge style=\"position: relative;top: 4px;\" [color]=\"'actived'\" [value]=\"''\"></freud-badge>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateBlank",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge [size]=\"size\" [color]=\"color\" [value]=\"value\" style=\"position: relative;top: 4px;\"></freud-badge>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateSizes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBadgeComponent>",
                    "defaultValue": "(args: FreudBadgeComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-badge style=\"margin-right: 16px;\" [size]=\"'default'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\r\n    <freud-badge [size]=\"'large'\" [color]=\"'primary'\" [value]=\"'1'\"></freud-badge>\r\n  `,\r\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/badge/Badge.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/others/card/Card.stories.ts": [
                {
                    "name": "Advanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAdvanced.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateAdvanced.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCardComponent>",
                    "defaultValue": "(args: FreudCardComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-card\r\n        [header]=\"header\"\r\n        [subheader]=\"subheader\"\r\n        [tabindex]=\"tabindex\">\r\n        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\r\n        deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\r\n    </freud-card>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateAdvanced",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/card/Card.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCardComponent>",
                    "defaultValue": "(args: FreudCardComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 350px\">\r\n      <freud-card\r\n          [header]=\"header\"\r\n          [subheader]=\"subheader\"\r\n          [tabindex]=\"tabindex\">\r\n          Lorem ipsum dolor sit amet, consectetur adipisicing elit. Inventore sed consequuntur error repudiandae numquam\r\n          deserunt quisquam repellat libero asperiores earum nam nobis, culpa ratione quam perferendis esse, cupiditate neque quas!\r\n\r\n            <ng-container freudTemplateHeader>\r\n              <img alt=\"Card\" src=\"assets/img/img.png\" style=\"height: 150px;object-fit: cover\">\r\n            </ng-container>\r\n\r\n            <ng-container freudTemplatefooter>\r\n              <div style=\"display: flex; gap: 4px\">\r\n                <freud-button>Button</freud-button>\r\n                <freud-button [color]=\"'secondary'\">Button</freud-button>\r\n              </div>\r\n          </ng-container>\r\n      </freud-card>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/forms/input-textarea/InputTextArea.stories.ts": [
                {
                    "name": "AutoResize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextAreaComponent>",
                    "defaultValue": "(args: FreudInputTextAreaComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-textarea/InputTextArea.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-input-textarea\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [rows]=\"rows\"\r\n        [cols]=\"cols\"\r\n        [autoResize]=\"autoResize\"\r\n        [placeholder]=\"placeholder\"\r\n        [helpText]=\"helpText\"\r\n        [invalid]=\"invalid\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-textarea>\r\n`"
                }
            ],
            "stories/others/table/Table.stories.ts": [
                {
                    "name": "Basic",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSort.bind({})"
                },
                {
                    "name": "CaptionAndSummary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCaptionAndSummary.bind({})"
                },
                {
                    "name": "data",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dataJson['data']"
                },
                {
                    "name": "Sort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSort.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTableComponent>",
                    "defaultValue": "(args: FreudTableComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 100% overflow: auto;\">\r\n        <freud-table [value]=\"value\" [columns]=\"columns\">\r\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\r\n                  <tr>\r\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\r\n                  </tr>\r\n              </ng-template>\r\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\r\n                <tr>\r\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\r\n                </tr>\r\n            </ng-template>\r\n        </freud-table>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateCaptionAndSummary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTableComponent>",
                    "defaultValue": "(args: FreudTableComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 100% overflow: auto;\">\r\n        <freud-table [value]=\"value\" [columns]=\"columns\">\r\n            <ng-template freudTemplate=\"caption\">\r\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\r\n                    Produtos\r\n                    <p-button icon=\"pi pi-refresh\"></p-button>\r\n                </div>\r\n            </ng-template>\r\n            <ng-template freudTemplate=\"header\" let-columns=\"columns\">\r\n                  <tr>\r\n                      <th *ngFor=\"let col of columns\">{{col}}</th>\r\n                  </tr>\r\n              </ng-template>\r\n            <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\r\n                <tr>\r\n                    <td *ngFor=\"let col of columns\">{{item[col]}}</td>\r\n                </tr>\r\n            </ng-template>\r\n\r\n            <ng-template freudTemplate=\"summary\">\r\n                <div class=\"p-d-flex p-ai-center p-jc-between\">\r\n                    Total de 6 produtos.\r\n                </div>\r\n            </ng-template>\r\n        </freud-table>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateSort",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/table/Table.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTableComponent>",
                    "defaultValue": "(args: FreudTableComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 100%\">\r\n      <freud-table [value]=\"value\" [columns]=\"columns\">\r\n          <ng-template freudTemplate=\"header\" let-columns=\"columns\">\r\n                <tr>\r\n                    <th freudSortableColumn=\"{{col}}\" *ngFor=\"let col of columns\">{{col}} <freud-sortIcon field=\"{{col}}\"></freud-sortIcon></th>\r\n                </tr>\r\n            </ng-template>\r\n          <ng-template freudTemplate=\"body\" let-item=\"item\" let-columns=\"columns\">\r\n              <tr>\r\n                  <td *ngFor=\"let col of columns\">{{item[col]}}</td>\r\n              </tr>\r\n          </ng-template>\r\n      </freud-table>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/media/file-upload/FileUpload.stories.ts": [
                {
                    "name": "BasicUi",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/file-upload/FileUpload.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudFileUploadComponent>",
                    "defaultValue": "(args: FreudFileUploadComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-file-upload\r\n        [name]=\"'file[]'\"\r\n        [url]=\"url\"\r\n        [auto]=\"auto\"\r\n        [accept]=\"accept\"\r\n        [multiple]=\"multiple\"\r\n        [method]=\"method\"\r\n        [fileLimit]=\"fileLimit\"\r\n        [chooseIcon]=\"chooseIcon\"\r\n        [chooseLabel]=\"chooseLabel\"\r\n        [uploadLabel]=\"uploadLabel\"\r\n        [uploadIcon]=\"uploadIcon\"\r\n        [cancelIcon]=\"cancelIcon\"\r\n        [withCredentials]=\"withCredentials\"\r\n        [mode]=\"mode\"\r\n        [customUpload]=\"customUpload\"\r\n        [showUploadButton]=\"showUploadButton\"\r\n        [showCancelButton]=\"showCancelButton\"\r\n        [headers]=\"headers\"\r\n    ></freud-file-upload>\r\n  `,\r\n})"
                }
            ],
            "stories/typography/typography.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HeadingBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HeadingBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBold.bind({})"
                },
                {
                    "name": "HeadingRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRegular.bind({})"
                },
                {
                    "name": "HeadingSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSemibold.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p freud-typography [fontType]=\"fontType\" [fontBgColor]=\"fontBgColor\">{{label}}</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-5'\">h6/Bold-700/line-height-1.5 (h6Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-5'\">h5/Bold-700/line-height-1.5 (h5Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-5'\">h4/Bold-700/line-height-1.5 (h4Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-5'\">h3/Bold-700/line-height-1.5 (h3Bold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-5'\">h2/Bold-700/line-height-1.5 (h2Bold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-5'\">h1/Bold-700//line-height-1.5 (h1Bold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1-2'\">h6/Bold-700/line-height-1.2 (h6Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1-2'\">h5/Bold-700/line-height-1.2 (h5Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1-2'\">h4/Bold-700/line-height-1.2 (h4Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1-2'\">h3/Bold-700/line-height-1.2 (h3Bold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1-2'\">h2/Bold-700/line-height-1.2 (h2Bold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1-2'\">h1/Bold-700/line-height-1.2 (h1Bold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Bold1'\">h6/Bold-700/line-height-1 (h6Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Bold1'\">h5/Bold-700/line-height-1 (h5Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Bold1'\">h4/Bold-700/line-height-1 (h4Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Bold1'\">h3/Bold-700/line-height-1 (h3Bold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Bold1'\">h2/Bold-700/line-height-1 (h2Bold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Bold1'\">h1/Bold-700/line-height-1 (h1Bold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6BoldAuto'\">h6/Bold-700/line-height-Auto (h6BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5BoldAuto'\">h5/Bold-700/line-height-Auto (h5BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4BoldAuto'\">h4/Bold-700/line-height-Auto (h4BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3BoldAuto'\">h3/Bold-700/line-height-Auto (h3BoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2BoldAuto'\">h2/Bold-700/line-height-Auto (h2BoldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1BoldAuto'\">h1/Bold-700/line-height-auto (h1BoldAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-5'\">h6/regular-400/line-height-1.5 (h6Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-5'\">h5/regular-400/line-height-1.5 (h5Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-5'\">h4/regular-400/line-height-1.5 (h4Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-5'\">h3/regular-400/line-height-1.5 (h3Regular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-5'\">h2/regular-400/line-height-1.5 (h2Regular1-5)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-5'\">h1/regular-400/line-height-1.5 (h1Regular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1-2'\">h6/regular-400/line-height-1.2 (h6Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1-2'\">h5/regular-400/line-height-1.2 (h5Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1-2'\">h4/regular-400/line-height-1.2 (h4Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1-2'\">h3/regular-400/line-height-1.2 (h3Regular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1-2'\">h2/regular-400/line-height-1.2 (h2Regular1-2)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1-2'\">h1/regular-400/line-height-1.2 (h1Regular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Regular1'\">h6/regular-400/line-height-1 (h6Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Regular1'\">h5/regular-400/line-height-1 (h5Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Regular1'\">h4/regular-400/line-height-1 (h4Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Regular1'\">h3/regular-400/line-height-1 (h3Regular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Regular1'\">h2/regular-400/line-height-1 (h2Regular1)</p>\r\n    <p freud-typography [fontType]=\"'h1Regular1'\">h1/regular-400/line-height-1 (h1Regular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6RegularAuto'\">h6/regular-400/line-height-Auto (h6RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5RegularAuto'\">h5/regular-400/line-height-Auto (h5RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4RegularAuto'\">h4/regular-400/line-height-Auto (h4RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3RegularAuto'\">h3/regular-400/line-height-Auto (h3RegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2RegularAuto'\">h2/regular-400/line-height-Auto (h2RegularAuto)</p>\r\n    <p freud-typography [fontType]=\"'h1RegularAuto'\">h1/regular-400/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-5'\">h6/Semibold-600/line-height-1.5 (h6Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-5'\">h5/Semibold-600/line-height-1.5 (h5Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-5'\">h4/Semibold-600/line-height-1.5 (h4Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-5'\">h3/Semibold-600/line-height-1.5 (h3Semibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-5'\">h2/Semibold-600/line-height-1.5 (h2Semibold1-5)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-5'\">h1/Semibold-600/line-height-1.5 (h1Semibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1-2'\">h6/Semibold-600/line-height-1.2 (h6Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1-2'\">h5/Semibold-600/line-height-1.2 (h5Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1-2'\">h4/Semibold-600/line-height-1.2 (h4Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1-2'\">h3/Semibold-600/line-height-1.2 (h3Semibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1-2'\">h2/Semibold-600/line-height-1.2 (h2Semibold1-2)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1-2'\">h1/Semibold-600/line-height-1.2 (h1Semibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6Semibold1'\">h6/Semibold-600/line-height-1 (h6Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5Semibold1'\">h5/Semibold-600/line-height-1 (h5Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4Semibold1'\">h4/Semibold-600/line-height-1 (h4Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3Semibold1'\">h3/Semibold-600/line-height-1 (h3Semibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2Semibold1'\">h2/Semibold-600/line-height-1 (h2Semibold1)</p>\r\n  <p freud-typography [fontType]=\"'h1Semibold1'\">h1/Semibold-600/line-height-1 (h1Regular1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h6SemiboldAuto'\">h6/Semibold-600/line-height-Auto (h6SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h5SemiboldAuto'\">h5/Semibold-600/line-height-Auto (h5SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h4SemiboldAuto'\">h4/Semibold-600/line-height-Auto (h4SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h3SemiboldAuto'\">h3/Semibold-600/line-height-Auto (h3SemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'h2SemiboldAuto'\">h2/Semibold-600/line-height-Auto (h2SemiboldAuto)</p>\r\n  <p freud-typography [fontType]=\"'h1SemiboldAuto'\">h1/Semibold-600/line-height-auto (h1RegularAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateTextBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-5'\">small/Bold-700/line-height-1.5 (smallBold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-5'\">body/Bold-700/line-height-1.5 (bodyBold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1-2'\">small/Bold-700/line-height-1.2 (smallBold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1-2'\">body/Bold-700/line-height-1.2 (bodyBold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBold1'\">small/Bold-700/line-height-1 (smallBold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBold1'\">body/Bold-700/line-height-1 (bodyBold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallBoldAuto'\">small/Bold-700/line-height-Auto (smallBoldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyBoldAuto'\">body/Bold-700/line-height-Auto (bodyBoldAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateTextRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-5'\">small/regular-400/line-height-1.5 (smallRegular1-5)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-5'\">body/regular-400/line-height-1.5 (bodyRegular1-5)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1-2'\">small/regular-400/line-height-1.2 (smallRegular1-2)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1-2'\">body/regular-400/line-height-1.2 (bodyRegular1-2)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegular1'\">small/regular-400/line-height-1 (smallRegular1)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegular1'\">body/regular-400/line-height-1 (bodyRegular1)</p>\r\n\r\n    <br><br>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallRegularAuto'\">small/regular-400/line-height-Auto (smallRegularAuto)</p>\r\n    <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodyRegularAuto'\">body/regular-400/line-height-Auto (bodyRegularAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TemplateTextSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTypographyComponent>",
                    "defaultValue": "(\r\n  args: FreudTypographyComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-5'\">small/Semibold-600/line-height-1.5 (smallSemibold1-5)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-5'\">body/Semibold-600/line-height-1.5 (bodySemibold1-5)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1-2'\">small/Semibold-600/line-height-1.2 (smallSemibold1-2)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1-2'\">body/Semibold-600/line-height-1.2 (bodySemibold1-2)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemibold1'\">small/Semibold-600/line-height-1 (smallSemibold1)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemibold1'\">body/Semibold-600/line-height-1 (bodySemibold1)</p>\r\n\r\n  <br><br>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'smallSemiboldAuto'\">small/Semibold-600/line-height-Auto (smallSemiboldAuto)</p>\r\n  <p style=\"margin-bottom: 8px\" freud-typography [fontType]=\"'bodySemiboldAuto'\">body/Semibold-600/line-height-Auto (bodySemiboldAuto)</p>\r\n  `\r\n})"
                },
                {
                    "name": "TextBold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextBold.bind({})"
                },
                {
                    "name": "TextRegular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextRegular.bind({})"
                },
                {
                    "name": "TextSemibold",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/typography/typography.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTextSemibold.bind({})"
                }
            ],
            "stories/feedback/alert-messages/AlertMessages.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Inline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateInline.bind({})"
                },
                {
                    "name": "messages",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMessage[]",
                    "defaultValue": "[\r\n  {severity:'success', summary:'Success', detail:'Message content'},\r\n  {severity:'info', summary:'Info', detail:'Message content'},\r\n  {severity:'warn', summary:'Warning', detail:'Message content'},\r\n  {severity:'error', summary:'Error', detail:'Message content'}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAlertMessagesComponent>",
                    "defaultValue": "(args: FreudAlertMessagesComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-alert-messages\r\n        [messages]=\"messages\">\r\n    </freud-alert-messages>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateInline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAlertMessagesComponent>",
                    "defaultValue": "(args: FreudAlertMessagesComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-alert-message [severity]=\"'success'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n    <freud-alert-message [severity]=\"'info'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n    <freud-alert-message [severity]=\"'warn'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n    <freud-alert-message [severity]=\"'error'\" [text]=\"'Message Content'\"></freud-alert-message><br><br>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/knob/Knob.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudKnobComponent>",
                    "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-knob\r\n      [value]=\"value\"\r\n      [min]=\"min\"\r\n      [max]=\"max\"\r\n      [step]=\"step\"\r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-knob>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/knob/Knob.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudKnobComponent>",
                    "defaultValue": "(\r\n  args: FreudKnobComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"display: flex; align-items: center;\">\r\n      <freud-knob style=\"margin-right: 20px\"\r\n        [value]=\"'50'\"\r\n        [size]=\"'default'\">\r\n      </freud-knob>\r\n\r\n      <freud-knob\r\n        [value]=\"'50'\"\r\n        [size]=\"'large'\">\r\n      </freud-knob>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/rating/Rating.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/rating/Rating.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudRatingComponent>",
                    "defaultValue": "(\r\n  args: FreudRatingComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-rating\r\n      [value]=\"value\"\r\n      [stars]=\"stars\"\r\n      [disabled]=\"disabled\"\r\n      [bgColor]=\"bgColor\">\r\n    </freud-rating>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/progress-bar/ProgressBar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Indeterminate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudProgressBarComponent>",
                    "defaultValue": "(\r\n  args: FreudProgressBarComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <freud-progress-bar [bgColor]=\"bgColor\" [value]=\"50\" [mode]=\"mode\">\r\n      </freud-progress-bar>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/progress-spinner/ProgressSpinner.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudProgressSpinnerComponent>",
                    "defaultValue": "(\r\n  args: FreudProgressSpinnerComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-progress-spinner [bgColor]=\"bgColor\">\r\n      </freud-progress-spinner>\r\n  </div>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/steps/Steps.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "itens",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "StepMenu[]",
                    "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/steps/Steps.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudStepsComponent>",
                    "defaultValue": "(\r\n  args: FreudStepsComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-steps [model]=\"model\" [readonly]=\"readonly\" [activeIndex]=\"activeIndex\" [bgColor]=\"bgColor\"></freud-steps>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/skeleton/Skeleton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/skeleton/Skeleton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSkeletonComponent>",
                    "defaultValue": "(\r\n  args: FreudSkeletonComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"width: 350px\">\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'100%'\"\r\n        [height]=\"'15px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <freud-skeleton\r\n        [width]=\"'350px'\"\r\n        [height]=\"'70px'\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-skeleton>\r\n      <br>\r\n      <div style=\"display: flex\">\r\n        <freud-skeleton style=\"margin-right: 10px\"\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n        <freud-skeleton\r\n          [width]=\"'170px'\"\r\n          [height]=\"'70px'\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-skeleton>\r\n      </div>\r\n  </div>\r\n  `,\r\n})"
                }
            ],
            "stories/feedback/tag/Tag.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "BGColorOutline",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBgColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Info",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineDefault",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineInfo",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OutlineWarning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Success",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTagComponent>",
                    "defaultValue": "(args: FreudTagComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tag [outline]=\"outline\" [color]=\"color\" [value]=\"value\"></freud-tag>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTagComponent>",
                    "defaultValue": "(args: FreudTagComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [value]=\"'Default'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'success'\" [value]=\"'Success'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'info'\" [value]=\"'Info'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'warning'\" [value]=\"'Warning'\"></freud-tag>\r\n    <freud-tag style=\"margin-right: 8px\" [outline]=\"outline\" [color]=\"'error'\" [value]=\"'Error'\"></freud-tag>\r\n  `,\r\n})"
                },
                {
                    "name": "Warning",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tag/Tag.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/buttons/button/Button.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateBGColor.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDisabled.bind({})"
                },
                {
                    "name": "Ghost",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "IconOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIcon.bind({})"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateLoading.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace('{{label}}', 'Button {{color}}'),\r\n})"
                },
                {
                    "name": "TemplateBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTMLBgColor,\r\n})"
                },
                {
                    "name": "TemplateDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace('{{label}}', 'Disabled'),\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-button\r\n      [color]=\"color\"\r\n      [bgColor]=\"bgColor\"\r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      [loading]=\"loading\"\r\n      [icon]=\"icon\"\r\n      >{{label}}</freud-button>\r\n`"
                },
                {
                    "name": "templateHTMLBgColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"display: flex;gap: 16px;align-items: center\">\r\n      <freud-button [bgColor]=\"true\" [color]=\"'primary'\">Button primary</freud-button>\r\n      <freud-button [bgColor]=\"true\" [color]=\"'secondary'\">Button secondary</freud-button>\r\n      <freud-button [bgColor]=\"true\" [color]=\"'ghost'\">Button ghost</freud-button>\r\n    </div>\r\n`"
                },
                {
                    "name": "templateHTMLSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"display: flex;gap: 16px;align-items: center\">\r\n      <freud-button [bgColor]=\"bgColor\" [color]=\"color\" [size]=\"'sm'\">Button sm</freud-button>\r\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'md'\">Button md</freud-button>\r\n      <freud-button [bgColor]=\"bgColor\" [size]=\"'lg'\">Button lg</freud-button>\r\n    </div>\r\n`"
                },
                {
                    "name": "TemplateIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace(\r\n    '{{label}}',\r\n    ''\r\n  ),\r\n})"
                },
                {
                    "name": "TemplateLoading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML.replace('{{label}}', 'Button'),\r\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudButtonComponent>",
                    "defaultValue": "(args: FreudButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTMLSize,\r\n})"
                },
                {
                    "name": "WithIconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateLoading .bind({})"
                }
            ],
            "stories/feedback/tooltip/Tooltip.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Bottom",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Left",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Right",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTooltipComponent>",
                    "defaultValue": "(\r\n  args: FreudTooltipComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <span freud-tooltip style=\"color:{{bgColor ? 'white' : 'black'}}\"\r\n      [tooltipLabel]=\"tooltipLabel\"\r\n      [tooltipPosition]=\"tooltipPosition\"\r\n      style=\"font-family: 'Source Sans Pro'\"\r\n      [bgColor]=\"bgColor\">Passe o mouse aqui!</span>\r\n  `,\r\n})"
                },
                {
                    "name": "Top",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/tooltip/Tooltip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/buttons/split-button/SplitButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {label: 'Update', icon: 'freud-icon freud-icon-refresh', command: () => {\r\n      console.log('Evento update')\r\n    }\r\n  },\r\n  {\r\n    label: 'Delete', icon: 'freud-icon freud-icon-close', command: () => {\r\n      console.log('Evento delete')\r\n    },\r\n  },\r\n  {label: 'Zenklub', icon: 'freud-icon freud-icon-info', url: 'http://zenklub.com'},\r\n  {separator: true},\r\n  {label: 'Setup', icon: 'freud-icon freud-icon-cog'}\r\n]"
                },
                {
                    "name": "itemsWithoutIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {label: 'Update', command: () => {console.log('Evento update')}\r\n  },\r\n  {\r\n    label: 'Delete', command: () => {console.log('Evento delete')},\r\n  },\r\n  {label: 'Zenklub', url: 'http://zenklub.com'}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSplitButtonComponent>",
                    "defaultValue": "(args: FreudSplitButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/split-button/SplitButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-split-button\r\n        [label]=\"label\"\r\n        [disabled]=\"disabled\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-split-button>\r\n    <p *ngIf=\"!disabled\" style=\"margin-bottom: 180px\"></p>\r\n`"
                }
            ],
            "stories/buttons/speed-dial/SpeedDial.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DirectionDown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "DirectionLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "itemsWithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {icon: 'freud-icon freud-icon-refresh', command: () => {\r\n      console.log('Evento update')\r\n    }\r\n  },\r\n  {\r\n    icon: 'freud-icon freud-icon-close', command: () => {\r\n      console.log('Evento delete')\r\n    },\r\n  },\r\n  {icon: 'freud-icon freud-icon-check'}\r\n]"
                },
                {
                    "name": "Mask",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSpeedDialComponent>",
                    "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 250px; width: 120px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSpeedDialComponent>",
                    "defaultValue": "(\r\n  args: FreudSpeedDialComponent\r\n) => ({\r\n  props: { ...args },\r\n  template: `\r\n  <div style=\"height: 80px; width: 80px; margin: 50px\">\r\n      <freud-speed-dial\r\n        [id]=\"id\"\r\n        [visible]=\"visible\"\r\n        [mask]=\"mask\"\r\n        [disabled]=\"disabled\"\r\n        [showIcon]=\"showIcon\"\r\n        [hideIcon]=\"hideIcon\"\r\n        [type]=\"type\"\r\n        [direction]=\"direction\"\r\n        [items]=\"items\"\r\n        [bgColor]=\"bgColor\">\r\n      </freud-speed-dial>\r\n  </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TypeCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                },
                {
                    "name": "TypeQuarterCircle",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                },
                {
                    "name": "TypeQuarterDownRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCircle.bind({})"
                }
            ],
            "stories/forms/auto-complete/AutoComplete.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Dropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDropdown.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAutoCompleteComponent>",
                    "defaultValue": "(args: FreudAutoCompleteComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-auto-complete-example\r\n          [disabled]=\"disabled\"\r\n          [dropdown]=\"dropdown\"\r\n          [multiple]=\"multiple\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-auto-complete-example>\r\n    </div>\r\n`"
                },
                {
                    "name": "TemplateDropdown",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAutoCompleteComponent>",
                    "defaultValue": "(args: FreudAutoCompleteComponent) => ({\r\n  props: { ...args },\r\n  template: templateDropdown,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/auto-complete/AutoComplete.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"height: 150px\">\r\n        <freud-auto-complete-example\r\n          [disabled]=\"disabled\"\r\n          [dropdown]=\"dropdown\"\r\n          [multiple]=\"multiple\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n        </freud-auto-complete-example>\r\n    </div>\r\n`"
                }
            ],
            "stories/forms/checkbox/Checkbox.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCheckboxComponent>",
                    "defaultValue": "(args: FreudCheckboxComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/checkbox/Checkbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n      <freud-checkbox\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [bgColor]=\"bgColor\"\r\n        [invalid]=\"invalid\">\r\n    </freud-checkbox>\r\n`"
                }
            ],
            "stories/forms/input-group/InputGroup.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRadioAndButton.bind({})"
                },
                {
                    "name": "CheckboxAndText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateCheckboxAndText.bind({})"
                },
                {
                    "name": "IconAndRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconAndRadio.bind({})"
                },
                {
                    "name": "IconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconLeft.bind({})"
                },
                {
                    "name": "IconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIconRight.bind({})"
                },
                {
                    "name": "RadioAndButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateRadioAndButton.bind({})"
                },
                {
                    "name": "TemplateCheckboxAndText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\">\r\n        <freud-checkbox></freud-checkbox>\r\n      </span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <span class=\"freud-input-group-addon\">ww</span>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateIconAndRadio",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <span class=\"freud-input-group-addon\">\r\n        <freud-radio-button radioValue=\"teste\" name=\"item\"></freud-radio-button>\r\n      </span>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateIconLeft",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateIconRight",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <span class=\"freud-input-group-addon\"><i class=\"freud-icon freud-icon-user\"></i></span>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateRadioAndButton",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-group/InputGroup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div class=\"freud-input-group\">\r\n      <span class=\"freud-input-group-addon\">\r\n        <freud-radio-button radioValue=\"teste\" name=\"item2\"></freud-radio-button>\r\n      </span>\r\n      <freud-input-text placeholder=\"Username\"></freud-input-text>\r\n      <freud-button>Button</freud-button>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/forms/cascade-select/CascadeSelect.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    name: 'Australia',\r\n    code: 'AU',\r\n    states: [\r\n      {\r\n        name: 'New South Wales',\r\n        cities: [\r\n          {cname: 'Sydney', code: 'A-SY'},\r\n          {cname: 'Newcastle', code: 'A-NE'},\r\n          {cname: 'Wollongong', code: 'A-WO'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Queensland',\r\n        cities: [\r\n          {cname: 'Brisbane', code: 'A-BR'},\r\n          {cname: 'Townsville', code: 'A-TO'}\r\n        ]\r\n      },\r\n\r\n    ]\r\n  },\r\n  {\r\n    name: 'Canada',\r\n    code: 'CA',\r\n    states: [\r\n      {\r\n        name: 'Quebec',\r\n        cities: [\r\n          {cname: 'Montreal', code: 'C-MO'},\r\n          {cname: 'Quebec City', code: 'C-QU'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Ontario',\r\n        cities: [\r\n          {cname: 'Ottawa', code: 'C-OT'},\r\n          {cname: 'Toronto', code: 'C-TO'}\r\n        ]\r\n      },\r\n\r\n    ]\r\n  },\r\n  {\r\n    name: 'United States',\r\n    code: 'US',\r\n    states: [\r\n      {\r\n        name: 'California',\r\n        cities: [\r\n          {cname: 'Los Angeles', code: 'US-LA'},\r\n          {cname: 'San Diego', code: 'US-SD'},\r\n          {cname: 'San Francisco', code: 'US-SF'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Florida',\r\n        cities: [\r\n          {cname: 'Jacksonville', code: 'US-JA'},\r\n          {cname: 'Miami', code: 'US-MI'},\r\n          {cname: 'Tampa', code: 'US-TA'},\r\n          {cname: 'Orlando', code: 'US-OR'}\r\n        ]\r\n      },\r\n      {\r\n        name: 'Texas',\r\n        cities: [\r\n          {cname: 'Austin', code: 'US-AU'},\r\n          {cname: 'Dallas', code: 'US-DA'},\r\n          {cname: 'Houston', code: 'US-HO'}\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCascadeSelectComponent>",
                    "defaultValue": "(args: FreudCascadeSelectComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-cascade-select\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [options]=\"options\"\r\n          [optionLabel]=\"'cname'\"\r\n          [optionValue]=\"'code'\"\r\n          [placeholder]=\"placeholder\"\r\n          [optionGroupLabel]=\"'name'\"\r\n          [optionGroupChildren]=\"['states', 'cities']\"\r\n          [helpText]=\"helpText\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-cascade-select>\r\n    </div>\r\n`"
                }
            ],
            "stories/forms/input-mask/InputMask.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Celular",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CPF",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Data",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Telefone",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputMaskComponent>",
                    "defaultValue": "(args: FreudInputMaskComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-mask/InputMask.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-input-mask\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [placeholder]=\"placeholder\"\r\n        [helpText]=\"helpText\"\r\n        [invalid]=\"invalid\"\r\n        [mask]=\"mask\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-mask>\r\n`"
                }
            ],
            "stories/forms/input-number/InputNumber.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "ButtonLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateButtonLayout.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputNumberComponent>",
                    "defaultValue": "(args: FreudInputNumberComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "TemplateButtonLayout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputNumberComponent>",
                    "defaultValue": "(args: FreudInputNumberComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [label]=\"label\"\r\n        [buttonLayout]=\"'stacked'\"\r\n        [showButtons]=\"true\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-number> <br><br>\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [label]=\"label\"\r\n        [buttonLayout]=\"'horizontal'\"\r\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\r\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\r\n        [showButtons]=\"true\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-number> <br><br>\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [label]=\"label\"\r\n        incrementButtonIcon=\"freud-icon freud-icon-plus\"\r\n        decrementButtonIcon=\"freud-icon freud-icon-minus\"\r\n        [buttonLayout]=\"'vertical'\"\r\n        [showButtons]=\"true\">\r\n    </freud-input-number> <br><br>\r\n  `,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-number/InputNumber.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-input-number\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [placeholder]=\"placeholder\"\r\n        [invalid]=\"invalid\"\r\n        [showButtons]=\"showButtons\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-number>\r\n`"
                }
            ],
            "stories/forms/input-text/InputText.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "HelperText",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Placeholder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputTextComponent>",
                    "defaultValue": "(args: FreudInputTextComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-text/InputText.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-input-text\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [placeholder]=\"placeholder\"\r\n        [helpText]=\"helpText\"\r\n        [invalid]=\"invalid\"\r\n        [rightIcon]=\"rightIcon\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-text>\r\n`"
                }
            ],
            "stories/forms/listbox/Listbox.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Checkbox",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "CheckboxAndFilter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Filter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {name: 'New York', code: 'NY'},\r\n  {name: 'Rome', code: 'RM', disabled: true},\r\n  {name: 'London', code: 'LDN'},\r\n  {name: 'Istanbul', code: 'IST'},\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudListboxComponent>",
                    "defaultValue": "(args: FreudListboxComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/listbox/Listbox.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-listbox\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [options]=\"options\"\r\n          [multiple]=\"multiple\"\r\n          [filter]=\"filter\"\r\n          [checkbox]=\"checkbox\"\r\n          [optionLabel]=\"optionLabel\"\r\n          [optionValue]=\"optionValue\"\r\n          [invalid]=\"invalid\">\r\n      </freud-listbox>\r\n    </div>\r\n`"
                }
            ],
            "stories/forms/input-password/InputPassword.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFeedback.bind({})"
                },
                {
                    "name": "CustomTemplate",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFull.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Feedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFeedback.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n  <div style=\"height: 130px\">\r\n          <freud-input-password\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [feedback]=\"feedback\"\r\n          [placeholder]=\"placeholder\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-input-password>\r\n  </div>\r\n`"
                },
                {
                    "name": "TemplateFeedback",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\r\n  props: { ...args },\r\n  template: templateFeedback,\r\n})"
                },
                {
                    "name": "templateFull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"height: 350px\">\r\n        <freud-input-password\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [feedback]=\"feedback\"\r\n          [placeholder]=\"placeholder\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n            <ng-container freudTemplateHeader>\r\n              <strong>Pick a password</strong>\r\n            </ng-container>\r\n            <ng-container freudTemplatefooter>\r\n                <div>\r\n                  <hr>\r\n                  <p class=\"p-mt-2\">Suggestions</p>\r\n                  <ul class=\"p-pl-2 p-ml-2 p-mt-0\" style=\"line-height: 1.5\">\r\n                      <li>At least one lowercase</li>\r\n                      <li>At least one uppercase</li>\r\n                      <li>At least one numeric</li>\r\n                      <li>Minimum 8 characters</li>\r\n                  </ul>\r\n                </div>\r\n            </ng-container>\r\n        </freud-input-password>\r\n    </div>\r\n`"
                },
                {
                    "name": "TemplateFull",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudInputPasswordComponent>",
                    "defaultValue": "(args: FreudInputPasswordComponent) => ({\r\n  props: { ...args },\r\n  template: templateFull,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/input-password/InputPassword.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-input-password\r\n        [(ngModel)]=\"value\"\r\n        [disabled]=\"disabled\"\r\n        [label]=\"label\"\r\n        [feedback]=\"feedback\"\r\n        [placeholder]=\"placeholder\"\r\n        [invalid]=\"invalid\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-input-password>\r\n`"
                }
            ],
            "stories/forms/multi-select/MultiSelect.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Chip",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {name: 'New York', code: 'NY'},\r\n  {name: 'Rome', code: 'RM', disabled: true},\r\n  {name: 'London', code: 'LDN'},\r\n  {name: 'Istanbul', code: 'IST'},\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMultiSelectComponent>",
                    "defaultValue": "(args: FreudMultiSelectComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/multi-select/MultiSelect.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"height: 300px\">\r\n        <freud-multi-select\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [options]=\"options\"\r\n          [optionLabel]=\"optionLabel\"\r\n          [optionValue]=\"optionValue\"\r\n          [placeholder]=\"placeholder\"\r\n          [display]=\"display\"\r\n          [helpText]=\"helpText\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-multi-select>\r\n    </div>\r\n`"
                }
            ],
            "stories/forms/radio-button/RadioButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Label",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudRadioButtonComponent>",
                    "defaultValue": "(args: FreudRadioButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n  argTypes: {\r\n    value: {\r\n      name: 'ModelValue',\r\n      type: { name: 'string' },\r\n      defaultValue: 'Hello',\r\n      description: 'demo description',\r\n      table: {\r\n        type: { summary: 'string' },\r\n        defaultValue: { summary: 'Hello' },\r\n      },\r\n      control: {\r\n        type: 'text'\r\n      }\r\n    }\r\n  }\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/radio-button/RadioButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n        <freud-radio-button-example\r\n            [(ngModel)]=\"value\"\r\n            [disabled]=\"disabled\"\r\n            [label]=\"label\"\r\n            [name]=\"'label'\"\r\n            [bgColor]=\"bgColor\"\r\n        ></freud-radio-button-example>\r\n`"
                }
            ],
            "stories/forms/select/Select.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Invalid",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {name: 'New York', code: 'NY'},\r\n  {name: 'Rome', code: 'RM', disabled: true},\r\n  {name: 'London', code: 'LDN'},\r\n  {name: 'Istanbul', code: 'IST'},\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSelectComponent>",
                    "defaultValue": "(args: FreudSelectComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/select/Select.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <div style=\"height: 250px\">\r\n        <freud-select\r\n          [(ngModel)]=\"value\"\r\n          [disabled]=\"disabled\"\r\n          [label]=\"label\"\r\n          [options]=\"options\"\r\n          [optionLabel]=\"optionLabel\"\r\n          [optionValue]=\"optionValue\"\r\n          [placeholder]=\"placeholder\"\r\n          [helpText]=\"helpText\"\r\n          [invalid]=\"invalid\"\r\n          [bgColor]=\"bgColor\">\r\n      </freud-select>\r\n    </div>\r\n`"
                }
            ],
            "stories/forms/switch/Switch.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSwitchComponent>",
                    "defaultValue": "(args: FreudSwitchComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n      <freud-input-switch\r\n        [(ngModel)]=\"defaultValue\"\r\n        [disabled]=\"disabled\"\r\n        [invalid]=\"invalid\">\r\n    </freud-input-switch>\r\n`"
                },
                {
                    "name": "value",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/forms/switch/Switch.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "defaultValue": "false"
                }
            ],
            "stories/media/avatar/Avatar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Imagem",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateSize.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAvatarComponent>",
                    "defaultValue": "(args: FreudAvatarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-avatar [size]=\"size\" [label]=\"label\" [badge]=\"badge\" [bgColor]=\"bgColor\" [withIcon]=\"withIcon\" [image]=\"image\"></freud-avatar>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateSize",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAvatarComponent>",
                    "defaultValue": "(args: FreudAvatarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"display: flex; align-items: center\">\r\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'sm'\" [label]=\"'A'\"></freud-avatar>\r\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'md'\" [label]=\"'A'\"></freud-avatar>\r\n        <freud-avatar style=\"margin-right: 16px;\" [size]=\"'lg'\" [label]=\"'A'\"></freud-avatar>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "WithBadge",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "WithLabel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/avatar/Avatar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/media/image/Image.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/image/Image.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudImageComponent>",
                    "defaultValue": "(args: FreudImageComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-image [preview]=\"preview\" [alt]=\"alt\" [src]=\"src\" [height]=\"height\" [width]=\"width\"></freud-image>\r\n  `,\r\n})"
                }
            ],
            "stories/media/gallery/gallery.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "images",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria1.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria1.jpg\",\r\n    \"alt\": \"Description for Image 1\",\r\n    \"title\": \"Title 1\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria2.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria2.jpg\",\r\n    \"alt\": \"Description for Image 2\",\r\n    \"title\": \"Title 2\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria3.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria3.jpg\",\r\n    \"alt\": \"Description for Image 3\",\r\n    \"title\": \"Title 3\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria4.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria4.jpg\",\r\n    \"alt\": \"Description for Image 4\",\r\n    \"title\": \"Title 4\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria5.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria5.jpg\",\r\n    \"alt\": \"Description for Image 5\",\r\n    \"title\": \"Title 5\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria6.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria6.jpg\",\r\n    \"alt\": \"Description for Image 6\",\r\n    \"title\": \"Title 6\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria7.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria7.jpg\",\r\n    \"alt\": \"Description for Image 7\",\r\n    \"title\": \"Title 7\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria8.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria8.jpg\",\r\n    \"alt\": \"Description for Image 8\",\r\n    \"title\": \"Title 8\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria9.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria9.jpg\",\r\n    \"alt\": \"Description for Image 9\",\r\n    \"title\": \"Title 9\"\r\n  },\r\n  {\r\n    \"previewImageSrc\": \"assets/img/gallery/galleria10.jpg\",\r\n    \"thumbnailImageSrc\": \"assets/img/gallery/galleria10.jpg\",\r\n    \"alt\": \"Description for Image 10\",\r\n    \"title\": \"Title 10\"\r\n  }\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudGalleryComponent>",
                    "defaultValue": "(args: FreudGalleryComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-gallery\r\n        [images]=\"images\"\r\n        [showThumbnails]=\"showThumbnails\"\r\n        [bgColor]=\"bgColor\">\r\n    </freud-gallery>\r\n  `,\r\n})"
                },
                {
                    "name": "WithoutThumbnail",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/media/gallery/gallery.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/structure/menu/Menu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[{\r\n  label: 'Options',\r\n  items: [{\r\n    label: 'Update',\r\n    icon: 'freud-icon freud-icon-refresh',\r\n    command: () => {/* Comando */ }\r\n  },\r\n    {\r\n      label: 'Delete',\r\n      icon: 'freud-icon freud-icon-times'\r\n    }\r\n  ]},\r\n  {\r\n    label: 'Navigate',\r\n    items: [{\r\n      label: 'Update',\r\n      icon: 'freud-icon freud-icon-external-link',\r\n    },\r\n      {\r\n        label: 'Router',\r\n        icon: 'freud-icon freud-icon-upload',\r\n        routerLink: '/fileupload'\r\n      }\r\n    ]}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menu/Menu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMenuComponent>",
                    "defaultValue": "(args: FreudMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-menu [items]=\"items\" [popup]=\"popup\"></freud-menu>\r\n  `,\r\n})"
                }
            ],
            "stories/structure/breadcrumb/Breadcrumb.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem",
                    "defaultValue": "{\r\n  icon: 'freud-icon freud-icon-home'\r\n}"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBreadcrumbComponent>",
                    "defaultValue": "(args: FreudBreadcrumbComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-breadcrumb [bgColor]=\"bgColor\" [items]=\"items\" [home]=\"home\"></freud-breadcrumb>\r\n  `,\r\n})"
                }
            ],
            "stories/structure/menubar/Menubar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "home",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem",
                    "defaultValue": "{\r\n  icon: 'freud-icon freud-icon-home'\r\n}"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {\r\n    label:'Users',\r\n    icon:'freud-icon freud-icon-user',\r\n    items:[\r\n      {\r\n        label:'New',\r\n        icon:'freud-icon freud-icon-user-plus',\r\n\r\n      },\r\n      {\r\n        label:'Delete',\r\n        icon:'freud-icon freud-icon-user-minus',\r\n\r\n      },\r\n      {\r\n        label:'Search',\r\n        icon:'freud-icon freud-icon-users',\r\n        items:[\r\n          {\r\n            label:'Filter',\r\n            icon:'freud-icon freud-icon-filter',\r\n            items:[\r\n              {\r\n                label:'Print',\r\n                icon:'freud-icon freud-icon-print'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            icon:'freud-icon freud-icon-bars',\r\n            label:'List'\r\n          }\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  {\r\n    label:'Events',\r\n    icon:'freud-icon freud-icon-calendar',\r\n    items:[\r\n      {\r\n        label:'Edit',\r\n        icon:'freud-icon freud-icon-pencil',\r\n      },\r\n    ]\r\n  },\r\n  {\r\n    label:'Quit',\r\n    icon:'freud-icon freud-icon-power-off'\r\n  }\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/menubar/Menubar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudMenubarComponent>",
                    "defaultValue": "(args: FreudMenubarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"height: 240px;width: 100%\">\r\n      <freud-menubar\r\n          [startImgAlt]=\"'Home'\"\r\n          [startImgSrc]=\"startImgSrc\"\r\n          [startImgHref]=\"'https://zenklub.com.br'\"\r\n          [items]=\"items\"\r\n          [bgColor]=\"bgColor\"\r\n      ></freud-menubar>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/structure/panel-menu/PanelMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {\r\n    label: 'File',\r\n    items: [{\r\n      label: 'New',\r\n      icon: 'freud-icon freud-icon-fw freud-icon-plus',\r\n      items: [\r\n        {label: 'User', icon: 'freud-icon freud-icon-fw freud-icon-user-plus'},\r\n        {label: 'Filter', icon: 'freud-icon freud-icon-fw freud-icon-filter'}\r\n      ]\r\n    },\r\n      {label: 'Open', icon: 'freud-icon freud-icon-fw freud-icon-external-link'},\r\n      {separator: true},\r\n      {label: 'Quit', icon: 'freud-icon freud-icon-fw freud-icon-times'}\r\n    ]\r\n  },\r\n  {\r\n    label: 'Edit',\r\n    icon: 'freud-icon freud-icon-fw freud-icon-pencil',\r\n    items: [\r\n      {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-trash'},\r\n      {label: 'Refresh', icon: 'freud-icon freud-icon-fw freud-icon-refresh'}\r\n    ]\r\n  },\r\n  {\r\n    label: 'Help',\r\n    icon: 'freud-icon freud-icon-fw freud-icon-question',\r\n    items: [\r\n      {\r\n        label: 'Contents',\r\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-bars'\r\n      },\r\n      {\r\n        label: 'Search',\r\n        icon: 'freud-icon freud-icon-freud-icon freud-icon-search',\r\n        items: [\r\n          {\r\n            label: 'Text',\r\n            items: [\r\n              {\r\n                label: 'Workspace'\r\n              }\r\n            ]\r\n          },\r\n          {\r\n            label: 'User',\r\n            icon: 'freud-icon freud-icon-fw freud-icon-file',\r\n          }\r\n        ]}\r\n    ]\r\n  },\r\n  {\r\n    label: 'Actions',\r\n    icon: 'freud-icon freud-icon-fw freud-icon-cog',\r\n    items: [\r\n      {\r\n        label: 'Edit',\r\n        icon: 'freud-icon freud-icon-fw freud-icon-pencil',\r\n        items: [\r\n          {label: 'Save', icon: 'freud-icon freud-icon-fw freud-icon-save'},\r\n          {label: 'Update', icon: 'freud-icon freud-icon-fw freud-icon-save'},\r\n        ]\r\n      },\r\n      {\r\n        label: 'Other',\r\n        icon: 'freud-icon freud-icon-fw freud-icon-tags',\r\n        items: [\r\n          {label: 'Delete', icon: 'freud-icon freud-icon-fw freud-icon-minus'}\r\n        ]\r\n      }\r\n    ]\r\n  }\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel-menu/PanelMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelMenuComponent>",
                    "defaultValue": "(args: FreudPanelMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"width: 400px\">\r\n        <freud-panel-menu\r\n          [items]=\"items\"\r\n        ></freud-panel-menu>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/structure/scroll-panel/ScrollPanel.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollPanelComponent>",
                    "defaultValue": "(args: FreudScrollPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-scroll-panel [style]=\"{height: '200px', width: '300px'}\">\r\n    Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Vitae et leo duis ut diam. Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut. Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna. Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris. Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales. Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus. Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas. Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris. Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer. Mattis aliquam faucibus purus in massa tempor nec.\r\n</freud-scroll-panel>\r\n  `,\r\n})"
                }
            ],
            "stories/structure/tab-menu/TabMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[\r\n  {label: 'Home', command: () => console.log('menuClicked')},\r\n  {label: 'Calendar', command: () => console.log('menuClicked')},\r\n  {label: 'Edit', command: () => console.log('menuClicked')},\r\n  {label: 'Documentation', command: () => console.log('menuClicked')},\r\n  {label: 'Settings', command: () => console.log('menuClicked')}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-menu/TabMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTabMenuComponent>",
                    "defaultValue": "(args: FreudTabMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tab-menu\r\n      [items]=\"items\"\r\n      [activeItem]=\"activeItem\"\r\n      [bgColor]=\"bgColor\"\r\n    ></freud-tab-menu>\r\n  `,\r\n})"
                }
            ],
            "stories/structure/splitter/Splitter.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSplitterComponent>",
                    "defaultValue": "(args: FreudSplitterComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-splitter [panelSizes]=\"panelSizes\" [style]=\"{'height': '300px'}\" [layout]=\"layout\">\r\n      <ng-template pTemplate>\r\n        <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\r\n          Panel 1\r\n        </div>\r\n      </ng-template>\r\n    <ng-template pTemplate>\r\n      <div style=\"display: flex;text-align: center;justify-content: center;width: 100%;flex-direction: column;\">\r\n        Panel 2\r\n      </div>\r\n    </ng-template>\r\n</freud-splitter>\r\n  `,\r\n})"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/splitter/Splitter.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/structure/tab-view/TabView.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Icon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIcon.bind({})"
                },
                {
                    "name": "Scrollable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTabViewComponent>",
                    "defaultValue": "(args: FreudTabViewComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tab-view\r\n      [activeIndex]=\"activeIndex\"\r\n      [controlClose]=\"controlClose\"\r\n      [scrollable]=\"scrollable\"\r\n      [bgColor]=\"bgColor\">\r\n        <freud-tab-panel header=\"Header 1\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 2\">\r\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 3\">\r\n            Content 3\r\n        </freud-tab-panel>\r\n    </freud-tab-view>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateIcon",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/tab-view/TabView.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudTabViewComponent>",
                    "defaultValue": "(args: FreudTabViewComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-tab-view\r\n      [activeIndex]=\"activeIndex\"\r\n      [controlClose]=\"controlClose\"\r\n      [scrollable]=\"scrollable\"\r\n      [bgColor]=\"bgColor\">\r\n        <freud-tab-panel header=\"Header 1\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\r\n            Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 2\" [rightIcon]=\"'freud-icon freud-icon-plus'\">\r\n            At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio. Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.\r\n        </freud-tab-panel>\r\n        <freud-tab-panel header=\"Header 3\" [leftIcon]=\"'freud-icon freud-icon-plus'\">\r\n            Content 3\r\n        </freud-tab-panel>\r\n    </freud-tab-view>\r\n  `,\r\n})"
                }
            ],
            "stories/others/acordion/Acordion.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateDisabled.bind({})"
                },
                {
                    "name": "Multiple",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAccordionComponent>",
                    "defaultValue": "(args: FreudAccordionComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-accordion [multiple]=\"multiple\">\r\n        <freud-accordion-tab header=\"Header I\">\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\r\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header II\">\r\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\r\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\r\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header III\">\r\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\r\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\r\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\r\n        </freud-accordion-tab>\r\n    </freud-accordion>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/acordion/Acordion.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudAccordionComponent>",
                    "defaultValue": "(args: FreudAccordionComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-accordion [multiple]=\"multiple\">\r\n        <freud-accordion-tab header=\"Header I\">\r\n            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation\r\n                ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n                Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header II\">\r\n            <p>Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore veritatis et quasi\r\n                architecto beatae vitae dicta sunt explicabo. Nemo enim ipsam voluptatem quia voluptas sit aspernatur aut odit aut fugit, sed quia consequuntur magni dolores eos qui ratione\r\n                voluptatem sequi nesciunt. Consectetur, adipisci velit, sed quia non numquam eius modi.</p>\r\n        </freud-accordion-tab>\r\n        <freud-accordion-tab header=\"Header III\" [disabled]=\"true\">\r\n            <p>At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium voluptatum deleniti atque corrupti quos dolores et quas molestias excepturi sint occaecati\r\n                        cupiditate non provident, similique sunt in culpa qui officia deserunt mollitia animi, id est laborum et dolorum fuga. Et harum quidem rerum facilis est et expedita distinctio.\r\n                        Nam libero tempore, cum soluta nobis est eligendi optio cumque nihil impedit quo minus.</p>\r\n        </freud-accordion-tab>\r\n    </freud-accordion>\r\n  `,\r\n})"
                }
            ],
            "stories/others/action-icon/ActionIcon.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/action-icon/ActionIcon.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudActionIconComponent>",
                    "defaultValue": "(args: FreudActionIconComponent) => ({\r\n  props: { ...args },\r\n  template: `<freud-action-icon [bgColor]=\"bgColor\"></freud-action-icon>`,\r\n})"
                }
            ],
            "stories/others/calendar/Calendar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "MonthView",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCalendarComponent>",
                    "defaultValue": "(args: FreudCalendarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-calendar\r\n      [selectionMode]=\"selectionMode\"\r\n      [dateFormat]=\"dateFormat\"\r\n      [inline]=\"inline\"\r\n      [showOtherMonths]=\"showOtherMonths\"\r\n      [selectOtherMonths]=\"selectOtherMonths\"\r\n      [showWeek]=\"showWeek\"\r\n      [view]=\"view\"\r\n      [yearNavigator]=\"yearNavigator\"\r\n      [yearRange]=\"yearRange\"\r\n      [defaultDate]=\"defaultDate\"\r\n      [showTime]=\"showTime\"\r\n      [hourFormat]=\"hourFormat\"\r\n      [disabled]=\"disabled\"\r\n      [timeOnly]=\"timeOnly\"\r\n      [monthNavigator]=\"monthNavigator\"\r\n      [disabledDates]=\"disabledDates\"\r\n      [required]=\"required\"\r\n      [maxDate]=\"maxDate\"\r\n      [minDate]=\"minDate\"\r\n      [(ngModel)]=\"value\">\r\n    </freud-calendar>\r\n  `,\r\n})"
                },
                {
                    "name": "TimeOnly",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "YearNavigator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/calendar/Calendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/others/captcha/Captcha.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/captcha/Captcha.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/captcha/Captcha.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/captcha/Captcha.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudCaptchaComponent>",
                    "defaultValue": "(args: FreudCaptchaComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-captcha [siteKey]=\"siteKey\" [autoLoadScript]=\"true\" [initCallback]=\"'initRecaptcha'\"></freud-captcha>\r\n  `,\r\n})"
                }
            ],
            "stories/others/chip/Chip.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Removable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/chip/Chip.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudChipComponent>",
                    "defaultValue": "(args: FreudChipComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-chip\r\n        [label]=\"'Action'\"\r\n        [removable]=\"removable\">\r\n    </freud-chip>\r\n  `,\r\n})"
                }
            ],
            "stories/others/divider/Divider.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Horizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateHorizontal.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "TemplateHorizontal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <freud-divider\r\n          [tabindex]=\"tabindex\"\r\n          [layout]=\"'horizontal'\"\r\n          [align]=\"'left'\">\r\n            Title\r\n      </freud-divider><br>\r\n      <freud-divider\r\n          [tabindex]=\"tabindex\"\r\n          [layout]=\"'horizontal'\"\r\n          [align]=\"'center'\">\r\n            Title\r\n      </freud-divider><br>\r\n      <freud-divider\r\n          [tabindex]=\"tabindex\"\r\n          [layout]=\"'horizontal'\"\r\n          [align]=\"'right'\">\r\n            Title\r\n      </freud-divider>\r\n  `,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-divider\r\n        [tabindex]=\"tabindex\"\r\n        [layout]=\"layout\"\r\n        [bgColor]=\"bgColor\">\r\n        Title\r\n    </freud-divider>\r\n`"
                },
                {
                    "name": "TemplateVertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDividerComponent>",
                    "defaultValue": "(args: FreudDividerComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n      <div style=\"display: flex;gap: 16px;height: 220px\">\r\n        <freud-divider\r\n            [tabindex]=\"tabindex\"\r\n            [layout]=\"'vertical'\"\r\n            [align]=\"'top'\">\r\n              Title\r\n        </freud-divider>\r\n        <freud-divider\r\n            [tabindex]=\"tabindex\"\r\n            [layout]=\"'vertical'\"\r\n            [align]=\"'bottom'\">\r\n              Title\r\n        </freud-divider>\r\n      </div>\r\n  `,\r\n})"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/divider/Divider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateVertical.bind({})"
                }
            ],
            "stories/others/paginator/Paginator.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "PageReport",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/paginator/Paginator.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPaginatorComponent>",
                    "defaultValue": "(args: FreudPaginatorComponent) => ({\r\n  props: { ...args },\r\n  template: `<freud-paginator\r\n    [rows]=\"rows\"\r\n    [totalRecords]=\"totalRecords\"\r\n    [pageLinkSize]=\"pageLinkSize\"\r\n    [first]=\"first\"\r\n    [showFirstLastIcon]=\"showFirstLastIcon\"\r\n    [alwaysShow]=\"alwaysShow\"\r\n    [currentPageReportTemplate]=\"currentPageReportTemplate\"\r\n    [showCurrentPageReport]=\"showCurrentPageReport\"\r\n    [bgColor]=\"bgColor\">\r\n    </freud-paginator>`,\r\n})"
                }
            ],
            "stories/structure/slide-menu/SlideMenu.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "items",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FreudMenuItem[]",
                    "defaultValue": "[{\r\n  label: 'Options',\r\n  items: [{\r\n    label: 'Update',\r\n    icon: 'freud-icon freud-icon-refresh',\r\n    command: () => {/* Comando */ }\r\n  },\r\n    {\r\n      label: 'Delete',\r\n      icon: 'freud-icon freud-icon-times'\r\n    }\r\n  ]},\r\n  {\r\n    label: 'Navigate',\r\n    items: [{\r\n      label: 'Update',\r\n      icon: 'freud-icon freud-icon-external-link',\r\n    },\r\n      {\r\n        label: 'Router',\r\n        icon: 'freud-icon freud-icon-upload',\r\n        routerLink: '/fileupload'\r\n      }\r\n    ]}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/slide-menu/SlideMenu.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSlideMenuComponent>",
                    "defaultValue": "(args: FreudSlideMenuComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-slide-menu [items]=\"items\"></freud-slide-menu>\r\n  `,\r\n})"
                }
            ],
            "stories/others/full-calendar/FullCalendar.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "calendarOptions",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CalendarOptions",
                    "defaultValue": "{\r\n  initialView: 'dayGridMonth',\r\n  plugins: [dayGridPlugin, interactionPlugin, timeGridPlugin],\r\n  headerToolbar: {\r\n    left: 'prev,next today',\r\n    center: 'title',\r\n    right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n  },\r\n  events: [\r\n    { title: 'event 1', date: '2022-12-12' },\r\n    { title: 'event 2', date: '2022-12-24' }\r\n  ]\r\n}"
                },
                {
                    "name": "CustomHeader",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/full-calendar/FullCalendar.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudFullCalendarComponent>",
                    "defaultValue": "(args: FreudFullCalendarComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-full-calendar [bgColor]=\"bgColor\" [events]=\"events\" [options]=\"options\">\r\n    </freud-full-calendar>\r\n  `,\r\n})"
                }
            ],
            "stories/others/scroll-top/ScrollTop.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTargetBGColor.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "TargetElement",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateTarget.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-scroll-top [threshold]=\"200\"></freud-scroll-top>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateTarget",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"height: 250px;width: 250px; overflow: auto\">\r\n        <p>\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n          Vitae et leo duis ut diam.\r\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\r\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\r\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\r\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\r\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\r\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\r\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\r\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\r\n          Mattis aliquam faucibus purus in massa tempor nec.\r\n      </p>\r\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\"></freud-scroll-top>\r\n    </div>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateTargetBGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/scroll-top/ScrollTop.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudScrollTopComponent>",
                    "defaultValue": "(args: FreudScrollTopComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <div style=\"height: 250px;width: 300px; padding: 10px; overflow: auto;background-color: #241249; color: white\">\r\n        <p>\r\n          Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n          Vitae et leo duis ut diam.\r\n          Ultricies mi quis hendrerit dolor magna eget est lorem. Amet consectetur adipiscing elit ut.\r\n          Nam libero justo laoreet sit amet. Pharetra massa massa ultricies mi quis hendrerit dolor magna.\r\n          Est ultricies integer quis auctor elit sed vulputate. Consequat ac felis donec et. Tellus orci ac auctor augue mauris.\r\n          Semper feugiat nibh sed pulvinar proin gravida hendrerit lectus a. Tincidunt arcu non sodales neque sodales.\r\n          Metus aliquam eleifend mi in nulla posuere sollicitudin aliquam ultrices. Sodales ut etiam sit amet nisl purus.\r\n          Cursus sit amet dictum sit amet. Tristique senectus et netus et malesuada fames ac turpis egestas.\r\n          Et tortor consequat id porta nibh venenatis cras sed. Diam maecenas ultricies mi eget mauris.\r\n          Eget egestas purus viverra accumsan in nisl nisi. Suscipit adipiscing bibendum est ultricies integer.\r\n          Mattis aliquam faucibus purus in massa tempor nec.\r\n      </p>\r\n        <freud-scroll-top [target]=\"'parent'\" [threshold]=\"100\" [bgColor]=\"true\"></freud-scroll-top>\r\n    </div>\r\n  `,\r\n})"
                }
            ],
            "stories/others/select-button/SelectButton.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "OptionDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "options",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {label: 'Item1'},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
                },
                {
                    "name": "optionsDisabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  {label: 'Item1', disabled: true},\r\n  {label: 'Item2'},\r\n  {label: 'Item3'},\r\n  {label: 'Item4'}\r\n]"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSelectButtonComponent>",
                    "defaultValue": "(args: FreudSelectButtonComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/select-button/SelectButton.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-select-button\r\n        [options]=\"options\"\r\n        [multiple]=\"multiple\"\r\n        [tabindex]=\"tabindex\"\r\n        [bgColor]=\"bgColor\"\r\n        [disabled]=\"disabled\"\r\n        [selectedOption]=\"selectedOption\"\r\n        [optionDisabled]=\"optionDisabled\"\r\n        [optionLabel]=\"optionLabel\"></freud-select-button>\r\n`"
                }
            ],
            "stories/others/slider/Slider.stories.ts": [
                {
                    "name": "BGColor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Disabled",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Range",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudSliderComponent>",
                    "defaultValue": "(args: FreudSliderComponent) => ({\r\n  props: { ...args },\r\n  template: templateHTML,\r\n})"
                },
                {
                    "name": "templateHTML",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "`\r\n    <freud-slider\r\n        [(ngModel)]=\"value\"\r\n        [tabindex]=\"tabindex\"\r\n        [bgColor]=\"bgColor\"\r\n        [orientation]=\"orientation\"\r\n        [range]=\"range\"\r\n        [disabled]=\"disabled\">\r\n    </freud-slider>\r\n`"
                },
                {
                    "name": "Vertical",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/slider/Slider.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "projects/web-components/src/components/typography/typrography.type.ts": [
                {
                    "name": "bodyTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typrography.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // Regular\r\n  'smallRegular1-5',\r\n  'bodyRegular1-5',\r\n\r\n  'smallRegular1-2',\r\n  'bodyRegular1-2',\r\n\r\n  'smallRegular1',\r\n  'bodyRegular1',\r\n  \r\n  'smallRegularAuto',\r\n  'bodyRegularAuto',\r\n\r\n  // Semibold\r\n  'smallSemibold1-5',\r\n  'bodySemibold1-5',\r\n\r\n  'smallSemibold1-2',\r\n  'bodySemibold1-2',\r\n\r\n  'smallSemibold1',\r\n  'bodySemibold1',\r\n\r\n  'smallSemiboldAuto',\r\n  'bodySemiboldAuto',\r\n\r\n  // Bold\r\n  'smallBold1-5',\r\n  'bodyBold1-5',\r\n\r\n  'smallBold1-2',\r\n  'bodyBold1-2',\r\n\r\n  'smallBold1',\r\n  'bodyBold1',\r\n\r\n  'smallBoldAuto',\r\n  'bodyBoldAuto',\r\n]"
                },
                {
                    "name": "headingTypes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typrography.type.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\r\n  // Regular\r\n  'h1Regular1-5',\r\n  'h2Regular1-5',\r\n  'h3Regular1-5',\r\n  'h4Regular1-5',\r\n  'h5Regular1-5',\r\n  'h6Regular1-5',\r\n\r\n  'h1Regular1-2',\r\n  'h2Regular1-2',\r\n  'h3Regular1-2',\r\n  'h4Regular1-2',\r\n  'h5Regular1-2',\r\n  'h6Regular1-2',\r\n\r\n  'h1Regular1',\r\n  'h2Regular1',\r\n  'h3Regular1',\r\n  'h4Regular1',\r\n  'h5Regular1',\r\n  'h6Regular1',\r\n  \r\n  'h1RegularAuto',\r\n  'h2RegularAuto',\r\n  'h3RegularAuto',\r\n  'h4RegularAuto',\r\n  'h5RegularAuto',\r\n  'h6RegularAuto',\r\n\r\n  // Semibold\r\n  'h1Semibold1-5',\r\n  'h2Semibold1-5',\r\n  'h3Semibold1-5',\r\n  'h4Semibold1-5',\r\n  'h5Semibold1-5',\r\n  'h6Semibold1-5',\r\n\r\n  'h1Semibold1-2',\r\n  'h2Semibold1-2',\r\n  'h3Semibold1-2',\r\n  'h4Semibold1-2',\r\n  'h5Semibold1-2',\r\n  'h6Semibold1-2',\r\n\r\n  'h1Semibold1',\r\n  'h2Semibold1',\r\n  'h3Semibold1',\r\n  'h4Semibold1',\r\n  'h5Semibold1',\r\n  'h6Semibold1',\r\n\r\n  'h1SemiboldAuto',\r\n  'h2SemiboldAuto',\r\n  'h3SemiboldAuto',\r\n  'h4SemiboldAuto',\r\n  'h5SemiboldAuto',\r\n  'h6SemiboldAuto',\r\n\r\n  // Bold\r\n  'h1Bold1-5',\r\n  'h2Bold1-5',\r\n  'h3Bold1-5',\r\n  'h4Bold1-5',\r\n  'h5Bold1-5',\r\n  'h6Bold1-5',\r\n\r\n  'h1Bold1-2',\r\n  'h2Bold1-2',\r\n  'h3Bold1-2',\r\n  'h4Bold1-2',\r\n  'h5Bold1-2',\r\n  'h6Bold1-2',\r\n\r\n  'h1Bold1',\r\n  'h2Bold1',\r\n  'h3Bold1',\r\n  'h4Bold1',\r\n  'h5Bold1',\r\n  'h6Bold1',\r\n\r\n  'h1BoldAuto',\r\n  'h2BoldAuto',\r\n  'h3BoldAuto',\r\n  'h4BoldAuto',\r\n  'h5BoldAuto',\r\n  'h6BoldAuto',\r\n]"
                }
            ],
            "projects/web-components/src/test.ts": [
                {
                    "name": "context",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "require.context('./', true, /\\.spec\\.ts$/)"
                },
                {
                    "name": "require",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/test.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type"
                }
            ],
            "stories/feedback/toast/Toast.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/toast/Toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/feedback/toast/Toast.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudToastComponent>",
                    "defaultValue": "(args: FreudToastComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-toast-examples>\r\n    </freud-toast-examples>\r\n  `,\r\n})"
                }
            ],
            "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudConfirmDialogComponent>",
                    "defaultValue": "(args: FreudConfirmDialogComponent) => ({\r\n  template: `\r\n    <freud-confirm-dialog-example></freud-confirm-dialog-example>\r\n  `,\r\n})"
                }
            ],
            "stories/modal-and-popover/dialog/Dialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Maximizable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Modal",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudDialogExampleComponent>",
                    "defaultValue": "(args: FreudDialogExampleComponent) => ({\r\n  props: {...args},\r\n  template: `\r\n    <freud-dialog-example [view]=\"view\"></freud-dialog-example>\r\n  `,\r\n})"
                }
            ],
            "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudConfirmPopupComponent>",
                    "defaultValue": "(args: FreudConfirmPopupComponent) => ({\r\n  template: `\r\n    <freud-confirm-popup-example></freud-confirm-popup-example>\r\n  `,\r\n})"
                }
            ],
            "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "() => ({\r\n  template: `\r\n    <freud-dynamic-dialog-example></freud-dynamic-dialog-example>\r\n  `,\r\n})"
                }
            ],
            "stories/structure/panel/Panel.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Footer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateFooter.bind({})"
                },
                {
                    "name": "Icons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "TemplateIcons.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelComponent>",
                    "defaultValue": "(args: FreudPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"toggleable\">\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n    </freud-panel>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateFooter",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelComponent>",
                    "defaultValue": "(args: FreudPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-panel [header]=\"'Header'\">\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n      <ng-container freudTemplatefooter>\r\n          Footer\r\n      </ng-container>\r\n    </freud-panel>\r\n  `,\r\n})"
                },
                {
                    "name": "TemplateIcons",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudPanelComponent>",
                    "defaultValue": "(args: FreudPanelComponent) => ({\r\n  props: { ...args },\r\n  template: `\r\n    <freud-panel [header]=\"'Header'\" [toggleable]=\"true\">\r\n      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\r\n      Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.\r\n      Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\r\n      Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\r\n      <ng-container freudTemplateIcons>\r\n        <freud-button [color]=\"'ghost'\" class=\"p-panel-header-icon p-link\" (click)=\"menu.toggle($event)\">\r\n          <span class=\"freud-icon freud-icon-cog\"></span>\r\n        </freud-button>\r\n      </ng-container>\r\n    </freud-panel>\r\n  `,\r\n})"
                },
                {
                    "name": "Toggleable",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/structure/panel/Panel.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                }
            ],
            "stories/others/block-ui/BlockUI.stories.ts": [
                {
                    "name": "Default",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Panel",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "stories/others/block-ui/BlockUI.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story<FreudBlockExampleComponent>",
                    "defaultValue": "(args: FreudBlockExampleComponent) => ({\r\n  props: { ...args },\r\n  template: `<freud-block-ui-example [withTarget]=\"withTarget\"></freud-block-ui-example>`,\r\n})"
                }
            ],
            "projects/web-components/src/components/typography/typography.component.ts": [
                {
                    "name": "types",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "projects/web-components/src/components/typography/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "headingTypes.concat(bodyTypes)"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "projects/web-components/src/components/media/avatar/avatar.component.ts": [
                {
                    "name": "avatarSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\" | \"lg\"",
                    "file": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/buttons/button/button.component.ts": [
                {
                    "name": "buttonColors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"ghost\"",
                    "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "buttonSizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sm\" | \"md\" | \"lg\"",
                    "file": "projects/web-components/src/components/buttons/button/button.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/badge/badge.component.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\" | \"actived\"",
                    "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "sizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"large\"",
                    "file": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/tag/tag.component.ts": [
                {
                    "name": "colors",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"success\" | \"info\" | \"warning\" | \"error\"",
                    "file": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts": [
                {
                    "name": "directions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"up\" | \"down\" | \"left\" | \"right\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\"",
                    "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                },
                {
                    "name": "types",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\"",
                    "file": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/typography/typography.component.ts": [
                {
                    "name": "fontTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "projects/web-components/src/components/typography/typography.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ],
            "projects/web-components/src/components/forms/listbox/listbox.component.ts": [
                {
                    "name": "listboxFilterMatchModes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"contains\" | \"startsWith\" | \"endsWith\" | \"equals\" | \"notEquals\" | \"in\" | \"lt\" | \"lte\" | \"gt\" | \"gte\"",
                    "file": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts": [
                {
                    "name": "position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"left\" | \"right\"",
                    "file": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/toast/toast.component.ts": [
                {
                    "name": "positions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top-right\" | \"top-left\" | \"bottom-left\" | \"bottom-right\" | \"top-center\" | \"bottom-center\" | \"center\"",
                    "file": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts": [
                {
                    "name": "positions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"center\" | \"top\" | \"bottom\" | \"left\" | \"right\" | \"top-left\" | \"top-right\" | \"bottom-left\" | \"bottom-right\"",
                    "file": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts": [
                {
                    "name": "severities",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                    "file": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "projects/web-components/src/components/feedback/knob/knob.component.ts": [
                {
                    "name": "sizes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"default\" | \"large\"",
                    "file": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "projects/web-components/src/api/gallery-photo.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GalleryPhoto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/api/menu.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/api/message.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudMessage",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/speed-dial/speed-dial.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSpeedDialComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/buttons/split-button/split-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSplitButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/directive/template/template.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FreudTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAlertMessageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/alert-messages/alert-messages.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAlertMessagesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/badge/badge.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBadgeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/knob/knob.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudKnobComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/progress-bar/progress-bar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudProgressBarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/progress-spinner/progress-spinner.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudProgressSpinnerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/rating/rating.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRatingComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/skeleton/skeleton.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSkeletonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/steps/steps.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudStepsComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/steps/steps.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "StepMenu",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/tag/tag.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTagComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/feedback/tooltip/tooltip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTooltipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/auto-complete/auto-complete.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAutoCompleteComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/cascade-select/cascade-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCascadeSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-mask/input-mask.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputMaskComponent",
                "coveragePercent": 0,
                "coverageCount": "0/28",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-number/input-number.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputNumberComponent",
                "coveragePercent": 0,
                "coverageCount": "0/41",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-password/input-password.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputPasswordComponent",
                "coveragePercent": 0,
                "coverageCount": "0/31",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-text/input-text.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputTextComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/input-textarea/input-textarea.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudInputTextAreaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/listbox/listbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudListboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/multi-select/multi-select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMultiSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/radio-button/radio-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRadioButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/forms/switch/switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/avatar/avatar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAvatarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/fille-upload/file-upload.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudFileUploadComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/gallery/gallery.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudGalleryComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/media/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/confirm-dialog/confirm-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/confirm-popup/confirm-popup.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmPopupComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dialog/dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.interface.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FreudDynamicDialogConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudDialogService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/modal-and-popover/dynamic-dialog/dynamic-dialog.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudDynamicDialogRef",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAccordionTabComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/action-icon/action-icon.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudActionIconComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/block-ui/block-ui.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBlockUIComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/calendar/calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/38",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/captcha/captcha.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCaptchaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/card/card.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudCardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/chip/chip.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudChipComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/divider/divider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDividerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/full-calendar/full-calendar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudFullCalendarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/paginator/paginator.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudPaginatorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/scroll-top/scroll-top.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/select-button/select-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSelectButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/slider/slider.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSliderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSortIcon",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/table/table.component.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "FreudSortableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/others/timeline/timeline.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollTopComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/breadcrumb/breadcrumb.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBreadcrumbComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/menu/menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/menubar/menubar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudMenubarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/panel-menu/panel-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudPanelMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/panel/panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/scroll-panel/scroll-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudScrollPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/slide-menu/slide-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSlideMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/splitter/splitter.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudSplitterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-menu/tab-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/structure/tab-view/tab-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTabViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typography.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudTypographyComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typography.component.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "types",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typrography.type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bodyTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/components/typography/typrography.type.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "headingTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/services/confirmation.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudConfirmationService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/services/message.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FreudMessageService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "context",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "projects/web-components/src/test.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "require",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Ghost",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTMLBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTMLSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateLoading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithIconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectionDown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DirectionLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsWithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Mask",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeQuarterCircle",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/speed-dial/SpeedDial.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TypeQuarterDownRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itemsWithoutIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/buttons/split-button/SplitButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Inline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "messages",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/alert-messages/AlertMessages.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateInline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Actived",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBlank",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSizes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/badge/Badge.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/knob/Knob.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Indeterminate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-bar/ProgressBar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/progress-spinner/ProgressSpinner.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/rating/Rating.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/skeleton/Skeleton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "itens",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/steps/Steps.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColorOutline",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Info",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineDefault",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OutlineWarning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Success",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBgColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tag/Tag.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Warning",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/Toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/Toast.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/toast/toast-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudToastExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Bottom",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Left",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Right",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/feedback/tooltip/Tooltip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Top",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Dropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDropdown",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/AutoComplete.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/auto-complete/auto-complete-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudAutoCompleteExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/cascade-select/CascadeSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/checkbox/Checkbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxAndText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconAndRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "IconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "RadioAndButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCheckboxAndText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconAndRadio",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconLeft",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIconRight",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-group/InputGroup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRadioAndButton",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Celular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CPF",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Telefone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-mask/InputMask.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ButtonLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateButtonLayout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-number/InputNumber.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomTemplate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Feedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFeedback",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateFull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFull",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-password/InputPassword.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HelperText",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Placeholder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-text/InputText.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AutoResize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/input-textarea/InputTextArea.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Checkbox",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CheckboxAndFilter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Filter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/listbox/Listbox.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Chip",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/multi-select/MultiSelect.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Label",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/RadioButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/radio-button/radio-button-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudRadioButtonExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/forms/reactive-form-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudReactiveFormExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Invalid",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/select/Select.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/forms/switch/Switch.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "value",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudHeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Imagem",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithBadge",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/avatar/Avatar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithLabel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BasicUi",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/file-upload/FileUpload.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "images",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/gallery/gallery.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "WithoutThumbnail",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/media/image/Image.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-dialog/ConfirmDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/ConfirmPopup.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/confirm-popup/confirm-popup-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmPopupExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Maximizable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Modal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/Dialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dialog/dialog-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/DynamicDialog.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDynamicDialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/dynamic-dialog/dynamic-dialog-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudDynamicExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "stories/modal-and-popover/modal-and-popover-examples/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudConfirmationDialogExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Multiple",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/acordion/Acordion.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/action-icon/ActionIcon.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Panel",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/BlockUI.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/block-ui/block-example/example.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FreudBlockExampleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MonthView",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TimeOnly",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/calendar/Calendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "YearNavigator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/captcha/Captcha.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/captcha/Captcha.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/captcha/Captcha.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Advanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/card/Card.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateAdvanced",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Removable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/chip/Chip.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Horizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateHorizontal",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateVertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/divider/Divider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "calendarOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CustomHeader",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/full-calendar/FullCalendar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "PageReport",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/paginator/Paginator.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TargetElement",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTarget",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/scroll-top/ScrollTop.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTargetBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "OptionDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "options",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "optionsDisabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/select-button/SelectButton.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Disabled",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Range",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "templateHTML",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/slider/Slider.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Basic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "CaptionAndSummary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "data",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Sort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateCaptionAndSummary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/others/table/Table.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSort",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "home",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/breadcrumb/Breadcrumb.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menu/Menu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "home",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/menubar/Menubar.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel-menu/PanelMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Footer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateFooter",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/panel/Panel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Toggleable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/scroll-panel/ScrollPanel.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/slide-menu/SlideMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/splitter/Splitter.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Vertical",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "items",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-menu/TabMenu.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Default",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Icon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Scrollable",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/structure/tab-view/TabView.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateIcon",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "BGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingBGColor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "HeadingSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TemplateTextSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextBold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextRegular",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "stories/typography/typography.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "TextSemibold",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}