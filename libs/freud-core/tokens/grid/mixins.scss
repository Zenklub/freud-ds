@use 'sass:list';
@use 'sass:map';
@use 'sass:math';
@use './grid-variables';

// returns the lower grid boundary or null if the smallest grid is selected
@function breakpoint-min($size) {
  @if not map.has-key(grid-variables.$breakpoints, $size) {
    @error "Invalid size! Choose one of #{map.keys(grid-variables.$breakpoints)}";
  }
  $min: map.get(grid-variables.$breakpoints, $size);

  @return if($min > 0, $min, null);
}

// returns the upper grid boundary or null if the largest grid is selected
@function breakpoint-max($size) {
  @if not map.has-key(grid-variables.$breakpoints, $size) {
    @error "Invalid size! Choose one of #{map.keys(grid-variables.$breakpoints)}";
  }
  $names: map.keys(grid-variables.$breakpoints);
  $n: list.index($names, $size);
  $prev: if($n > 1, list.nth($names, $n - 1), null);

  @return if($prev, (breakpoint-min($prev) - 1px), null);
}

// For internal use.
@mixin screen-fluid($size) {
  @if not map.has-key(grid-variables.$breakpoints, $size) {
    @error "Invalid size! Choose one of #{map.keys(grid-variables.$breakpoints)}";
  }

  $min: breakpoint-min($size);
  $max: breakpoint-max($size);

  @if $min == null and $max != null {
    // SM
    @media (max-width: $max) {
      @content;
    }
  } @else if $min != null and $max != null {
    // MD
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $min != null and $max == null {
    // LG
    @media (min-width: $min) {
      @content;
    }
  } @else {
    // Fallback - no breakpoints defined
    @content;
  }
}

@mixin cell-span_($size, $span, $gutter) {
  @if not map.has-key(grid-variables.$breakpoints, $size) {
    @error "Invalid size! Choose one of #{map.keys(grid-variables.$breakpoints)}";
  }

  $percent: math.percentage(
    math.div($span, grid-variables.$columns)
  );

  @if $percent > 100% {
    $percent: 100%;
  }

  width: calc(#{$percent} - #{$gutter});
  // stylelint-disable-next-line declaration-block-no-duplicate-properties
  width: calc(#{$percent} - map.get(grid-variables.$default-gutter, $size));

  @supports (display: grid) {
    width: auto;
    grid-column-end: span math.min($span, grid-variables.$columns);
  }
}

// Public mixins, meant for developer usage.
@mixin layout-grid($size, $margin, $max-width: null) {
  @if not map.has-key(grid-variables.$breakpoints, $size) {
    @error "Invalid size! Choose one of #{map.keys(grid-variables.$breakpoints)}";
  }

  box-sizing: border-box;
  margin: 0 auto;
  padding: 0 $margin;

  @if $max-width {
    max-width: $max-width;
  }
}

@mixin inner($size, $margin, $gutter) {
  @if not map.has-key(grid-variables.$breakpoints, $size) {
    @error "Invalid size! Choose one of #{map.keys(grid-variables.$breakpoints)}";
  }

  display: flex;
  flex-flow: row wrap;
  align-items: stretch;
  margin: math.div(-$gutter, 2);
  // stylelint-disable-next-line declaration-block-no-duplicate-properties
  margin: calc(map.get(grid-variables.$default-margin, $size) / 2 * -1);

  @supports (display: grid) {
    display: grid;
    margin: 0;
    grid-gap: $gutter;
    // stylelint-disable-next-line declaration-block-no-duplicate-properties
    grid-gap: map.get(grid-variables.$default-gutter, $size);
    grid-template-columns: repeat(
      grid-variables.$columns,
      minmax(0, 1fr)
    );
  }
}

@mixin cell($size, $default-span, $gutter) {
  @if not map.has-key(grid-variables.$breakpoints, $size) {
    @error "Invalid size! Choose one of #{map.keys(grid-variables.$breakpoints)}";
  }

  @include cell-span_($size, $default-span, $gutter);

  box-sizing: border-box;
  margin: math.div($gutter, 2);
  // stylelint-disable-next-line declaration-block-no-duplicate-properties
  margin: calc(map.get(grid-variables.$default-gutter, $size) / 2);

  @supports (display: grid) {
    margin: 0;
  }
}

@mixin cell-order($order) {
  order: $order;
}

@mixin cell-align($position) {
  @if $position == 'top' {
    align-self: flex-start;

    @supports (display: grid) {
      align-self: start;
    }
  }

  @if $position == 'middle' {
    align-self: center;
  }

  @if $position == 'bottom' {
    align-self: flex-end;

    @supports (display: grid) {
      align-self: end;
    }
  }

  @if $position == 'stretch' {
    align-self: stretch;
  }
}
